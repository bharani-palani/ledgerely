name: Deployment
on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging
    paths-ignore:
      - ".github/**/*"

  workflow_dispatch:

jobs:
  ValidateCodeCompliance:
    name: Checking code compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install node modules
        run: npm install

      - name: Run Lint
        continue-on-error: true
        run: npm run lint

  TestCode:
    name: Test code
    runs-on: ubuntu-latest
    needs: [ValidateCodeCompliance]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install node modules
        run: npm install

      - name: Run Test
        continue-on-error: true
        run: npm run test:coverage

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [TestCode]
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm install
      - name: npm install get-stream
        run: npm install get-stream
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: Bharani
          GIT_AUTHOR_EMAIL: tp.bharani@gmail.com
        run: npx semantic-release

  Deployment:
    name: Deploy to staging
    needs: [TestCode, release]
    if: github.event.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest

    environment:
      name: staging

    env:
      SKIP_PREFLIGHT_CHECK: true
      FAST_REFRESH: false
      GENERATE_SOURCEMAP: false
      REACT_APP_ENV: staging
      REACT_APP_BASE_URL: ${{ vars.BASE_URL }}
      REACT_APP_RAZORPAY_TEST_KEY_ID: ${{ secrets.RAZORPAY_TEST_KEY_ID }}
      REACT_APP_RAZORPAY_TEST_KEY_SECRET:
        ${{ secrets.RAZORPAY_TEST_KEY_SECRET }}
      REACT_APP_RAZORPAY_WEBHOOK_SECRET: ${{ secrets.RAZORPAY_WEBHOOK_SECRET }}
      REACT_APP_RAZORPAY_LIVE_KEY_ID: ${{ secrets.RAZORPAY_LIVE_KEY_ID }}
      REACT_APP_RAZORPAY_LIVE_KEY_SECRET:
        ${{ secrets.RAZORPAY_LIVE_KEY_SECRET }}
      REACT_APP_SUBFOLDER: ${{ vars.SUBFOLDER }}
      REACT_APP_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      REACT_APP_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
    steps:
      - name: Starting Deployment
        run: echo "${{vars.APP_ENV}}"

      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: clean cache
        run: npm cache clean --force

      - name: npm install
        run: npm install

      - name: npm run build
        run: npm run build

      - name: Generate JSON version
        run: npm run generate-meta-tag

      - name: Uploading build
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.HOST_NAME}}
          username: ${{secrets.FTP_USER}}
          password: ${{ secrets.FTP_PASSWORD }}
          port: "21"
          local-dir: build/
          server-dir: ${{ vars.FTP_UPLOAD_DIR }}/

      - name: Uploading services
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.HOST_NAME}}
          username: ${{secrets.FTP_USER}}
          password: ${{ secrets.FTP_PASSWORD }}
          port: "21"
          local-dir: services/
          server-dir: ${{ vars.FTP_UPLOAD_DIR }}/services/

      - name: Create .env file
        run: |
          echo "APP_ENV=${{ vars.APP_ENV }}" >> .env
          echo "DOMAIN_URL=${{ vars.DOMAIN_URL }}" >> .env
          echo "BASE_URL=${{ vars.BASE_URL }}" >> .env
          echo "HOST_NAME=${{ secrets.HOST_NAME }}" >> .env
          echo "HOST_USERNAME=${{ secrets.HOST_USERNAME }}" >> .env
          echo "HOST_PASSSWORD=${{ secrets.HOST_PASSSWORD }}" >> .env
          echo "HOST_DATABASE=${{ secrets.HOST_DATABASE }}" >> .env
          echo "MAIL_PROTOCOL=${{ vars.MAIL_PROTOCOL }}" >> .env
          echo "MAIL_SMTP_HOST=${{ vars.MAIL_SMTP_HOST }}" >> .env
          echo "MAIL_SMTP_USER=${{ vars.MAIL_SMTP_USER }}" >> .env
          echo "MAIL_SMTP_PASSWORD=${{ vars.MAIL_SMTP_PASSWORD }}" >> .env
          echo "MAIL_TYPE=${{ vars.MAIL_TYPE }}" >> .env
          echo "MAIL_CHARSET=${{ vars.MAIL_CHARSET }}" >> .env
          echo "RAZORPAY_TEST_KEY_ID=${{ secrets.RAZORPAY_TEST_KEY_ID }}" >> .env
          echo "RAZORPAY_TEST_KEY_SECRET=${{ secrets.RAZORPAY_TEST_KEY_SECRET }}" >> .env
          echo "RAZORPAY_WEBHOOK_SECRET=${{ secrets.RAZORPAY_WEBHOOK_SECRET }}" >> .env
          echo "RAZORPAY_LIVE_KEY_ID=${{ secrets.RAZORPAY_LIVE_KEY_ID }}" >> .env
          echo "RAZORPAY_LIVE_KEY_SECRET=${{ secrets.RAZORPAY_LIVE_KEY_SECRET }}" >> .env

          curl -T ".env" "ftp://${{ secrets.HOST_NAME}}/${{ vars.FTP_UPLOAD_DIR }}/services/" \
          --user "${{secrets.FTP_USER}}:${{ secrets.FTP_PASSWORD }}" \

      - name: Create .htaccess file
        run: |
          echo "RewriteEngine On" >> .htaccess
          echo "RewriteBase /${{ vars.SUBFOLDER }}/" >> .htaccess
          echo "" >> .htaccess
          echo "RewriteCond %{REQUEST_FILENAME} !-f" >> .htaccess
          echo "RewriteCond %{REQUEST_FILENAME} !-d" >> .htaccess
          echo "RewriteRule ^ index.html [L]" >> .htaccess
          echo "" >> .htaccess
          echo "<IfModule mod_headers.c>" >> .htaccess
            echo "<FilesMatch '\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|otf|ttc|webp|mp4|mp3|wav|ogg|json)$'>" >> .htaccess
              echo "Header set Cache-Control 'max-age=31536000, public'" >> .htaccess
            echo "</FilesMatch>" >> .htaccess
            echo "<Files .json>" >> .htaccess
                echo "Header unset Cache-Control" >> .htaccess
            echo "</Files>" >> .htaccess
          echo "</IfModule>" >> .htaccess

          curl -T ".htaccess" "ftp://${{ secrets.HOST_NAME}}/${{ vars.FTP_UPLOAD_DIR }}/" \
          --user "${{secrets.FTP_USER}}:${{ secrets.FTP_PASSWORD }}" \

      - name: Generate latest version
        id: latest-tag
        run: |
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "Latest tag: $LATEST_TAG"
          echo '{"version":"$LATEST_TAG"}' >> meta.json

          curl -T "meta.json" "ftp://${{ secrets.HOST_NAME}}/${{ vars.FTP_UPLOAD_DIR }}/" \
          --user "${{secrets.FTP_USER}}:${{ secrets.FTP_PASSWORD }}" \
