{"version":3,"sources":["components/shared/D3/LineChart.js"],"names":["LineChart","_ref","width","height","data","marginTop","marginRight","marginBottom","marginLeft","markerSize","fillColor","fontColor","lineColor","fontSize","showYaxisLabel","showXaxisLabel","showYaxisLine","showXaxisLine","xAxisLabel","yAxisLabel","showXaxis","showYaxis","animationClass","showAnimation","axesRef","useRef","boundsWidth","boundsHeight","_d3$extent","d3","d","y","max","_slicedToArray","yScale","useMemo","domain","range","_d3$extent3","x","xMax","xScale","useEffect","svgElement","current","selectAll","remove","xAxisGenerator","append","attr","call","g","yAxisGenerator","linePath","lineBuilder","_jsx","children","_jsxs","fill","transform","style","textAnchor","concat","join","opacity","stroke","strokeWidth","className","ref","defaultProps","lineChartProps"],"mappings":"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","file":"static/js/12.fe285959.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { lineChartProps } from \"./propsData\";\nimport PropTypes from \"prop-types\";\n\nconst LineChart = ({\n  width,\n  height,\n  data,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  markerSize,\n  fillColor,\n  fontColor,\n  lineColor,\n  fontSize,\n  showYaxisLabel,\n  showXaxisLabel,\n  showYaxisLine,\n  showXaxisLine,\n  xAxisLabel,\n  yAxisLabel,\n  showXaxis,\n  showYaxis,\n  animationClass,\n  showAnimation,\n}) => {\n  const axesRef = useRef(null);\n  const boundsWidth = width - marginRight - marginLeft;\n  const boundsHeight = height - marginTop - marginBottom;\n\n  const [, max] = d3.extent(data, d => d.y);\n  const yScale = useMemo(() => {\n    return d3\n      .scaleLinear()\n      .domain([0, max || 0])\n      .range([boundsHeight, 0]);\n  }, [data, boundsHeight]);\n\n  const [, xMax] = d3.extent(data, d => d.x);\n  const xScale = useMemo(() => {\n    return d3\n      .scaleLinear()\n      .domain([0, xMax || 0])\n      .range([0, boundsWidth]);\n  }, [data, boundsWidth]);\n\n  useEffect(() => {\n    const svgElement = d3.select(axesRef.current);\n    svgElement.selectAll(\"*\").remove();\n    if (showXaxis) {\n      const xAxisGenerator = d3.axisBottom(xScale);\n      svgElement\n        .append(\"g\")\n        .attr(\"class\", \"xDomain\")\n        .attr(\"transform\", \"translate(0,\" + boundsHeight + \")\")\n        .call(xAxisGenerator)\n        .call(g =>\n          g\n            .selectAll(\".tick text\")\n            .attr(\"font-size\", fontSize)\n            .attr(\"fill\", fontColor),\n        )\n        .call(g => g.selectAll(\".domain\").attr(\"stroke\", lineColor))\n        .call(g => g.selectAll(\".tick line\").attr(\"stroke\", lineColor));\n      if (!showXaxisLine) {\n        svgElement.selectAll(\".xDomain .domain\").remove();\n        svgElement.selectAll(\".xDomain .tick line\").remove();\n      }\n    }\n\n    if (showYaxis) {\n      const yAxisGenerator = d3.axisLeft(yScale);\n      svgElement\n        .append(\"g\")\n        .attr(\"class\", \"yDomain\")\n        .call(yAxisGenerator)\n        .call(g =>\n          g\n            .selectAll(\".tick text\")\n            .attr(\"font-size\", fontSize)\n            .attr(\"fill\", fontColor),\n        )\n        .call(g => g.selectAll(\".domain\").attr(\"stroke\", lineColor))\n        .call(g => g.selectAll(\".tick line\").attr(\"stroke\", lineColor));\n\n      if (!showYaxisLine) {\n        svgElement.selectAll(\".yDomain .domain\").remove();\n        svgElement.selectAll(\".yDomain .tick line\").remove();\n      }\n    }\n  }, [\n    xScale,\n    yScale,\n    boundsHeight,\n    fontColor,\n    fontSize,\n    lineColor,\n    showXaxisLine,\n    showYaxisLine,\n    showXaxis,\n    showYaxis,\n  ]);\n\n  // Build the line\n  const lineBuilder = d3\n    .line()\n    .x(d => xScale(d.x))\n    .y(d => yScale(d.y));\n  const linePath = lineBuilder(data);\n  if (!linePath) {\n    return null;\n  }\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        {showYaxisLabel && (\n          <text\n            fontSize={fontSize}\n            x={-height / 2}\n            y='20'\n            fill={fontColor}\n            transform='rotate(270)'\n            style={{ textAnchor: \"middle\" }}\n          >\n            {yAxisLabel}\n          </text>\n        )}\n        <g\n          width={boundsWidth}\n          height={boundsHeight}\n          transform={`translate(${[marginLeft, marginTop].join(\",\")})`}\n        >\n          <path\n            d={linePath}\n            opacity={1}\n            stroke={fillColor}\n            fill='none'\n            strokeWidth={markerSize}\n            className={showAnimation ? animationClass : \"\"}\n          />\n        </g>\n        <g\n          width={boundsWidth}\n          height={boundsHeight}\n          ref={axesRef}\n          transform={`translate(${[marginLeft, marginTop].join(\",\")})`}\n        />\n        {showXaxisLabel && (\n          <text\n            fontSize={fontSize}\n            x={width / 2}\n            y={height - 10}\n            fill={fontColor}\n            style={{ textAnchor: \"middle\" }}\n          >\n            {xAxisLabel}\n          </text>\n        )}\n      </svg>\n    </div>\n  );\n};\nLineChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  markerSize: PropTypes.number,\n  fontSize: PropTypes.number,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  style: PropTypes.object,\n  data: PropTypes.array,\n  yTicks: PropTypes.number,\n  showXaxis: PropTypes.bool,\n  showYaxis: PropTypes.bool,\n  showYaxisLabel: PropTypes.bool,\n  showXaxisLabel: PropTypes.bool,\n  showYaxisLine: PropTypes.bool,\n  showXaxisLine: PropTypes.bool,\n  xAxisLabel: PropTypes.string,\n  yAxisLabel: PropTypes.string,\n  animationClass: PropTypes.string,\n  showAnimation: PropTypes.bool,\n};\nLineChart.defaultProps = lineChartProps;\n\nexport default LineChart;\n"],"sourceRoot":""}