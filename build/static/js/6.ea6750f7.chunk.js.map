{"version":3,"sources":["components/shared/D3/ScatterPlot/scatterplot.module.css","components/shared/D3/ScatterPlot/AxisLeft.js","components/shared/D3/ScatterPlot/AxisBottom.js","components/shared/D3/ScatterPlot/index.js"],"names":["module","exports","AxisLeft","_ref","yScale","pixelsPerTick","width","fontSize","fontColor","lineColor","range","ticks","useMemo","height","numberOfTicksTarget","Math","floor","map","value","yOffset","_jsx","_Fragment","children","_ref2","_jsxs","transform","concat","shapeRendering","x1","x2","stroke","strokeWidth","style","textAnchor","fill","AxisBottom","xScale","xOffset","y1","y2","Scatterplot","data","marginTop","marginRight","marginBottom","marginLeft","fillColor","yTicks","innerRadius","boundsWidth","boundsHeight","_useState","useState","_useState2","_slicedToArray","hoveredGroup","setHoveredGroup","d3","domain","min","apply","_toConsumableArray","v","y","max","x","allGroups","d","String","group","colorScale","allShapes","i","className","styles","scatterplotCircle","dimmed","r","cx","cy","onMouseOver","onMouseLeave","join","defaultProps","scatterPlotChartProps"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,kBAAoB,uCAAuC,OAAS,4B,wGCuDvEC,EApDE,SAAHC,GAOP,IANLC,EAAMD,EAANC,OACAC,EAAaF,EAAbE,cACAC,EAAKH,EAALG,MACAC,EAAQJ,EAARI,SACAC,EAASL,EAATK,UACAC,EAASN,EAATM,UAEMC,EAAQN,EAAOM,QAEfC,EAAQC,mBAAQ,WACpB,IAAMC,EAASH,EAAM,GAAKA,EAAM,GAC1BI,EAAsBC,KAAKC,MAAMH,EAASR,GAEhD,OAAOD,EAAOO,MAAMG,GAAqBG,KAAI,SAAAC,GAAK,MAAK,CACrDA,QACAC,QAASf,EAAOc,GACjB,GACH,GAAG,CAACd,IAEJ,OACEgB,cAAAC,WAAA,CAAAC,SAEGX,EAAMM,KAAI,SAAAM,GAAA,IAAGL,EAAKK,EAALL,MAAOC,EAAOI,EAAPJ,QAAO,OAC1BK,eAAA,KAEEC,UAAS,gBAAAC,OAAkBP,EAAO,KAClCQ,eAAgB,aAAaL,SAAA,CAE7BF,cAAA,QACEQ,IAhCQ,GAiCRC,GAAIvB,EAjCI,GAkCRwB,OAAQrB,EACRsB,YAAa,KAEfX,cAAA,QAEEY,MAAO,CACLzB,SAAS,GAADmB,OAAKnB,EAAQ,MACrB0B,WAAY,SACZR,UAAW,oBACXS,KAAM1B,GACNc,SAEDJ,GARIA,KAXFA,EAqBH,KAIZ,ECGeiB,EApDI,SAAHhC,GAOT,IANLiC,EAAMjC,EAANiC,OACA/B,EAAaF,EAAbE,cACAQ,EAAMV,EAANU,OACAN,EAAQJ,EAARI,SACAC,EAASL,EAATK,UACAC,EAASN,EAATM,UAEMC,EAAQ0B,EAAO1B,QAEfC,EAAQC,mBAAQ,WACpB,IAAMN,EAAQI,EAAM,GAAKA,EAAM,GACzBI,EAAsBC,KAAKC,MAAMV,EAAQD,GAE/C,OAAO+B,EAAOzB,MAAMG,GAAqBG,KAAI,SAAAC,GAAK,MAAK,CACrDA,QACAmB,QAASD,EAAOlB,GACjB,GACH,GAAG,CAACkB,IAEJ,OACEhB,cAAAC,WAAA,CAAAC,SAEGX,EAAMM,KAAI,SAAAM,GAAA,IAAGL,EAAKK,EAALL,MAAOmB,EAAOd,EAAPc,QAAO,OAC1Bb,eAAA,KAEEC,UAAS,aAAAC,OAAeW,EAAO,QAC/BV,eAAgB,aAAaL,SAAA,CAE7BF,cAAA,QACEkB,GAhCQ,GAiCRC,IAAK1B,EAjCG,GAkCRiB,OAAQrB,EACRsB,YAAa,KAEfX,cAAA,QAEEY,MAAO,CACLzB,SAAS,GAADmB,OAAKnB,EAAQ,MACrB0B,WAAY,SACZR,UAAW,mBACXS,KAAM1B,GACNc,SAEDJ,GARIA,KAXFA,EAqBH,KAIZ,E,QC/CMsB,EAAc,SAAHrC,GAcV,IAbLG,EAAKH,EAALG,MACAO,EAAMV,EAANU,OACA4B,EAAItC,EAAJsC,KACAC,EAASvC,EAATuC,UACAC,EAAWxC,EAAXwC,YACAC,EAAYzC,EAAZyC,aACAC,EAAU1C,EAAV0C,WACAC,EAAS3C,EAAT2C,UACAC,EAAM5C,EAAN4C,OACAC,EAAW7C,EAAX6C,YACAzC,EAAQJ,EAARI,SACAC,EAASL,EAATK,UACAC,EAASN,EAATM,UAEMwC,EAAc3C,EAAQqC,EAAcE,EACpCK,EAAerC,EAAS6B,EAAYE,EAE1CO,EAAwCC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAA/CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAG9BjD,EAASqD,MAEZC,OAAO,CAAC3C,KAAK4C,IAAGC,MAAR7C,KAAI8C,YAAQpB,EAAKxB,KAAI,SAAA6C,GAAC,OAAIA,EAAEC,CAAC,MAAIhD,KAAKiD,IAAGJ,MAAR7C,KAAI8C,YAAQpB,EAAKxB,KAAI,SAAA6C,GAAC,OAAIA,EAAEC,CAAC,QACtErD,MAAM,CAACwC,EAAc,IAClBd,EAASqB,MAEZC,OAAO,CAAC,EAAG3C,KAAKiD,IAAGJ,MAAR7C,KAAI8C,YAAQpB,EAAKxB,KAAI,SAAA6C,GAAC,OAAIA,EAAEG,CAAC,QACxCvD,MAAM,CAAC,EAAGuC,IACPiB,EAAYzB,EAAKxB,KAAI,SAAAkD,GAAC,OAAIC,OAAOD,EAAEE,MAAM,IACzCC,EAAab,MAAkBC,OAAOQ,GAAWxD,MAAMoC,GAGvDyB,EAAY9B,EAAKxB,KAAI,SAACkD,EAAGK,GAC7B,IAAMC,EACJlB,GAAgBY,EAAEE,QAAUd,EACxBmB,IAAOC,kBAAoB,IAAMD,IAAOE,OACxCF,IAAOC,kBAEb,OACEvD,cAAA,UAEEyD,EAAG7B,EACH8B,GAAI1C,EAAO+B,EAAEF,GACbc,GAAI3E,EAAO+D,EAAEJ,GACbU,UAAWA,EACX3C,OAAQwC,EAAWH,EAAEE,OACrBnC,KAAMoC,EAAWH,EAAEE,OACnBW,YAAa,kBAAMxB,EAAgBW,EAAEE,MAAM,EAC3CY,aAAc,kBAAMzB,EAAgB,KAAK,GARpCgB,EAWX,IAEA,OACEpD,cAAA,OAAAE,SACEF,cAAA,OAAKd,MAAOA,EAAOO,OAAQA,EAAOS,SAChCE,eAAA,KACElB,MAAO2C,EACPpC,OAAQqC,EACRzB,UAAS,aAAAC,OAAe,CAACmB,EAAYH,GAAWwC,KAAK,KAAI,KAAI5D,SAAA,CAE7DF,cAAClB,EAAQ,CACPE,OAAQA,EACRC,cAAe0C,EACfzC,MAAO2C,EACP1C,SAAUA,EACVC,UAAWA,EACXC,UAAWA,IAEbW,cAAA,KAAGK,UAAS,gBAAAC,OAAkBwB,EAAY,KAAI5B,SAC5CF,cAACe,EAAU,CACTC,OAAQA,EACR/B,cAAe0C,EACflC,OAAQqC,EACR3C,SAAUA,EACVC,UAAWA,EACXC,UAAWA,MAGd8D,QAKX,EAkBA/B,EAAY2C,aAAeC,IAEZ5C,W","file":"static/js/6.ea6750f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scatterplotCircle\":\"scatterplot_scatterplotCircle__1qlsx\",\"dimmed\":\"scatterplot_dimmed__2KlUQ\"};","import React, { useMemo } from \"react\";\n\nconst TICK_LENGTH = 10;\n\nconst AxisLeft = ({\n  yScale,\n  pixelsPerTick,\n  width,\n  fontSize,\n  fontColor,\n  lineColor,\n}) => {\n  const range = yScale.range();\n\n  const ticks = useMemo(() => {\n    const height = range[0] - range[1];\n    const numberOfTicksTarget = Math.floor(height / pixelsPerTick);\n\n    return yScale.ticks(numberOfTicksTarget).map(value => ({\n      value,\n      yOffset: yScale(value),\n    }));\n  }, [yScale]);\n\n  return (\n    <>\n      {/* Ticks and labels */}\n      {ticks.map(({ value, yOffset }) => (\n        <g\n          key={value}\n          transform={`translate(0, ${yOffset})`}\n          shapeRendering={\"crispEdges\"}\n        >\n          <line\n            x1={-TICK_LENGTH}\n            x2={width + TICK_LENGTH}\n            stroke={lineColor}\n            strokeWidth={0.5}\n          />\n          <text\n            key={value}\n            style={{\n              fontSize: `${fontSize}px`,\n              textAnchor: \"middle\",\n              transform: \"translateX(-20px)\",\n              fill: fontColor,\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n\nexport default AxisLeft;\n","import React, { useMemo } from \"react\";\n\n// tick length\nconst TICK_LENGTH = 10;\n\nconst AxisBottom = ({\n  xScale,\n  pixelsPerTick,\n  height,\n  fontSize,\n  fontColor,\n  lineColor,\n}) => {\n  const range = xScale.range();\n\n  const ticks = useMemo(() => {\n    const width = range[1] - range[0];\n    const numberOfTicksTarget = Math.floor(width / pixelsPerTick);\n\n    return xScale.ticks(numberOfTicksTarget).map(value => ({\n      value,\n      xOffset: xScale(value),\n    }));\n  }, [xScale]);\n\n  return (\n    <>\n      {/* Ticks and labels */}\n      {ticks.map(({ value, xOffset }) => (\n        <g\n          key={value}\n          transform={`translate(${xOffset}, 0)`}\n          shapeRendering={\"crispEdges\"}\n        >\n          <line\n            y1={TICK_LENGTH}\n            y2={-height - TICK_LENGTH}\n            stroke={lineColor}\n            strokeWidth={0.5}\n          />\n          <text\n            key={value}\n            style={{\n              fontSize: `${fontSize}px`,\n              textAnchor: \"middle\",\n              transform: \"translateY(20px)\",\n              fill: fontColor,\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n\nexport default AxisBottom;\n","import * as d3 from \"d3\";\nimport styles from \"./scatterplot.module.css\";\nimport AxisLeft from \"./AxisLeft\";\nimport AxisBottom from \"./AxisBottom\";\nimport React, { useState } from \"react\";\nimport { scatterPlotChartProps } from \"../propsData\";\nimport PropTypes from \"prop-types\";\n\nconst Scatterplot = ({\n  width,\n  height,\n  data,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  fillColor,\n  yTicks,\n  innerRadius,\n  fontSize,\n  fontColor,\n  lineColor,\n}) => {\n  const boundsWidth = width - marginRight - marginLeft;\n  const boundsHeight = height - marginTop - marginBottom;\n\n  const [hoveredGroup, setHoveredGroup] = useState(null);\n\n  // Scales\n  const yScale = d3\n    .scaleLinear()\n    .domain([Math.min(...data.map(v => v.y)), Math.max(...data.map(v => v.y))])\n    .range([boundsHeight, 0]);\n  const xScale = d3\n    .scaleLinear()\n    .domain([0, Math.max(...data.map(v => v.x))])\n    .range([0, boundsWidth]);\n  const allGroups = data.map(d => String(d.group));\n  const colorScale = d3.scaleOrdinal().domain(allGroups).range(fillColor);\n\n  // Build the shapes\n  const allShapes = data.map((d, i) => {\n    const className =\n      hoveredGroup && d.group !== hoveredGroup\n        ? styles.scatterplotCircle + \" \" + styles.dimmed\n        : styles.scatterplotCircle;\n\n    return (\n      <circle\n        key={i}\n        r={innerRadius}\n        cx={xScale(d.x)}\n        cy={yScale(d.y)}\n        className={className}\n        stroke={colorScale(d.group)}\n        fill={colorScale(d.group)}\n        onMouseOver={() => setHoveredGroup(d.group)}\n        onMouseLeave={() => setHoveredGroup(null)}\n      />\n    );\n  });\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        <g\n          width={boundsWidth}\n          height={boundsHeight}\n          transform={`translate(${[marginLeft, marginTop].join(\",\")})`}\n        >\n          <AxisLeft\n            yScale={yScale}\n            pixelsPerTick={yTicks}\n            width={boundsWidth}\n            fontSize={fontSize}\n            fontColor={fontColor}\n            lineColor={lineColor}\n          />\n          <g transform={`translate(0, ${boundsHeight})`}>\n            <AxisBottom\n              xScale={xScale}\n              pixelsPerTick={yTicks}\n              height={boundsHeight}\n              fontSize={fontSize}\n              fontColor={fontColor}\n              lineColor={lineColor}\n            />\n          </g>\n          {allShapes}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nScatterplot.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  data: PropTypes.array,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  yTicks: PropTypes.number,\n  innerRadius: PropTypes.number,\n  fontSize: PropTypes.number,\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n};\n\nScatterplot.defaultProps = scatterPlotChartProps;\n\nexport default Scatterplot;\n"],"sourceRoot":""}