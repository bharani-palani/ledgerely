{"version":3,"sources":["components/shared/D3/DivergingBarChart.js"],"names":["DivergingBarChart","props","svgRef","useRef","width","barHeight","marginTop","marginRight","marginBottom","marginLeft","metric","style","fillColor","fontSize","data","showAnimation","onClick","showTooltip","tooltipPrefix","tooltipSuffix","showXaxis","showYaxis","useEffect","massageData","d3","d","after","before","map","_objectSpread","value","height","Math","ceil","length","x","domain","rangeRound","y","label","padding","format","tickFormat","svg","current","append","selectAll","join","on","i","tooltip","html","concat","pageX","pageY","attr","min","transition","delay","duration","abs","bandwidth","sign","text","call","ticks","g","clone","select","remove","tickSize","tickPadding","filter","_jsx","ref","defaultProps","divergingBarChartProps"],"mappings":"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","file":"static/js/6.7c1b68f2.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { tooltip } from \"./constants\";\nimport { divergingBarChartProps } from \"./propsData\";\nimport PropTypes from \"prop-types\";\n\nconst DivergingBarChart = props => {\n  const svgRef = useRef(null);\n  const {\n    width,\n    barHeight,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft,\n    metric,\n    style,\n    fillColor,\n    fontSize,\n    data,\n    showAnimation,\n    onClick,\n    showTooltip,\n    tooltipPrefix,\n    tooltipSuffix,\n    showXaxis,\n    showYaxis,\n  } = props;\n\n  useEffect(() => {\n    const massageData = d3\n      .sort(data, d => d.after - d.before)\n      .map(d => ({\n        ...d,\n        value:\n          metric === \"absolute\"\n            ? d.after - d.before\n            : (d.after - d.before) / d.before,\n      }));\n\n    const height =\n      Math.ceil((massageData.length + 0.1) * barHeight) +\n      marginTop +\n      marginBottom;\n\n    // Create the positional scales.\n    const x = d3\n      .scaleLinear()\n      .domain(d3.extent(massageData, d => d.value))\n      .rangeRound([marginLeft, width - marginRight]);\n\n    const y = d3\n      .scaleBand()\n      .domain(massageData.map(d => d.label))\n      .rangeRound([marginTop, height - marginBottom])\n      .padding(0.1);\n\n    // Create the format function.\n    const format = d3.format(metric === \"absolute\" ? \"+,d\" : \"+.1%\");\n    const tickFormat =\n      metric === \"absolute\" ? d3.formatPrefix(\"+.1\", 1e6) : d3.format(\"+.0%\");\n\n    // Create the SVG container.\n    const svg = d3.select(svgRef.current);\n    // .attr(\"viewBox\", [0, 0, width, height]);\n\n    // Add a rect for each label.\n    svg\n      .append(\"g\")\n      .selectAll()\n      .data(massageData)\n      .join(\"rect\")\n      .on(\"click\", (d, i) => {\n        onClick(d, i);\n      })\n      .on(\"mousemove\", (d, i) => {\n        if (showTooltip) {\n          tooltip.style(\"padding\", \"5px\");\n          tooltip.style(\"opacity\", 0.9);\n          tooltip\n            .html(`${tooltipPrefix} ${i.before} â†’ ${i.after} ${tooltipSuffix}`)\n            .style(\"left\", d.pageX + 5 + \"px\")\n            .style(\"top\", d.pageY - 30 + \"px\");\n        }\n      })\n      .on(\"mouseout\", d => {\n        tooltip.style(\"padding\", 0);\n        tooltip.style(\"opacity\", 0);\n      })\n      .attr(\"fill\", d => [d.value > 0 ? fillColor : fillColor])\n      .attr(\"x\", d => x(Math.min(d.value, 0)))\n      .transition()\n      .delay(200)\n      .duration((d, i) => (showAnimation ? i * 100 : i))\n      .attr(\"y\", d => y(d.label))\n      .attr(\"width\", d => Math.abs(x(d.value) - x(0)))\n      .attr(\"height\", y.bandwidth());\n\n    // Add a text label for each label.\n    if (showXaxis) {\n      svg\n        .append(\"g\")\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", fontSize)\n        .attr(\"fill\", \"currentColor\")\n        .selectAll()\n        .data(massageData)\n        .join(\"text\")\n        .attr(\"text-anchor\", d => (d.value < 0 ? \"end\" : \"start\"))\n        .attr(\"x\", d => x(d.value) + Math.sign(d.value - 0) * 4)\n        .attr(\"y\", d => y(d.label) + y.bandwidth() / 2)\n        .attr(\"dy\", \"0.35em\")\n        .text(d => format(d.value));\n    }\n\n    // Add the axes and grid lines.\n    if (showYaxis) {\n      svg\n        .append(\"g\")\n        .attr(\"transform\", `translate(0,${marginTop})`)\n        .call(\n          d3\n            .axisTop(x)\n            .ticks(width / 80)\n            .tickFormat(tickFormat),\n        )\n        .call(g =>\n          g\n            .selectAll(\".tick line\")\n            .clone()\n            .attr(\"y2\", height - marginTop - marginBottom)\n            .attr(\"stroke-opacity\", 0.1),\n        )\n        .call(g => g.selectAll(\".tick text\").attr(\"font-size\", fontSize))\n        .call(g => g.select(\".domain\").remove());\n    }\n\n    if (showXaxis) {\n      svg\n        .append(\"g\")\n        .attr(\"transform\", `translate(${x(0)},0)`)\n        .call(d3.axisLeft(y).tickSize(0).tickPadding(6))\n        .call(g =>\n          g\n            .selectAll(\".tick text\")\n            .attr(\"font-size\", fontSize)\n            .filter((d, i) => massageData[i].value < 0)\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"x\", 6),\n        );\n    }\n  }, []);\n\n  return <svg style={style} ref={svgRef} />;\n};\n\nDivergingBarChart.propTypes = {\n  width: PropTypes.number,\n  barHeight: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  metric: PropTypes.string,\n  style: PropTypes.object,\n  fillColor: PropTypes.string,\n  fontSize: PropTypes.number,\n  data: PropTypes.array,\n  showTooltip: PropTypes.bool,\n  tooltipPrefix: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  showAnimation: PropTypes.bool,\n  showXaxis: PropTypes.bool,\n  showYaxis: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nDivergingBarChart.defaultProps = divergingBarChartProps;\n\nexport default DivergingBarChart;\n"],"sourceRoot":""}