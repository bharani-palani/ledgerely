{"version":3,"file":"static/js/9430.a3b605db.chunk.js","mappings":"uJAGA,MAAMA,EAAWA,KACf,MAAM,OAAEC,IAAWC,EAAAA,EAAAA,MACnB,OAAOC,EAAAA,EAAAA,UAAQ,IAAM,IAAIC,gBAAgBH,IAAS,CAACA,GAAQ,C,4NCQ7D,MA0cA,GAAeI,EAAAA,EAAAA,KA1cKC,IAClB,MAAM,KAAEC,GAASD,EACXE,GAAiBC,EAAAA,EAAAA,YAAWC,KAC5B,UAAEC,EAAS,YAAEC,EAAW,oBAAEC,EAAmB,kBAAEC,GACnDN,EACIO,GAAgBN,EAAAA,EAAAA,YAAWO,EAAAA,GAC3BC,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,GACzBC,GAAMC,EAAAA,EAAAA,QAAO,OACZC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,KAC5CG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,IAC5BK,EAASC,IAAcN,EAAAA,EAAAA,UAAS,CAAC,GAElCO,EAAkBC,iBACtBC,SAASC,iBACTC,iBAAiB,eACbC,EAAkBJ,iBACtBC,SAASC,iBACTC,iBAAiB,aAEbE,EAAe,qBAErBC,EAAAA,EAAAA,YAAU,KACRV,EAASR,EAAImB,QAAQC,YAAY,GAChC,KAEHF,EAAAA,EAAAA,YAAU,KAAO,IAADG,EAAAC,EACd,MAAMC,EAAcC,IAAA,IAAC,SAAEC,EAAQ,MAAEC,EAAK,MAAEC,GAAOH,EAAA,MAAM,CACnDI,MAAOD,EACPE,MAAOC,EAAAA,EAAQC,QAAQN,EAAU,IACjCO,MAAOC,OAAOP,GACdQ,QAASD,OAAOP,IAAU,EAC3B,EAEKS,EAAQ3C,EAAUiC,SAASW,KAAIC,IAAO,IAADC,EAAAC,EAAAC,EAAAC,EAwBzC,MAvBY,CACVb,MAAOS,EAAGT,MACVc,OACI,OAAFL,QAAE,IAAFA,GAAQ,QAANC,EAAFD,EAAInC,YAAI,IAAAoC,GAAS,QAATC,EAARD,EAAUK,eAAO,IAAAJ,OAAf,EAAFA,EAAmBK,QAAS,EACxBP,EAAGnC,KAAKyC,QAAQP,KAAIS,GAClBtB,EAAY,CACVE,SAAUoB,EAAGpB,SACbC,MAAOmB,EAAGnB,MACVC,MAAOU,EAAGT,UAGd,CAACL,EAAY,CAAEE,SAAU,UAAWC,MAAO,EAAGC,MAAO,QAC3DmB,YACI,OAAFT,QAAE,IAAFA,GAAQ,QAANG,EAAFH,EAAInC,YAAI,IAAAsC,GAAQ,QAARC,EAARD,EAAUO,cAAM,IAAAN,OAAd,EAAFA,EAAkBG,QAAS,EACvBP,EAAGnC,KAAK6C,OAAOX,KAAIS,GACjBtB,EAAY,CACVE,SAAUoB,EAAGpB,SACbC,MAAOmB,EAAGnB,MACVC,MAAOU,EAAGT,UAGd,CAACL,EAAY,CAAEE,SAAU,UAAWC,MAAO,EAAGC,MAAO,QAEnD,IAEZxB,EAAQgC,GAER,MAAMa,EAAS,CACb,CACEC,MAAOtC,EACPuC,OAAQ1D,EAAUuD,OAAOX,KACvBe,IAAA,IAAC,MACCvB,EAAK,YACLwB,EAAW,WACXC,EAAU,SACVC,EAAQ,YACRC,EAAW,aACXC,GACDL,EAAA,MAAM,CACLvB,QACA6B,EAAGJ,EACHK,EAAGJ,EACHK,EAAGJ,EACHK,YAAaJ,EACbJ,YAAa,IAAIS,KAAKT,GACvB,KAGL,CACEH,MAAOjC,EACPkC,OAAQ1D,EAAUuD,OAAOX,KACvB0B,IAAA,IAAC,MAAElC,EAAK,WAAEyB,EAAU,SAAEC,EAAQ,aAAEE,GAAcM,EAAA,MAAM,CAClDlC,QACA6B,EAAGJ,EACHK,EAAGJ,EACHK,EAAGH,EACJ,MAKPlD,EAAiB,IACjB,MAAMyD,EAAOf,EAAO,GAAGE,OAAOc,QAAOC,GAAa,IAARA,EAAEN,IACtCO,EAAQ,IAAIL,KAA0B,QAAtBxC,EAAC0C,EAAKA,EAAKnB,OAAS,UAAE,IAAAvB,OAAA,EAArBA,EAAuBoC,GACxCU,EAAM,IAAIN,KAAY,QAARvC,EAACyC,EAAK,UAAE,IAAAzC,OAAA,EAAPA,EAASoC,GACxBU,EAAaC,EAAcH,EAAOC,GAExCG,YAAW,KAAO,IAADC,EAAAC,EACflE,EAAiB0C,GACjB,MAAMtB,EAAQsB,EAAO,GAAGE,OAAOuB,QAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAEf,aAAa,GAC7DgB,EAAS9C,EAAAA,EAAQ+C,4BACrBpF,EAAY,GAAGqF,YACfrF,EAAY,GAAGsF,cACfrD,GAAS,GAAQ0C,IAAe,EAChC,GAEIY,EAAQlD,EAAAA,EAAQ+C,4BACpBpF,EAAY,GAAGqF,YACfrF,EAAY,GAAGsF,cACfrD,GAAS,EAAI0C,IAAe,EAC5B,GAGIa,EAASnD,EAAAA,EAAQ+C,4BACrBpF,EAAY,GAAGqF,YACfrF,EAAY,GAAGsF,cACfrD,EAAQ0C,GAAc,EACtB,GAGF1D,EAAW,CAAEkE,SAAQI,QAAOC,WACb,QAAfV,EAAIvE,EAAImB,eAAO,IAAAoD,GAAe,QAAfC,EAAXD,EAAaW,WAAW,UAAE,IAAAV,GAA1BA,EAA4BU,WAAW,KACzClF,EAAImB,QAAQ+D,WAAW,GAAGA,WAAW,GAAGC,MAAMC,OAASA,IACzD,GACC,EAAE,GACJ,CAAC5F,EAAWI,KAEfsB,EAAAA,EAAAA,YAAU,KACR,GAAIb,EAAcuC,OAAS,GAAK1C,EAAK0C,OAAS,EAAG,CAAC,IAADyC,EAAAC,EAAAC,EAC/C,MAAMC,EAAWC,IACf,MAAMzD,EAAQyD,EAAEC,OAAOC,GACvBjG,EAAoBsC,EAAM,EAGtB4D,EAA0B,QAAdP,EAAGrF,EAAImB,eAAO,IAAAkE,GACS,QADTC,EAAXD,EACjBQ,cAAc,IAAI5E,gBAAmB,IAAAqE,OADT,EAAXA,EAEjBQ,uBAAuB,QAAQ,GAAGC,SAEhCC,EACJJ,IACwB,QADZL,EACZU,MAAMC,KAAKN,UAAa,IAAAL,OAAA,EAAxBA,EACIvB,QAAOmC,GAAKA,EAAEC,UAAUC,SAAS,UAClCC,WACCpD,EAAS,IAAI7C,EAAc,GAAG6C,QACpC,IAAK,IAAIqD,EAAI,EAAGA,EAAIP,EAAMpD,OAAQ2D,IAAK,CAAC,IAADC,EACrCR,EAAMO,GAAGR,SAAS,GAAGK,UAAUK,OAAO,WACtCT,EAAMO,GAAGR,SAAS,GAAGW,aAAa,KAAe,QAAXF,EAAEtD,EAAOqD,UAAE,IAAAC,OAAA,EAATA,EAAW5E,OACnDoE,EAAMO,GAAGR,SAAS,GAAGY,iBAAiB,QAASnB,EACjD,CAEA,GAAI7F,EAAmB,CAAC,IAADiH,EACrB,MAAMC,EACJb,IACiB,QADZY,EACLX,MAAMC,KAAKF,UAAM,IAAAY,OAAA,EAAjBA,EAAmB5C,QACjBmC,GAAKA,EAAEJ,SAAS,GAAGJ,KAAOhG,IAC1B,IAEAkH,GAAGA,EAAEC,qBAAqB,QAAQ,GAAGV,UAAUW,IAAI,UACzD,CAEA,MAAO,KACL,IAAK,IAAIR,EAAI,EAAGA,EAAIP,EAAMpD,OAAQ2D,IAChCP,EAAMO,GAAGR,SAAS,GAAGiB,oBAAoB,QAASxB,EACpD,CAEJ,IACC,CAAC7F,EAAmBU,EAAeH,IAEtC,MAAMmE,EAAgBA,CAACH,EAAOC,KAC5B,MAAM8C,EAAOC,KAAKC,OAAOhD,EAAMD,GAAK,OAEpC,OADmBgD,KAAKE,KAAKH,EAAO,IACf,CAAC,EAQlBI,EAASvF,EAAAA,EAAQwF,iBA+BjBC,EAAYA,CAACrH,EAAMsH,KACvB,IAAI9F,EAAQ+F,SAASP,KAAKM,MAAStH,IAASgH,KAAKM,MAAStH,GAAQ,EAOlE,OANAwB,EAAQI,EAAAA,EAAQ+C,4BACdpF,EAAY,GAAGqF,YACfrF,EAAY,GAAGsF,cACfrD,EACA,GAEKA,CAAK,EAGRgG,EAASC,IAAA,IAAC,OAAEC,EAAM,MAAE5F,GAAO2F,EAAA,OAC/BE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8B/B,SAAA,CAC1C3G,EAAK2I,cAAc,CAAEpC,GAAIiC,EAAQI,eAAgBJ,KAClDK,EAAAA,EAAAA,KAAA,QACEC,MAAOlG,EACP8F,UAAU,uGAAsG/B,SAE/G/D,MAEC,EAER,OACE6F,EAAAA,EAAAA,MAAAM,EAAAA,SAAA,CAAApC,SAAA,EACEkC,EAAAA,EAAAA,KAAA,OAAKjI,IAAKA,EAAI+F,SACX1F,EAAcuC,OAAS,GAAK1C,EAAK0C,OAAS,IACzCiF,EAAAA,EAAAA,MAAAM,EAAAA,SAAA,CAAApC,SAAA,EACEkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,wBAAuB/B,UACpCkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,gBACHqC,eAAe,qBAGnBH,EAAAA,EAAAA,MAACQ,EAAAA,EAAG,CAACP,UAAU,OAAM/B,SAAA,EACnBkC,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGX,UAAU,mBAAkB/B,UACpDkC,EAAAA,EAAAA,KAACP,EAAM,CACLE,OAAO,QACP5F,MAhDO9B,KACrB,IAAIwB,EAAQxB,EAAKuE,QAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAEf,aAAa,GAOrD,OANAlC,EAAQI,EAAAA,EAAQ+C,4BACdpF,EAAY,GAAGqF,YACfrF,EAAY,GAAGsF,cACfrD,EACA,GAEKA,CAAK,EAwCSgH,CAAerI,EAAc,GAAG6C,aAG3C+E,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGX,UAAU,mBAAkB/B,UACpDkC,EAAAA,EAAAA,KAACP,EAAM,CACLE,OAAO,UACP5F,MAAOuF,EACLlH,EAAc,GAAG6C,OACdc,QAAOC,GAAuB,IAAlBA,EAAEL,cACdxB,KAAIuG,GAAKA,EAAE/E,cACd,YAINqE,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGX,UAAU,mBAAkB/B,UACpDkC,EAAAA,EAAAA,KAACP,EAAM,CACLE,OAAO,SACP5F,MAAOuF,EACLlH,EAAc,GAAG6C,OACdc,QAAOC,GAAuB,IAAlBA,EAAEL,cACdxB,KAAIuG,GAAKA,EAAE/E,cACd,YAINqE,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGX,UAAU,mBAAkB/B,UACpDkC,EAAAA,EAAAA,KAACP,EAAM,CAACE,OAAO,SAAS5F,MAAOvB,EAAQwE,YAEzCgD,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGX,UAAU,mBAAkB/B,UACpDkC,EAAAA,EAAAA,KAACP,EAAM,CAACE,OAAO,QAAQ5F,MAAOvB,EAAQuE,WAExCiD,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGX,UAAU,mBAAkB/B,UACpDkC,EAAAA,EAAAA,KAACP,EAAM,CAACE,OAAO,SAAS5F,MAAOvB,EAAQmE,eAG3CiD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iCAAgC/B,SAAA,EAC7CkC,EAAAA,EAAAA,KAAA,OAAAlC,UACE8B,EAAAA,EAAAA,MAAA,QAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAAA,KACE9C,MAAO,CAAElC,MAAOtC,GAChBmH,UAAU,oBACVI,MAAO9I,EAAK2I,cAAc,CACxBpC,GAAI,SACJqC,eAAgB,aAGnB5I,EAAK2I,cAAc,CAClBpC,GAAI,SACJqC,eAAgB,iBAItBH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsB/B,SAAA,EACnCkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,cAAa/B,SAAC,MAC5B3G,EAAK2I,cAAc,CAClBpC,GAAI,wBACJqC,eAAgB,8BAGpBC,EAAAA,EAAAA,KAAA,OAAAlC,UACE8B,EAAAA,EAAAA,MAAA,QAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAAA,KACE9C,MAAO,CAAElC,MAAOjC,GAChB8G,UAAU,oBACVI,MAAO9I,EAAK2I,cAAc,CACxBpC,GAAI,SACJqC,eAAgB,aAGnB5I,EAAK2I,cAAc,CAClBpC,GAAI,SACJqC,eAAgB,oBAKxBC,EAAAA,EAAAA,KAACW,IAAS,CACR1I,KAAMG,EACNsF,GAAI1E,EACJ4H,QAAS,CACPC,IAAK,GACLC,MAAOxI,EAAQ,IAAM,GAAK,GAC1ByI,OAAQ,GACRC,KAAM,KAER1I,MAAOA,EACP2I,QAAQ,EACR9D,OAvUG,IAwUH+D,OAAQ/J,EAAK2I,cAAc,CACzBpC,GAAI,QACJqC,eAAgB,UAElBoB,OAAQ,GAAGhK,EAAK2I,cAAc,CAC5BpC,GAAI,SACJqC,eAAgB,gBACV5I,EAAK2I,cAAc,CACzBpC,GAAI,SACJqC,eAAgB,aAElBqB,aAAcC,GACZxH,EAAAA,EAAQ+C,4BACNpF,EAAY,GAAGqF,YACfrF,EAAY,GAAGsF,cACfuE,EAAE3F,EACF,GAGJ4F,aAAc,qBACdvD,MAAO9F,EAAK0C,OACZ4G,SAAUA,CAACC,EAAGlD,IA/KHkD,KACrB,IAAIC,EAAO,GACX,GAAInJ,EAAQ,IAAK,CACfmJ,EAAOC,IAAOF,GAAGG,OAAO,OACxB,MAAMC,EAAQH,EACXI,eAAe,UAAW,CAAElI,MAAO,UACnCmI,cACGC,EAAOP,EAAEQ,cACfP,EAAO,GAAGtK,EAAK2I,cAAc,CAC3BpC,GAAIkE,EACJ7B,eAAgB6B,OACZG,GACR,MACEN,EAAOC,IAAOF,GAAGG,OAAO,KAE1B,OAAOF,CAAI,EAiKQQ,CAAeT,GAExBU,aAAcA,CAAC1E,EAAG2E,KAChB1K,EAAoB0K,EAAExI,MAAM,UAMtCqG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,WAAU/B,SACtB7F,EAAK0C,OAAS,IACbqF,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sCAAqC/B,SACjD7F,EAAKkC,KAAI,CAACkH,EAAG/C,KACZsB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAc/B,SAAA,EAC3BkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,0BAAyB/B,UACtCkC,EAAAA,EAAAA,KAAA,UACEH,UAAW,uBACTuC,OAAO1K,KAAuB0K,OAAOf,EAAE1H,OACnC,SACA,IAEN0I,QAASA,KACP5K,EAAoB4J,EAAE1H,MAAM,EAC5BmE,SAED,GAAG3G,EAAK2I,cAAc,CACrBpC,GAAI2D,EAAE1H,MAAM2I,MAAM,KAAK,GAAGR,cAC1B/B,eAAgBsB,EAAE1H,MAAM2I,MAAM,KAAK,GAAGR,mBAClCT,EAAE1H,MAAM2I,MAAM,KAAK,UAG7B1C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsB/B,SAAA,CAClCQ,EAAI,IACH0B,EAAAA,EAAAA,KAAA,OAAKH,UAAU,yCAAwC/B,UACrDkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,UAAUqC,eAAe,eAGlDC,EAAAA,EAAAA,KAACuC,EAAAA,EAAU,CACTC,YAAa,IACoB,SAA/B3K,EAAY4K,SAASC,MAAmB,OAAS,QAEnDC,YAAa,GACbC,YAAa,GACbC,aAAa,EACbzD,OAAQA,EACRjC,OAAQ,IACR7E,MAAO,IACPwK,QAAQ,EACR7K,KAAMoJ,EAAE5G,MACRsI,aAAcA,CAACC,EAAQvJ,IACrB,GAAGI,EAAAA,EAAQ+C,4BACTpF,EAAY,GAAGqF,YACfrF,EAAY,GAAGsF,cACfkG,EACA,WAKRpD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsB/B,SAAA,CAClCQ,EAAI,IACH0B,EAAAA,EAAAA,KAAA,OAAKH,UAAU,yCAAwC/B,UACrDkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,SAASqC,eAAe,cAGjDC,EAAAA,EAAAA,KAACuC,EAAAA,EAAU,CACTC,YAAa,IACoB,SAA/B3K,EAAY4K,SAASC,MAAmB,OAAS,QAEnDC,YAAa,GACbC,YAAa,GACbC,aAAa,EACbzD,OAAQA,EACRjC,OAAQ,IACR7E,MAAO,IACPwK,QAAQ,EACR7K,KAAMoJ,EAAExG,WACRkI,aAAcA,CAACC,EAAQvJ,IACrB,GAAGI,EAAAA,EAAQ+C,4BACTpF,EAAY,GAAGqF,YACfrF,EAAY,GAAGsF,cACfkG,EACA,YArQR1E,IAAK,SAASA,IAgMmB2E,CAAM3E,YA+EhD,I,+BCzcP,MAuWA,GAAerH,EAAAA,EAAAA,KAvWSC,IAAU,IAADgM,EAC/B,MAAM9L,GAAiBC,EAAAA,EAAAA,YAAWC,IAC5BK,GAAgBN,EAAAA,EAAAA,YAAWO,EAAAA,IAC3B,KAAEK,EAAI,KAAEd,GAASD,GACjB,oBACJiM,EAAmB,UACnBC,EAAS,aACTC,EAAY,sBACZC,GACElM,GACGkB,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,IAE5BZ,EAAWgM,IAAgBpL,EAAAA,EAAAA,UAAS,KACpCqL,EAAaC,IAAkBtL,EAAAA,EAAAA,WAAS,GACzCJ,GAAMC,EAAAA,EAAAA,QAAO,MACb0L,EAAoB/K,iBACxBC,SAASC,iBACTC,iBAAiB,eACb6K,EAAqBhL,iBACzBC,SAASC,iBACTC,iBAAiB,gBACb8K,EAAgBjL,iBACpBC,SAASC,iBACTC,iBAAiB,gBACb+K,EAAmBlL,iBACvBC,SAASC,iBACTC,iBAAiB,iBACZgL,EAAYC,IAAiB5L,EAAAA,EAAAA,UAAS,CAAC,GACxCa,EAAe,qBAErBC,EAAAA,EAAAA,YAAU,KACR,MAAO+K,EAAQC,GAAQd,EAAoBb,MAAM,KAC3C3I,EAAQE,EAAAA,EAAQqK,cAAcF,GAC9BG,EAAanK,OAAOoJ,EAAUgB,wBAC9BC,EAAWrK,OAAOoJ,EAAUkB,sBAE5BC,EAAQ,IAAI3I,KAChB,GAAG5B,OAAOiK,MAASjK,OAAOL,MAAU0K,IAAWG,QAAQ,KAAM,MAEzDC,EAAW,GAAGF,EAAMvC,iBAAiBnI,EAAAA,EAAQ6K,aACjDH,EAAMI,WAAa,MAChB9K,EAAAA,EAAQ6K,aAAaH,EAAMK,aAGhC,IAAIC,EAAQN,EAAMO,QAAQP,EAAMQ,UADb,QAEnBF,EAAQ,IAAIjJ,KAAKiJ,GACjBA,EAAQ,IAAIjJ,KAAKiJ,EAAMG,QAAQb,IAC/B,MAAMc,EAAW,GAAGJ,EAAM7C,iBAAiBnI,EAAAA,EAAQ6K,aACjDG,EAAMF,WAAa,MAChB9K,EAAAA,EAAQ6K,aAAaG,EAAMD,aAEhC,IAAIM,EAAUlL,OAAOoJ,EAAU+B,0BAC/BD,EAAUA,EAAU,GAAK,IAAIA,IAAYA,EACzCA,EAAU,IAAItJ,KAAK,GAAGsJ,KAAW/B,KACjC+B,EAAUrL,EAAAA,EAAQuL,UAAUF,EAAS,GACrC,IAAKG,EAAMC,EAAKC,GAAM,CACpBL,EAAQlD,cACRkD,EAAQP,WAAa,EACrBO,EAAQN,WAEVU,EAAMA,EAAM,GAAK,IAAIA,IAAQA,EAC7BC,EAAKA,EAAK,GAAK,IAAIA,IAAOA,EAC1BL,EAAU,GAAGG,KAAQC,KAAOC,IAE5BxB,EAAc,CAAEkB,WAAUR,WAAUS,YACpC7B,GAAamC,IAAI,IACZA,EACHC,yBAA0BR,EAC1BS,uBAAwBjB,MAG1BlM,EAASR,EAAImB,QAAQC,YAAY,GAChC,CAACgK,KAEJlK,EAAAA,EAAAA,YAAU,KACR,GAAIuK,GAAejM,EAAUoD,OAAS,EAAG,CAAC,IAAD2B,EAAAqJ,EAAArI,EACvC,MAAMC,EAAWC,IACf,MAAMzD,EAAQyD,EAAEC,OAAOC,GACvB4F,EAAsBvJ,EAAM,EAGxB4D,EAA0B,QAAdrB,EAAGvE,EAAImB,eAAO,IAAAoD,GACS,QADTqJ,EAAXrJ,EACjBsB,cAAc,IAAI5E,gBAAmB,IAAA2M,OADT,EAAXA,EAEjB9H,uBAAuB,QAAQ,GAAGC,SAEhCC,EACJJ,IACwB,QADZL,EACZU,MAAMC,KAAKN,UAAa,IAAAL,OAAA,EAAxBA,EAA0BvB,QAAOmC,GAAKA,EAAEC,UAAUC,SAAS,WAE7D,IAAK,IAAIE,EAAI,EAAGA,EAAIP,EAAMpD,OAAQ2D,IAChCP,EAAMO,GAAGR,SAAS,GAAGK,UAAUK,OAAO,WACtCT,EAAMO,GAAGR,SAAS,GAAGW,aAAa,KAAMlH,EAAU,GAAG0D,OAAOqD,GAAG3E,OAC/DoE,EAAMO,GAAGR,SAAS,GAAGY,iBAAiB,QAASnB,GAGjD,GAAI4F,EAAqB,CAAC,IAADxE,EACvB,MAAMC,EACJb,IACiB,QADZY,EACLX,MAAMC,KAAKF,UAAM,IAAAY,OAAA,EAAjBA,EAAmB5C,QACjBmC,GAAKA,EAAEJ,SAAS,GAAGJ,KAAOyF,IAC1B,IACAvE,GACFA,EAAEC,qBAAqB,QAAQ,GAAGV,UAAUW,IAAI,UAEpD,CAEA,MAAO,KACL,IAAK,IAAIR,EAAI,EAAGA,EAAIP,EAAMpD,OAAQ2D,IAChCP,EAAMO,GAAGR,SAAS,GAAGiB,oBAAoB,QAASxB,EACpD,CAEJ,IACC,CAAC4F,EAAqBK,EAAajM,IAEtC,MAAM+B,EAAcsM,IAClB,MAAMP,EAAOlC,EAAoBb,MAAM,KAAK,GAC5C,IAAIrH,EAAS,IAAI+C,MAAM,IACpB6H,OACA1L,KAAI,CAAC2L,EAAGxH,IAAOA,EAAI,EAAI8D,OAAO9D,EAAI,GAAK,IAAIA,EAAI,MAC/CnE,KAAI4L,IACH,MAAMT,EAAMzL,EAAAA,EAAQmM,WAAWD,GACzBE,EAAMhO,EAAK8D,QAAOsF,GAAKA,EAAE1H,MAAM2I,MAAM,KAAK,GAAG4D,SAASZ,KACtDa,EAAKF,EAAItL,OACXsL,EAAI,GAAGxL,MAAMsB,QAAO3B,GAAMA,EAAGR,QAAUgM,IAAO,GAAG7L,MACjD,EACJ,MAAO,CACLyB,EAAGkG,IAAO,GAAG2D,KAAQU,QAASpE,OAAO,cACrCjG,EAAGyK,EACHxM,MAAO,GAAG2L,KAAOD,IAClB,IAGL,OADApK,EAAS6K,IAAAA,QAAU7K,GACZA,CAAM,EAETmL,EAAWR,IACf,IAAIS,EAAM/M,EAAYsM,GAAOpJ,QAC3B,CAACC,EAAGC,IAAMD,EAAIzC,OAAO0C,EAAEhB,EAAE4K,QAAQ,KACjC,GAQF,OANAD,EAAMxM,EAAAA,EAAQ+C,4BACZwG,EAAUmD,mBACVnD,EAAUoD,qBACVH,EACA,GAEKA,CAAG,GAGZpN,EAAAA,EAAAA,YAAU,KACR,GAAIhB,EAAK0C,OAAS,EAAG,CAAC,IAADyC,EAAAqJ,EACnB,MAAMhM,EAAQ,CACZ,CACEO,MAAO0I,EACPzI,OAAQ3B,EAAY,qBAEtB,CACE0B,MAAO2I,EACP1I,OAAQ3B,EAAY,cAEtB,CACE0B,MAAO4I,EACP3I,OAAQ3B,EAAY,SAEtB,CACE0B,MAAO6I,EACP5I,OAAQ3B,EAAY,qBAGxBiK,EAAa,IACblH,YAAW,KACTkH,EAAa9I,EAAM,GAClB,KACY,QAAf2C,EAAIrF,EAAImB,eAAO,IAAAkE,GAAe,QAAfqJ,EAAXrJ,EAAaH,WAAW,UAAE,IAAAwJ,GAA1BA,EAA4BxJ,WAAW,KACzClF,EAAImB,QAAQ+D,WAAW,GAAGA,WAAW,GAAGC,MAAMC,OAASA,IAE3D,IACC,CAAClF,IAEJ,MAAMyO,EAAiBlF,IACrB,GAAQ,OAAJrK,QAAI,IAAJA,GAAAA,EAAM2I,cAAe,CACvB,IAAI2B,EAAO,GACX,GAAInJ,EAAQ,IAAK,CACfmJ,EAAOC,IAAOF,GAAGG,OAAO,OACxB,MAAMC,EAAQH,EACXI,eAAe,UAAW,CAAElI,MAAO,UACnCmI,cACGC,EAAOP,EAAEQ,cACfP,EAAO,GAAGtK,EAAK2I,cAAc,CAC3BpC,GAAIkE,EACJ7B,eAAgB6B,OACZG,GACR,MACEN,EAAOC,IAAOF,GAAGG,OAAO,KAE1B,OAAOF,CACT,GAGF,OACE7B,EAAAA,EAAAA,MAAA,OAAK7H,IAAKA,EAAK8H,UAAU,oBAAmB/B,SAAA,EAC1CkC,EAAAA,EAAAA,KAAA,KACEH,UAAW,SACT2D,EAAc,QAAU,8BAE1BnB,QAASA,IAAMoB,GAAgBD,GAC/BtG,MAAQsG,EAAsD,CAAC,EAAzC,CAAEmD,SAAU,WAAY9F,IAAK,UAEpD2C,GAAejM,EAAUoD,OAAS,IACjCiF,EAAAA,EAAAA,MAAAM,EAAAA,SAAA,CAAApC,SAAA,EACE8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkB/B,SAAA,EAC/B8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mEAAkE/B,SAAA,EAC/E8B,EAAAA,EAAAA,MAAA,QAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAAA,KACEH,UAAW,iCACXI,MAAO9I,EAAK2I,cAAc,CACxBpC,GAAI,iBACJqC,eAAgB,sBAGpBC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,iBACHqC,eAAe,uBAGnBH,EAAAA,EAAAA,MAAA,QAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAAA,QAAMH,UAAU,OAAM/B,UACpBkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,OAAOqC,eAAe,WAErC,QADDmD,EACNjL,EAAK,UAAE,IAAAiL,OAAA,EAAPA,EAASvJ,MAAM2I,MAAM,KAAK,UAG/B1C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mEAAkE/B,SAAA,EAC/E8B,EAAAA,EAAAA,MAAA,QAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAAA,KACEH,UAAU,iCACVI,MAAO9I,EAAK2I,cAAc,CACxBpC,GAAI,YACJqC,eAAgB,iBAGpBC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,YAAYqC,eAAe,kBAElDC,EAAAA,EAAAA,KAAA,QAAAlC,SAAO,GAAGsI,EAAS,qBAErBxG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mEAAkE/B,SAAA,EAC/E8B,EAAAA,EAAAA,MAAA,QAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAAA,KACEH,UAAU,iCACVI,MAAO9I,EAAK2I,cAAc,CACxBpC,GAAI,WACJqC,eAAgB,gBAGpBC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,WAAWqC,eAAe,iBAEjDC,EAAAA,EAAAA,KAAA,QAAAlC,SAAO,GAAGsI,EAAS,gBAErBxG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+EAA8E/B,SAAA,EAC3F8B,EAAAA,EAAAA,MAAA,QAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAAA,KACEH,UAAU,gCACVI,MAAO9I,EAAK2I,cAAc,CACxBpC,GAAI,mBACJqC,eAAgB,wBAGpBC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,mBACHqC,eAAe,yBAGnBC,EAAAA,EAAAA,KAAA,QAAAlC,SAAO,GAAGsI,EAAS,+BAGvBpG,EAAAA,EAAAA,KAACW,IAAS,CACR1I,KAAMV,EACNmG,GAAI1E,EACJ4H,QAAS,CACPC,IAAK,GACLC,MAAOxI,EAAQ,IAAM,GAAK,GAC1ByI,OAAQ,GACRC,KAAM,KAER1I,MAAOA,EACP2I,QAAQ,EACR9D,OAlRK,IAmRL+D,OAAQ/J,EAAK2I,cAAc,CACzBpC,GAAI,QACJqC,eAAgB,UAElBoB,OAAQhK,EAAK2I,cAAc,CACzBpC,GAAI,SACJqC,eAAgB,WAElBqB,aAAcC,GACZxH,EAAAA,EAAQ+C,4BACNjF,EAAciP,eACdjP,EAAckP,eACdxF,EAAE3F,EACF,GAGJ4F,aAAc,qBACdvD,MAAO,GACPwD,SAAUA,CAACC,EAAGlD,IACLoI,EAAelF,GAExBU,aAAcA,CAAC1E,EAAG2E,IAAMmB,EAAsBnB,EAAExI,SAEjDwJ,GACCW,GACAV,GACAU,EAAWoB,UACTlF,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAM/B,UACnB8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAW/B,SAAA,EACxB8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gDAA+C/B,SAAA,EAC5DkC,EAAAA,EAAAA,KAAA,QAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,QAAQqC,eAAe,aAE9CC,EAAAA,EAAAA,KAAA,QAAAlC,SACG4I,EACC,IAAI9K,KAAK,6BACPuH,EAAoBb,MAAM,KAAK,MAC/BzI,EAAAA,EAAQqK,cACNf,EAAoBb,MAAM,KAAK,iBAMzC1C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mEAAkE/B,SAAA,EAC/EkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,2BACbG,EAAAA,EAAAA,KAAA,QAAAlC,SAAOsF,EAAU0D,yBAEnBlH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mEAAkE/B,SAAA,EAC/EkC,EAAAA,EAAAA,KAAA,QAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,QAAQqC,eAAe,aAE9CH,EAAAA,EAAAA,MAAA,QAAA9B,SAAA,CACGgG,EAAWmB,SAAU,KACtBjF,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,KAAKqC,eAAe,OAAQ,IAChD+D,EAAWW,gBAGhB7E,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gDAA+C/B,SAAA,EAC5DkC,EAAAA,EAAAA,KAAA,QAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,UAAUqC,eAAe,eAEhDC,EAAAA,EAAAA,KAAA,QAAAlC,SAAOgG,EAAWoB,uBAO5B,IC1TV,EA9CwBhO,IACtB,MAAME,GAAiBC,EAAAA,EAAAA,YAAWC,KAC5B,YAAEyP,EAAW,eAAEC,EAAc,UAAE5D,EAAS,sBAAEE,GAC9ClM,GACKa,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAuCjC,OArCAc,EAAAA,EAAAA,YAAU,KACR,GAAI8N,EAAYpM,OAAS,EAAG,CAC1B,MAAM1C,EAAO8O,EAAY5M,KAAI8M,IACpB,CACLtN,MAAOsN,EAAEtN,MACTc,MAAO,CACL,CACEb,MAAO,kBACPG,MAAOkN,EAAEhP,KAAKiP,IAEhB,CACEtN,MAAO,OACPG,MAAOkN,EAAEhP,KAAKkP,MAEhB,CACEvN,MAAO,YACPG,MAAOkN,EAAEhP,KAAKmP,WAEhB,CACExN,MAAO,mBACPG,MAAOkN,EAAEhP,KAAKoP,eAEhB,CACEzN,MAAO,UACPG,MAAOkN,EAAEhP,KAAKqP,cAKtBpP,EAAQD,EACV,IACC,CAAC8O,EAAa3D,EAAW4D,EAAgB1D,KAMrCtD,EAAAA,EAAAA,KAACuH,EAAe,CAACtP,KAAMA,GAAQ,E,+ECtCxC,MAkMA,EAlMsBf,IACpB,MAAMC,GAAOqQ,EAAAA,EAAAA,MACP,kBAAE9P,EAAiB,aAAE+P,EAAY,aAAEC,KAAiBC,GAASzQ,EAC7DW,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,GACzBH,GAAgBN,EAAAA,EAAAA,YAAWO,EAAAA,IAC1BgQ,EAAOC,IAAY1P,EAAAA,EAAAA,UAAS,KAC5B2P,EAAWC,IAAgB5P,EAAAA,EAAAA,WAAS,IAC3Cc,EAAAA,EAAAA,YAAU,KACR8O,GAAa,GACb,MAAMtL,EAAIuL,IACVC,QAAQC,IAAI,CAACzL,IAAI0L,MAAK3G,IACpB,MAAMvJ,EAAOuJ,EAAE,GACfqG,EAAS5P,GACT8P,GAAa,EAAM,GACnB,GACD,CAACrQ,EAAmB+P,EAAcC,IAErC,MAAMM,EAAiBA,KACrB,MAAMI,EAAW,IAAIC,SAMrB,OALAD,EAASE,OAAO,YAAaZ,EAAaa,WAC1CH,EAASE,OAAO,UAAWZ,EAAac,SACxCJ,EAASE,OAAO,eAAgBb,GAChCW,EAASE,OAAO,WAAYZ,EAAae,UACzCL,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EACJC,KAAK,kCAAmCT,GACxCD,MAAKW,GAAOA,EAAI7Q,KAAK8Q,WACrBC,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EASAG,EAAeA,CAACC,EAAMC,IACI,OAA1B5B,EAAae,SAERzO,OAAOqP,GAEc,WAA1B3B,EAAae,UAIa,SAA1Bf,EAAae,UAIa,SAA1Bf,EAAae,SANRzO,OAAOqP,GAAQrP,OAAOsP,GAUxB,EAEHlD,EAAWmD,IACf,MAAM9P,EAAQ8P,EAAM/M,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAC5C,OAAO7C,EAAAA,EAAQ+C,4BACbjF,EAAciP,eACdjP,EAAckP,eACdpN,EACA,EACD,EAEG+P,EAAc,GACdC,EAAe,GACfC,EAAY,GAClB,OACE9J,EAAAA,EAAAA,MAAC+J,EAAAA,EAAK,IAAKhC,EAAMzK,MAAO,CAAE0M,OAAQ,KAAQ9L,SAAA,EACxCkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAME,OAAM,CAACC,aAAW,EAAAhM,UACvB8B,EAAAA,EAAAA,MAAC+J,EAAAA,EAAMI,MAAK,CAAAjM,SAAA,CACT3G,EAAK2I,cAAc,CAClBpC,GAAIhG,EAAkB4K,MAAM,KAAK,GAAGR,cACpC/B,eAAgBrI,EAAkB4K,MAAM,KAAK,GAAGR,gBAC9C,IACHpK,EAAkB4K,MAAM,KAAK,GAAI,KAClCtC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,6BAA6B,IAAE6H,EAAa9N,YAG7DoG,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMK,KAAI,CACTnK,UAAW,mBACsB,SAA/BhI,EAAY4K,SAASC,MACjB,qBACA,sBACH5E,UAEHkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,wBAAuB/B,SAClCgK,GAxDN9H,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kBAAiB/B,UAC9BkC,EAAAA,EAAAA,KAACiK,EAAAA,EAAM,OAwDHjK,EAAAA,EAAAA,KAAA,SACEH,UAAW,UACsB,SAA/BhI,EAAY4K,SAASC,MACjB,aACA,eACH5E,UAEH8B,EAAAA,EAAAA,MAAA,SAAA9B,SAAA,EACE8B,EAAAA,EAAAA,MAAA,MAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAAA,MAAAlC,SAAI,OACJkC,EAAAA,EAAAA,KAAA,MAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,UAAUqC,eAAe,eAEhDC,EAAAA,EAAAA,KAAA,MAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,YACHqC,eAAe,iBAGnBC,EAAAA,EAAAA,KAAA,MAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,OAAOqC,eAAe,YAE7CC,EAAAA,EAAAA,KAAA,MAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,aACHqC,eAAe,oBAIpB6H,GAASA,EAAMjN,OAAS,EACvBiN,EAAMzN,KAAI,CAAC+D,EAAGI,KACZ,MAAM4L,EAAOd,EACXlL,EAAEiM,oBACFjM,EAAEkM,gBAEJZ,EAAYa,KAAKrQ,OAAOkE,EAAEkM,iBAC1BX,EAAaY,KAAKrQ,OAAOkE,EAAEiM,sBAC3B,MAAMG,EAAOlB,EACXlL,EAAEiM,oBACFjM,EAAEkM,gBAGJ,OADAV,EAAUW,KAAKC,IAEb1K,EAAAA,EAAAA,MAAA,MAAA9B,SAAA,EACE8B,EAAAA,EAAAA,MAAA,MAAA9B,SAAA,CAAKQ,EAAI,EAAE,QACX0B,EAAAA,EAAAA,KAAA,MAAAlC,SAAKI,EAAEqM,gBACPvK,EAAAA,EAAAA,KAAA,MAAAlC,SAAKI,EAAEkM,kBACPpK,EAAAA,EAAAA,KAAA,MAAAlC,SAAKI,EAAEiM,uBACPnK,EAAAA,EAAAA,KAAA,MACEH,UAAW,SAAQqK,GAAQ,EAAI,UAAY,UAAWpM,SAErDoM,GAAQ,EACL,IAAIrQ,EAAAA,EAAQ+C,4BACVjF,EAAciP,eACdjP,EAAckP,eACdqD,EACA,KAEF,IAAIrQ,EAAAA,EAAQ+C,4BACVjF,EAAciP,eACdjP,EAAckP,eACdqD,EACA,UAnBD5L,EAsBJ,KAIT0B,EAAAA,EAAAA,KAAA,MAAAlC,UACEkC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mBAAmB2K,QAAQ,IAAG1M,UAC1CkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,qBACHqC,eAAe,2BAKtB6H,GAASA,EAAMjN,OAAS,IACvBiF,EAAAA,EAAAA,MAAA,MAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAAA,MAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,QAAQqC,eAAe,aAE9CC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAlC,SAAKsI,EAASoD,MACdxJ,EAAAA,EAAAA,KAAA,MAAAlC,SAAKsI,EAASqD,MACdzJ,EAAAA,EAAAA,KAAA,MAAAlC,SAAKsI,EAASsD,mBAUtB,ECfZ,EA9KmBxS,IACjB,MAAMC,GAAOqQ,EAAAA,EAAAA,KACP3P,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,GACzBH,GAAgBN,EAAAA,EAAAA,YAAWO,EAAAA,IAC3B,OAAE6S,KAAW9C,GAASzQ,GACrBwT,EAAqBC,IAAyBxS,EAAAA,EAAAA,UAAS,IACvDyS,EAAaC,IAAkB1S,EAAAA,EAAAA,UAAS,IACxC2S,EAAaC,IAAkB5S,EAAAA,EAAAA,UAAS,IACxC6S,EAAeC,IAAoB9S,EAAAA,EAAAA,UAAS,IAC5C+S,EAAYC,IAAiBhT,EAAAA,EAAAA,UAAS,IACtCiT,EAAiBC,IAAsBlT,EAAAA,EAAAA,UAAS,IAEvDc,EAAAA,EAAAA,YAAU,KACR,GAAIwR,EAAO9P,OAAS,EAAG,CACrB,IAAI2Q,EACFb,EAAO9P,OAAS,GAChB8P,EAAO1O,QAAOmC,GAAsB,WAAjBA,EAAEqN,YAA2BrN,EAAEsN,OAAS,IAC7DF,EAAOA,EAAK3Q,OAAS,EAAI2Q,EAAK,GAAGE,OAAS,EAC1CF,EAAOA,EAAKhF,QAAQ,GACpBgF,EAAOtR,OAAOsR,GACdX,EAAsBW,EACxB,IACC,CAACb,KAEJxR,EAAAA,EAAAA,YAAU,KACR,IAAIwS,EACFf,EAAsBE,EAAcE,EAAcE,EACpDS,EAAaxM,KAAKyM,MAAmB,IAAbD,GAAoB,IAC5CA,GAA6B,IAAhBA,EAAoB,EAAIA,EACrCN,EAAcM,GAGd,IAAIE,GADc3R,OAAO0Q,GAAuBe,GACtBf,EAC1BiB,GAAoB,IACpBA,EAAUA,EAAU,IAAM,IAAMA,EAChCA,EAAUC,MAAMD,GAAW,IAAMA,EACjCN,EAAmBM,EAAQ,GAC1B,CAACjB,EAAqBE,EAAaE,EAAaE,IAEnD,MAAMa,EAAYC,IACT,CACLlS,MACe,IAAbkS,EACI3U,EAAK2I,cAAc,CAAEpC,GAAI,SAAUqC,eAAgB,WACnD+L,EAAW,EACX3U,EAAK2I,cAAc,CAAEpC,GAAI,SAAUqC,eAAgB,WACnD5I,EAAK2I,cAAc,CAAEpC,GAAI,QAASqC,eAAgB,UACxDgM,MACe,IAAbD,EACI,eACAA,EAAW,EACX,cACA,iBAIV,OACElM,EAAAA,EAAAA,MAAC+J,EAAAA,EAAK,IAAKhC,EAAMzK,MAAO,CAAE0M,OAAQ,KAAQ9L,SAAA,EACxCkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAME,OAAM,CAACC,aAAW,EAAAhM,UACvBkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMI,MAAK,CAAAjM,UACVkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,QAAQqC,eAAe,eAGhDC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMK,KAAI,CACTnK,UAAW,mBACsB,SAA/BhI,EAAY4K,SAASC,MAAmB,UAAY,YACnD5E,UAEH8B,EAAAA,EAAAA,MAAA,OAAKC,UAAW,uBAAuB/B,SAAA,EACrC8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoB/B,SAAA,EACjCkC,EAAAA,EAAAA,KAAA,SACEtC,GAAG,sBACH3D,MAAO2Q,EACPsB,SAAUxO,GAAKmN,EAAsB3Q,OAAOwD,EAAEC,OAAO1D,QACrDkS,YAAa9U,EAAK2I,cAAc,CAC9BpC,GAAI,UACJqC,eAAgB,YAElBR,KAAK,SACLM,UAAU,eACVqM,UAAU,KAEZlM,EAAAA,EAAAA,KAAA,SAAOmM,QAAQ,sBAAqBrO,UAClCkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,UAAUqC,eAAe,kBAGlDH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoB/B,SAAA,EACjCkC,EAAAA,EAAAA,KAAA,SACEtC,GAAG,cAEHsO,SAAUxO,GAAKqN,EAAe7Q,OAAOwD,EAAEC,OAAO1D,QAC9CwF,KAAK,SACLM,UAAU,eACVoM,YAAa,GAAG9U,EAAK2I,cAAc,CACjCpC,GAAI,OACJqC,eAAgB,YACZ5I,EAAK2I,cAAc,CACvBpC,GAAI,UACJqC,eAAgB,iBAGpBH,EAAAA,EAAAA,MAAA,SAAOuM,QAAQ,cAAarO,SAAA,EAC1BkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,OAAOqC,eAAe,SAAU,KACrDC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,UAAUqC,eAAe,mBAGlDH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoB/B,SAAA,EACjCkC,EAAAA,EAAAA,KAAA,SACEtC,GAAG,cAEHsO,SAAUxO,GAAKuN,EAAe/Q,OAAOwD,EAAEC,OAAO1D,QAC9CwF,KAAK,SACLM,UAAU,eACVoM,YAAa9U,EAAK2I,cAAc,CAC9BpC,GAAI,cACJqC,eAAgB,mBAGpBC,EAAAA,EAAAA,KAAA,SAAOmM,QAAQ,cAAarO,UAC1BkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,cAAcqC,eAAe,sBAGtDH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoB/B,SAAA,EACjCkC,EAAAA,EAAAA,KAAA,SACEtC,GAAG,gBAEHsO,SAAUxO,GAAKyN,EAAiBjR,OAAOwD,EAAEC,OAAO1D,QAChDwF,KAAK,SACLM,UAAU,eACVoM,YAAa,GAAG9U,EAAK2I,cAAc,CACjCpC,GAAI,SACJqC,eAAgB,cACZ5I,EAAK2I,cAAc,CACvBpC,GAAI,UACJqC,eAAgB,iBAGpBH,EAAAA,EAAAA,MAAA,SAAOuM,QAAQ,gBAAerO,SAAA,EAC5BkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,SAASqC,eAAe,WAAY,KACzDC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,UAAUqC,eAAe,mBAGlDH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAM/B,SAAA,EACnBkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,mBAAkB/B,UAC/B8B,EAAAA,EAAAA,MAAA,MAAIC,UAAWgM,EAAUX,GAAYa,MAAMjO,SAAA,CACxC+N,EAAUX,GAAYtR,MAAM,QAC7BoG,EAAAA,EAAAA,KAAA,KACEH,UAAW,OACW,MAApBuL,EAA0B,WAAa,2BAK/CpL,EAAAA,EAAAA,KAAA,OAAKH,UAAW,eAAegM,EAAUX,GAAYa,QAAQjO,SAC1DjE,EAAAA,EAAQ+C,4BACPjF,EAAciP,eACdjP,EAAckP,eACdqE,EACA,SAINlL,EAAAA,EAAAA,KAAA,OACEH,UAAW,wBACTuL,EAAkB,IAAM,SAAW,WAErClO,MAAO,CAAE5E,MAAO,GAAG8S,eAInB,E,cCxKZ,MAyRA,EAzR0BlU,IACxB,MAAME,GAAiBC,EAAAA,EAAAA,YAAWC,KAC5B,OAAE8U,KAAWzE,GAASzQ,GACtB,WAAEmV,GAAejV,GAChBkV,EAASC,IAAcpU,EAAAA,EAAAA,UAAS,KAChCqU,EAAMC,IAAWtU,EAAAA,EAAAA,UAAS,IAC3BhB,GAAOqQ,EAAAA,EAAAA,KACP3P,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,IACxB4U,EAAUC,IAAexU,EAAAA,EAAAA,UAAS,CACvCqT,OAAQ,GACRoB,OAAQ,GACRJ,KAAM,GACNK,YAAa1V,EAAK2I,cAAc,CAC9BpC,GAAI,eACJqC,eAAgB,iBAElBvG,SAAU,GACVsT,eAAgB,KAGlB7T,EAAAA,EAAAA,YAAU,KACJmT,GAAUA,EAAOzR,OAAS,GAC5B4R,EAAWH,EACb,GACC,CAACA,KAgEJnT,EAAAA,EAAAA,YAAU,KACR,MAAM8T,EAAW,IAAI1E,SACrB0E,EAASzE,OAAO,KAAMoE,EAASE,QAC/BG,EAASzE,OAAO,QAASzQ,EAAY6Q,WAAWC,OAChDC,EAAAA,EACGC,KAAK,kCAAmCkE,GACxC5E,MAAKW,IACJ6D,GAAYK,IAAE,IACTA,EACHF,eAAgBhE,EAAI7Q,KAAK8Q,SAAS,GAAG+D,kBACpC,IAEJ9D,OAAMiE,IACL/D,QAAQC,IAAI8D,EAAI,GAChB,GACH,CAACP,EAASE,SAeb,OACEhN,EAAAA,EAAAA,MAAC+J,EAAAA,EAAK,IAAKhC,EAAMzK,MAAO,CAAE0M,OAAQ,KAAQ9L,SAAA,EACxCkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAME,OAAM,CAACC,aAAW,EAAAhM,UACvBkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMI,MAAK,CAAAjM,UACVkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,eAAeqC,eAAe,sBAGvDC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMK,KAAI,CACTnK,UAAW,uBACsB,SAA/BhI,EAAY4K,SAASC,MACjB,qBACA,sBACH5E,UAEH8B,EAAAA,EAAAA,MAAA,OAAKC,UAAW,UAAU/B,SAAA,EACxB8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAY/B,SAAA,EACzB8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkB/B,SAAA,EAC/BkC,EAAAA,EAAAA,KAAA,OAAAlC,UACEkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wBAEfG,EAAAA,EAAAA,KAAA,SAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,aAAaqC,eAAe,qBAGrDH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoB/B,SAAA,EACjCkC,EAAAA,EAAAA,KAACkN,EAAAA,EAAY,CACXjB,YAAa,GAAG9U,EAAK2I,cAAc,CACjCpC,GAAI,sBACJqC,eAAgB,0BAElBiM,SAAUA,CAACmB,EAAKpT,EAAOqT,KA3CdC,KACrB,MACMC,EADO,IAAIhB,GACAvQ,QAAOC,GAAKA,EAAE0B,KAAO2P,IACtCZ,EAAQa,GACRX,GAAYK,IAAE,IACTA,EACHJ,OAAQS,EACRb,KAAM,GACNhB,OAAQ,GACRhS,SAAU,MACT,EAkCW+T,CAAexT,EAAM,EAEvByT,QAAS,CACPC,MAAO,CACLC,aAAcpB,EAAQnS,KAAI8L,IAAG,CAC3BvI,GAAIuI,EAAIvI,GACR3D,MAAOkM,EAAIlM,WAGf4T,YAAY,GAEd5T,MAAO2S,EAASE,OAChBrN,KAAM,SACNoO,YAAY,EACZjL,MAAO7K,EAAY4K,SAASC,QAE7B1I,OAAO0S,EAASI,gBAAkB,IACjClN,EAAAA,EAAAA,MAAA,SAAOC,UAAU,cAAa/B,SAAA,EAC5BkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,UAAUqC,eAAe,YAAY,IACzD/F,OAAO0S,EAASI,gBAAgBjL,2BAKzC7B,EAAAA,EAAAA,KAAA,OAAKH,UAAU,yDAAwD/B,UACrEkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,sCAEfD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAY/B,SAAA,EACzB8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkB/B,SAAA,EAC/BkC,EAAAA,EAAAA,KAAA,OAAAlC,UACEkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wBAEfG,EAAAA,EAAAA,KAAA,SAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,kBACHqC,eAAe,0BAIrBC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,qBAAoB/B,UACjCkC,EAAAA,EAAAA,KAACkN,EAAAA,EAAY,CACXjB,YAAa,GAAG9U,EAAK2I,cAAc,CACjCpC,GAAI,2BACJqC,eAAgB,+BAElBiM,SAAUA,CAACmB,EAAKpT,EAAOqT,KACrBT,GAAYK,IAAE,IAAUA,EAAIR,KAAMzS,KAAS,EAE7CyT,QAAS,CACPC,MAAO,CACLC,aAAclB,EAAKrS,KAAI8L,IAAG,CACxBvI,GAAIuI,EAAIvI,GACR3D,MAAOkM,EAAIlM,WAGf4T,YAAY,GAEd5T,MAAO2S,EAASF,KAChBjN,KAAM,SACNoO,YAAY,EACZjL,MAAO7K,EAAY4K,SAASC,cAIlC1C,EAAAA,EAAAA,KAAA,OAAKH,UAAU,cAAa/B,UAC1BkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAe/B,UAC5BkC,EAAAA,EAAAA,KAACkN,EAAAA,EAAY,CACXjB,YAAa,GAAG9U,EAAK2I,cAAc,CACjCpC,GAAI,WACJqC,eAAgB,eAElBiM,SAAUA,CAACmB,EAAKpT,EAAOqT,KACrBT,GAAYK,IAAE,IAAUA,EAAIxT,SAAUO,KAAS,EAEjDyT,QAAS,CACPC,MAAO,CACLC,aAAcrB,EAAWlS,KAAI8L,IAAG,CAC9BvI,GAAIuI,EAAIvI,GACR3D,MAAOkM,EAAIlM,WAGf4T,YAAY,GAEd5T,MAAO2S,EAASlT,SAChB+F,KAAM,SACNoO,YAAY,EACZjL,MAAO7K,EAAY4K,SAASC,aAIlC1C,EAAAA,EAAAA,KAAA,OAAKH,UAAU,cAAa/B,UAC1B8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAe/B,SAAA,EAC5BkC,EAAAA,EAAAA,KAAA,SACEtC,GAAG,SACH3D,MAAO2S,EAASlB,OAChBQ,SAAUxO,GACRmP,GAAYK,IAAE,IAAUA,EAAIxB,OAAQhO,EAAEC,OAAO1D,UAE/CkS,YAAa9U,EAAK2I,cAAc,CAC9BpC,GAAI,SACJqC,eAAgB,WAElBR,KAAK,SACLM,UAAU,kCAEZG,EAAAA,EAAAA,KAAA,SAAOmM,QAAQ,SAAStM,UAAU,YAAW/B,UAC3CkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,SAASqC,eAAe,mBAInDC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,cAAa/B,UAC1BkC,EAAAA,EAAAA,KAAA,UACE4N,WAEIlB,EAASF,MACTE,EAASlB,QACTkB,EAASE,QACTF,EAASlT,UAGbqG,UAAU,6BACVwC,QAASA,IApPJwL,MACf,MAAMzF,EAAW,IAAIC,SACrBD,EAASE,OAAO,SAAUoE,EAASlB,QACnCpD,EAASE,OAAO,SAAUoE,EAASE,QACnCxE,EAASE,OAAO,OAAQoE,EAASF,MACjCpE,EAASE,OACP,cACA,GAAGoE,EAASG,gBACVP,EAAQvQ,QAAOC,GAAKA,EAAE0B,KAAOgP,EAASE,SAAQ,GAAG7S,YAC5CuS,EAAQvQ,QAAOC,GAAKA,EAAE0B,KAAOgP,EAASF,OAAM,GAAGzS,SAExDqO,EAASE,OAAO,WAAYoE,EAASlT,UACrC4O,EAASE,OAAO,OAAQ5G,IAAO,IAAI9F,MAAQ+F,OAAO,eAClDyG,EAASE,OACP,WACA5G,IAAO,IAAI9F,MAAQ+F,OAAO,wBAE5ByG,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OAChDC,EAAAA,EACGC,KAAK,oCAAqCT,GAC1CD,MAAKY,IACJ,MAAM,KAAE9Q,GAAS8Q,EACbA,GAAY9Q,GAAQA,EAAK8Q,UAC3BlR,EAAYiW,YAAY,CACtBC,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,sBACJqC,eAAgB,0BAGpB4M,GAAYK,IAAE,IACTA,EACHJ,OAAQ,GACRJ,KAAM,GACNhB,OAAQ,GACRhS,SAAU,GACVqT,YAAa1V,EAAK2I,cAAc,CAC9BpC,GAAI,eACJqC,eAAgB,sBAIpBlI,EAAYiW,YAAY,CACtBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,mBACJqC,eAAgB,sBAGtB,IAEDiJ,OAAMiE,IACLpV,EAAYiW,YAAY,CACtBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,sBACJqC,eAAgB,yBAElB,GACF,EAwLqB8N,GAAW/P,UAE1BkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,SAASqC,eAAe,sBAK/C,E,2CCxQZ,MAq2BA,GAAe9I,EAAAA,EAAAA,KAr2BegX,CAAC/W,EAAOgX,KAAa,IAADC,EAChD,MAAM/W,GAAiBC,EAAAA,EAAAA,YAAWC,IAC5BO,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,GACzBsW,GAAiB/W,EAAAA,EAAAA,YAAWgX,EAAAA,IAC5B,KAAElX,KAASwQ,GAASzQ,GACpB,WAAEmV,EAAU,SAAEiC,EAAQ,aAAE7G,EAAY,YAAEjQ,EAAW,kBAAEE,GACvDN,EACImX,EAA2B,CAC/Bd,MAAO,CACLC,aAAcrB,EAAWlS,KAAIZ,IAAA,IAAC,GAAEmE,EAAE,MAAE3D,GAAOR,EAAA,MAAM,CAAEmE,KAAI3D,QAAO,KAEhE4T,YAAY,GAERa,EAAgB,CACpBf,MAAO,CACLC,aAAcY,GAEhBX,YAAY,IAEPc,EAAWC,IAAgBvW,EAAAA,EAAAA,UAAS,KACpCwW,EAAWC,IAAgBzW,EAAAA,EAAAA,UAAS,CACzC,CACE0W,IAAK,YACLtD,WAAY,UACZuD,WAAY,YACZC,UAAW,EACXC,UAAW,GAEb,CACEH,IAAK,gBACLtD,WAAY,OACZuD,WAAY,gBACZC,UAAW,EACXC,UAAW,GAEb,CACEH,IAAK,WACLtD,WAAY,SACZuD,WAAY,WACZC,UAAW,EACXC,UAAW,GAEb,CACEH,IAAK,UACLtD,WAAY,UACZuD,WAAY,UACZC,UAAW,EACXC,UAAW,MAGRC,EAAQC,IAAa/W,EAAAA,EAAAA,UAAS,CAAC,IAC/BsS,EAAQ0E,IAAahX,EAAAA,EAAAA,UAAS,CACnC,CACEqT,OAAQ,EACR5R,MAAO,SACP2R,WAAY,WAEd,CACEC,OAAQ,EACR5R,MAAO,UACP2R,WAAY,QAEd,CACEC,OAAQ,EACR5R,MAAO,UACP2R,WAAY,UAEd,CACEC,OAAQ,EACR5R,MAAO,WACP2R,WAAY,cAGT6D,EAAeC,IAAoBlX,EAAAA,EAAAA,WAAS,IAC5CmX,EAAgBC,IAAqBpX,EAAAA,EAAAA,WAAS,IAC9CqX,EAAmBC,IAAwBtX,EAAAA,EAAAA,WAAS,IACpDuP,EAAcgI,IAAmBvX,EAAAA,EAAAA,UAAS,CAAC,IAC3CwX,EAAQC,IAAazX,EAAAA,EAAAA,WAAS,GAO/B0X,EAAMhW,EAAAA,EAAQiW,UACbC,EAAwBC,KAA6B7X,EAAAA,EAAAA,UAAS,CAAC,GAChE8X,GAAc,CAClBhU,MAAO,EACPiU,MAAO,GACPC,aAAc,KAETC,GAAWC,KAAgBlY,EAAAA,EAAAA,UAAS,OACpCmY,GAAcC,KAAmBpY,EAAAA,EAAAA,UAAS,OAEjDc,EAAAA,EAAAA,YAAU,KACR+W,GAA0B,CACxBQ,OAAQ,CACNC,OAAQ,CACNC,kBAAmBvZ,EAAK2I,cAAc,CACpCpC,GAAI,aACJqC,eAAgB,eAElB4N,YAAY,GAEdgD,OAAQ,CACNlX,MAAO,CACLwG,MAAO9I,EAAK2I,cAAc,CAAEpC,GAAI,QAASqC,eAAgB,UACzD6Q,OAAQpZ,EAAY,GAAGqF,YACvBgU,SAAUrZ,EAAY,GAAGsF,cACzBgU,WAAY,GAEdC,WAAY,CACVC,YAAa,OACbC,eAAgB,KAItBC,YAAa,GACbC,MAAO,iBACPC,UAAW,CACT,aACA,eACA,iBACA,sBACA,eACA,eACA,mBACA,eACA,mBACA,mBACA,sBAEFC,eAAgB,CACd,KACA,cACA,SACA,OACA,OACA,OACA,WACA,OACA,WACA,WACA,aACAlX,KAAImX,GAAMna,EAAK2I,cAAc,CAAEpC,GAAI4T,EAAIvR,eAAgBuR,MACzDC,cAAe,CACb,CAAEC,aAAc,MAChB,CAAEpH,eAAgB,GAClB,CAAED,oBAAqB,GACvB,CAAEsH,aAAc/P,IAAO,IAAI9F,MAAQ+F,OAAO,gBAE5C+P,eAAgB,CAAC,eAAgB,qBACjC,GACD,CAACva,IAEJ,MAAMwa,GAAYC,IAChB,GAAItB,GAAc,CAChBpB,EAAU,CAAC,GACXU,GAAU,GACV,MAAO5L,EAAQC,GAAQqM,GAAahO,MAAM,KACpC3I,EAAQE,EAAAA,EAAQqK,cAAcF,GAE9B6N,EAAU,yBAAyB5N,KAAQtK,cAAkBsK,KAAQtK,KAD3D,IAAIiC,KAAKqI,EAAMtK,EAAO,GAAGiL,iCAC0E6C,0BAAqC5P,EAAY6Q,WAAWC,SACzKlM,EAAIqV,GAAeD,GACzB5J,QAAQC,IAAI,CAACzL,IACV0L,MAAK4J,UAAY,IAADC,EACf,MAAM/Z,EAAOuJ,EAAE,GAAGvJ,KAAK8Q,SACvBmG,EAAUjX,GACV,MAAMga,EAAO,CACX,WACA,UACA,SACAvQ,IAAW,OAAJzJ,QAAI,IAAJA,GAAc,QAAV+Z,EAAJ/Z,EAAM2P,MAAM,UAAE,IAAAoK,OAAV,EAAJA,EAAgBP,cAAcS,UAAY,SAAW,QAC5D,CACEC,MAAO,CACLC,UAAW,CACT,CACExY,MAAOzC,EAAK2I,cAAc,CACxBpC,GAAI,SACJqC,eAAgB,WAElBhG,MAAO,KACPsY,SAAS,GAEX,CACEzY,MAAOzC,EAAK2I,cAAc,CACxBpC,GAAI,QACJqC,eAAgB,UAElBhG,MAAO,KACPsY,SAAS,MAKjB,OACA9D,EACAC,EACA,UACA,eACA,WAEFE,EAAauD,GACbjC,IAA0BxK,IAAI,IACzBA,EAED0L,YAAae,MAGH,oBAAPL,GAAqBA,EAAG3Z,EAAK,IAErCqa,SAAQ,IAAM1C,GAAU,IAC7B,GAGIkC,GAAiBD,IACrB,MAAMzJ,EAAW,IAAIC,SAUrB,OATAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OAChDP,EAASE,OAAO,YAAayH,EAAuBqB,WACpDhJ,EAASE,OAAO,QAASyH,EAAuBoB,OAChD/I,EAASE,OAAO,QAAS8H,GAAUF,OACnC9H,EAASE,OAAO,QAAS8H,GAAUnU,OACnCmM,EAASE,OAAO,eAAgB8H,GAAUD,cACtC0B,GACFzJ,EAASE,OAAO,cAAeuJ,GAE1BjJ,EAAAA,EAAYC,KAAK,qCAAsCT,EAAS,EAgBnEmK,GAAqBA,CAACrb,EAAOsb,KACjCxS,EAAAA,EAAAA,KAACyS,EAAAA,EAAO,CAAC/U,GAAG,mBAAmBmC,UAAU,aAAc8H,EAAI7J,SACxD0U,IAICE,GAAoBA,KAnBPC,MACjB,MAAO3O,EAAQC,GAAQqM,GAAahO,MAAM,KACpC3I,EAAQE,EAAAA,EAAQqK,cAAcF,GAC9B4O,EAAU,IAAIhX,KAAKqI,EAAMtK,EAAO,GAAGiL,UAEnCwD,EAAW,IAAIC,SAKrB,OAJAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OAChDP,EAASE,OAAO,OAAQb,GACxBW,EAASE,OAAO,YAAa,GAAGrE,KAAQtK,QACxCyO,EAASE,OAAO,UAAW,GAAGrE,KAAQtK,KAASiZ,KACxChK,EAAAA,EAAYC,KAAK,8BAA+BT,EAAS,EAUhEuK,GACGxK,MAAKW,IACJ,MAAM+J,EAAW/J,EAAI7Q,KAAK8Q,SACpBM,EAAO,CACXyJ,UAAWD,EAASC,UACpBC,cAAeF,EAASE,cACxBC,SAAUH,EAASG,SACnBC,aAAcJ,EAASI,aACvBC,QAASL,EAASK,QAClBC,YAAaN,EAASM,YACtBC,cAAeP,EAASO,cACxBC,kBAAmBR,EAASQ,mBAGxBC,EAAW,CACf,CAAEvE,UAAW1F,EAAK0J,cAAe/D,UAAW3F,EAAKyJ,WACjD,CAAE/D,UAAW1F,EAAKgK,kBAAmBrE,UAAW3F,EAAK+J,eACrD,CACErE,UAAW1F,EAAK4J,aAChBjE,UAAW3F,EAAK2J,UAElB,CACEjE,UAAW1F,EAAK8J,YAChBnE,UAAW3F,EAAK6J,UAIdK,EAAW5E,EAAUxU,KAAI,CAACqZ,EAAGlV,KAAC,IAC/BkV,EACHzE,UAAWuE,EAAShV,GAAGyQ,UACvBC,UAAWsE,EAAShV,GAAG0Q,cAEzBJ,EAAa2E,EAAS,IAEvBvK,OAAMxL,GAAK0L,QAAQC,IAAI,MAAO3L,IAAG,EA4OhCiW,IAAe7c,EAAAA,EAAAA,KACf8c,GAASC,EAAAA,SACb,MACElG,MAAOgG,GAAaG,IAAI,SACxB/c,OAAQ4c,GAAaG,IAAI,UACzBnS,KAAMgS,GAAaG,IAAI,WAEzB,CAACH,MAGHxa,EAAAA,EAAAA,YAAU,KACRsX,GAAgB7Y,GAChB2E,YAAW,KACTgU,GAAaJ,GAAY,GACxB,IAAI,GACN,CAACvY,KAEJuB,EAAAA,EAAAA,YAAU,KACR,GACEya,GAAOjG,OACU,qBAAjBiG,GAAOjG,OACPiG,GAAO7c,QACP6c,GAAOjS,KACP,CACA,MAAMoS,EAASnS,IAAOgS,GAAOjS,MAAME,OAAO,YAC1C4O,GAAgBsD,GAChBxX,YAAW,KACTgU,GAAa,CACXpU,MAAO,EACPiU,MAAO,GACPC,aAAcuD,GAAO7c,QACrB,GACD,IACL,MACE0Z,GAAgB7Y,GAChB2E,YAAW,KACTgU,GAAaJ,GAAY,GACxB,IACL,GACC,CAACyD,MAKJza,EAAAA,EAAAA,YAAU,KACJqX,IACFoC,IACF,GACC,CAACpC,MAEJrX,EAAAA,EAAAA,YAAU,KACR0Y,IAAW,GACV,CAACvB,MAEJnX,EAAAA,EAAAA,YAAU,KACR,GAAI6a,OAAOC,KAAK9E,GAAQtU,OAAS,EAAG,CAAC,IAADqZ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAClC,MAAMC,EAAW,CACT,OAANvF,QAAM,IAANA,GAAa,QAAP+E,EAAN/E,EAAQxV,aAAK,IAAAua,GAAmB,QAAnBC,EAAbD,EAAe5J,eAAe,UAAE,IAAA6J,OAA1B,EAANA,EAAkCla,MAC5B,OAANkV,QAAM,IAANA,GAAa,QAAPiF,EAANjF,EAAQxV,aAAK,IAAAya,GAAmB,QAAnBC,EAAbD,EAAe9J,eAAe,UAAE,IAAA+J,OAA1B,EAANA,EAAkCpa,MAC5B,OAANkV,QAAM,IAANA,GAAa,QAAPmF,EAANnF,EAAQxV,aAAK,IAAA2a,GAAmB,QAAnBC,EAAbD,EAAehK,eAAe,UAAE,IAAAiK,OAA1B,EAANA,EAAkCta,MAC5B,OAANkV,QAAM,IAANA,GAAa,QAAPqF,EAANrF,EAAQxV,aAAK,IAAA6a,GAAwB,QAAxBC,EAAbD,EAAenK,oBAAoB,UAAE,IAAAoK,OAA/B,EAANA,EAAuCxa,OAEnC0a,EAAYhK,EAAOtQ,KAAI,CAAC+D,EAAGI,KAAC,IAC7BJ,EACHsN,OAAQgJ,EAASlW,OAEnB6Q,EAAUsF,EACZ,IACC,CAACxF,IAOJ,OACErP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAU/B,SAAA,CACtBsR,IACCpP,EAAAA,EAAAA,KAAC0U,EAAa,CACZ7U,UAAU,gBACV8U,KAAMvF,EACNwF,OAAQA,IAAMvF,GAAiB,GAC/BwF,KAAK,KACLC,WAAW,EACXpd,kBAAmB4Y,GACnB7I,aAAcA,EACdC,aAAcA,IAGjB4H,IACCtP,EAAAA,EAAAA,KAAC+U,EAAU,CACTlV,UAAU,gBACV8U,KAAMrF,EACNsF,OAAQA,IAAMrF,GAAkB,GAChCsF,KAAK,KACLpK,OAAQA,EACRqK,WAAW,IAGdtF,GACCO,EAAuBmB,YAAY,GAAGzD,MAAMC,aAAa/S,OAAS,IAChEqF,EAAAA,EAAAA,KAACgV,EAAiB,CAChBnV,UAAU,GACV8U,KAAMnF,EACNoF,OAAQA,IAAMnF,GAAqB,GACnCoF,KAAK,KACLC,WAAW,EACX1I,OAAQ2D,EAAuBmB,YAAY,GAAGzD,MAAMC,aACpDrB,WACE0D,EAAuBmB,YAAY,GAAGzD,MAAMC,aAE9CuH,UAAQ,KAGdrV,EAAAA,EAAAA,MAAA,OAAKC,UAAU,GAAE/B,SAAA,EACb6R,GAAUV,IAA6B,QAAnBd,EAAA2F,OAAOC,KAAK9E,UAAO,IAAAd,OAAA,EAAnBA,EAAqBxT,QAAS,IAClDiF,EAAAA,EAAAA,MAAAM,EAAAA,SAAA,CAAApC,SAAA,EACEkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,aAAY/B,SACxBwS,IAAgBrB,IACfrP,EAAAA,EAAAA,MAAAM,EAAAA,SAAA,CAAApC,SAAA,EACEkC,EAAAA,EAAAA,KAAA,MAAAlC,SACG,GAAG3G,EAAK2I,cAAc,CACrBpC,GAAI4S,GAAahO,MAAM,KAAK,GAAGR,cAC/B/B,eAAgBuQ,GAAahO,MAAM,KAAK,GAAGR,mBACvCwO,GAAahO,MAAM,KAAK,QAEhC1C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0BAAyB/B,SAAA,EACtCkC,EAAAA,EAAAA,KAAA,OAAAlC,UACEkC,EAAAA,EAAAA,KAACkV,EAAAA,EAAc,CACbC,UAAU,OACVC,MAAO,CAAET,KAAM,IAAKU,KAAM,KAC1BC,QAAS/C,GACPrb,EACAC,EAAK2I,cAAc,CACjBpC,GAAI,eACJqC,eAAgB,kBAGpBwV,YAAY,QAAOzX,UAEnBkC,EAAAA,EAAAA,KAAA,KACEH,UAAW,gCAAgChI,EAAY4K,SAASC,mBAChEL,QAASA,IAAMoN,GAAqB,UAI1CzP,EAAAA,EAAAA,KAAA,OAAAlC,UACEkC,EAAAA,EAAAA,KAACkV,EAAAA,EAAc,CACbC,UAAU,MACVC,MAAO,CAAET,KAAM,IAAKU,KAAM,KAC1BC,QAAS/C,GACPrb,EACAC,EAAK2I,cACH,CACEpC,GAAI,gBACJqC,eAAgB,iBAElB,CAAEhG,MAAO,SAGbwb,YAAY,QAAOzX,UAEnBkC,EAAAA,EAAAA,KAAA,KACEqC,QAASA,IA5YbmT,MAClB,MAAMC,EAAa,OAANxG,QAAM,IAANA,OAAM,EAANA,EAAQrH,MAAMzN,KACzB,CAAAe,EASEoD,KACI,IATJ,aACEiM,EAAY,eACZH,EAAc,oBACdD,EAAmB,aACnBqH,EAAY,aACZC,EAAY,iBACZiE,GACDxa,EAGD,MAAO,CACLoD,EAAI,EACJiM,EACAH,EACAD,EACAqH,EACAC,EACAiE,EACD,IAYCC,EAAM,IAAIC,EAAAA,QAChBD,EAAIE,KACF,GAAGhc,EAAAA,EAAQic,mBACT/F,EAAuBoB,WACnBb,MACN,GACA,IAEFqF,EAAII,UAAU,CACZC,OAAQ,CAAEC,SAAU,aACpBvT,MAAO,OACPwT,KAAM,CApBK,CACX,IACA,cACA,SACA,UACA,OACA,OACA,aAcAT,KAAM,IAAIA,KAGZ,MAAMU,EAAS1L,EAAOtQ,KAAIV,GAASI,EAAAA,EAAQuc,aAAa3c,EAAM+R,UAE9DmK,EAAII,UAAU,CACZC,OAAQ,CAAEC,SAAU,YAAaI,OAAQ,UACzC3T,MAAO,UACPwT,KAAM,CAAC,CAAC,SAAU,UAAW,UAAW,aACxCT,KAAM,CAACU,KAGT,MAAMG,EAAS3H,EAAUxU,KAAIkP,IAAI,IAAAkN,EAAAC,EAAAC,EAAA,OAC/B5c,EAAAA,EAAQuc,aACF,OAAJ/M,QAAI,IAAJA,OAAI,EAAJA,EAAM2F,UACgB,OAAtBe,QAAsB,IAAtBA,GAA8B,QAARwG,EAAtBxG,EAAwBS,cAAM,IAAA+F,GAAQ,QAARC,EAA9BD,EAAgC5F,cAAM,IAAA6F,GAAO,QAAPC,EAAtCD,EAAwC/c,aAAK,IAAAgd,OAAvB,EAAtBA,EAA+C5F,SAChD,IAEH8E,EAAII,UAAU,CACZC,OAAQ,CAAEC,SAAU,YAAaI,OAAQ,UACzC3T,MAAO,UACPwT,KAAM,CAAC,CAAC,aAAc,iBAAkB,YAAa,aACrDT,KAAM,CAACa,KAGTX,EAAIe,KAAK,GAAG3G,EAAuBoB,SAAStB,IAAM,EAsUb2F,GACf3V,UAAW,kCAAkChI,EAAY4K,SAASC,0BAIxE1C,EAAAA,EAAAA,KAAC2W,EAAAA,EAAa,CACZC,MAAO/c,EAAAA,EAAQgd,iBAAuB,OAAN5H,QAAM,IAANA,OAAM,EAANA,EAAQrH,OACxCkP,SAAU,kBAAkBjH,QAC5BkH,QApmBJ,CACd,CAAEC,YAAa,cAAetZ,GAAI,gBAClC,CAAEsZ,YAAa,OAAQtZ,GAAI,gBAC3B,CAAEsZ,YAAa,OAAQtZ,GAAI,gBAC3B,CAAEsZ,YAAa,SAAUtZ,GAAI,mBAgmBMI,UAEjBkC,EAAAA,EAAAA,KAACkV,EAAAA,EAAc,CACbC,UAAU,MACVC,MAAO,CAAET,KAAM,IAAKU,KAAM,KAC1BC,QAAS/C,GACPrb,EACAC,EAAK2I,cACH,CACEpC,GAAI,gBACJqC,eAAgB,iBAElB,CAAEhG,MAAO,SAGbwb,YAAY,QAAOzX,UAEnBkC,EAAAA,EAAAA,KAAA,KACEH,UAAW,oCAAoChI,EAAY4K,SAASC,0BAI1E1C,EAAAA,EAAAA,KAAA,OAAAlC,UACEkC,EAAAA,EAAAA,KAACkV,EAAAA,EAAc,CACbC,UAAU,MACVC,MAAO,CAAET,KAAM,IAAKU,KAAM,KAC1BC,QAAS/C,GACPrb,EACAC,EAAK2I,cAAc,CACjBpC,GAAI,SACJqC,eAAgB,YAGpBwV,YAAY,QAAOzX,UAEnBkC,EAAAA,EAAAA,KAAA,KACEqC,QAASA,IAzOV4U,MACrB,MAAMC,EAAYnH,EAAuBmB,YAAY/W,KAAI,CAACqH,EAAGlD,KACjD,IAANA,IACFkD,EAAU,WAANA,EAAiB,QAAU,UAE1BA,KAETwO,GAA0B,IACrBD,EAEDmB,YAAagG,IAGjBxI,EAAawI,EAAU,EA4NcD,GACfpX,UAAW,8BAA8BhI,EAAY4K,SAASC,0BAIpE1C,EAAAA,EAAAA,KAAA,OAAAlC,UACEkC,EAAAA,EAAAA,KAACkV,EAAAA,EAAc,CACbC,UAAU,MACVC,MAAO,CAAET,KAAM,IAAKU,KAAM,KAC1BC,QAAS/C,GACPrb,EACAC,EAAK2I,cAAc,CACjBpC,GAAI,QACJqC,eAAgB,WAGpBwV,YAAY,QAAOzX,UAEnBkC,EAAAA,EAAAA,KAAA,KACEqC,QAASA,IAAMkN,GAAkB,GACjC1P,UAAW,kCAAkChI,EAAY4K,SAASC,kCAQhF1C,EAAAA,EAAAA,KAACmX,EAAAA,EAAW,CAEVzZ,GAAI,cACJ8S,OAAQT,EAAuBS,OAC/BW,MAAOpB,EAAuBoB,MAC9BC,UAAWrB,EAAuBqB,UAClCC,eAAgBtB,EAAuBsB,eACvCH,YAAazC,EACbQ,OAAQA,EACRmI,WAAW,sCACXC,UAAWtO,GA7VLA,KAChB,MAAM,OAAEuO,EAAM,KAAErf,GAAS8Q,EACzB,GAAe,MAAXuO,GAyCF,GAvCEvO,GACA9Q,GACyB,mBAAlBA,EAAK8Q,UACM,OAAlB9Q,EAAK8Q,UACL9Q,EAAK8Q,UAEL3R,EAAe0W,YAAY,CACzBC,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,+BACJqC,eAAgB,mCAKpBgJ,GACA9Q,GACyB,mBAAlBA,EAAK8Q,UACM,OAAlB9Q,EAAK8Q,WACa,IAAlB9Q,EAAK8Q,UAEL3R,EAAe0W,YAAY,CACzBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,oBACJqC,eAAgB,wBAIlBgJ,GAAY9Q,GAA0B,OAAlBA,EAAK8Q,UAC3BqF,EAAemJ,UAAU,CACvB5C,MAAM,EACN9U,UAAW,kCACXN,KAAM,SACNiY,aAAa,EACbC,SAASzX,EAAAA,EAAAA,KAAC0X,EAAAA,EAAc,IACxBlF,SAASxS,EAAAA,EAAAA,KAAC2X,EAAAA,EAAc,MAI1B5O,GACA9Q,GACyB,kBAAlBA,EAAK8Q,UACM,OAAlB9Q,EAAK8Q,SACL,CACA,IAAI6O,EAGAA,EADG,OADC3f,EAAK8Q,SAAS8O,OAER,0BAGA,GAEdhgB,EAAYiW,YAAY,CACtBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAIka,EACJ7X,eAAgB6X,KAGtB,OAEAxgB,EAAe0W,YAAY,CACzBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,sBACJqC,eAAgB,yBAGtB,EAkRiCsX,CAAUtO,GACjCqH,UAAWA,GACX0H,eAAgBC,GAjQLA,KACrB1H,IAAa7K,IAAI,IACZA,KACAuS,KACF,EA6P8BD,CAAeC,GACtCrG,eAAgB3B,EAAuB2B,eACvCH,cAAexB,EAAuBwB,cACtCyG,cApLUA,KACpBrG,KACAe,IAAmB,EAmLTuF,UAAW,CAAC,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAChDC,eAAgB/gB,EAAK2I,cAAc,CACjCpC,GAAI,SACJqC,eAAgB,WAElBoY,cAAe,CACbtJ,IAAK,gBACL9U,MAAOlC,EAAY6Q,WAAWC,OAEhCjG,MAAO7K,EAAY4K,SAASC,OAxBvB,gBA0BP9C,EAAAA,EAAAA,MAAA,OAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,MAAK/B,SACjB2M,EAAOtQ,KAAIV,IACVuG,EAAAA,EAAAA,KAAA,OAAuBH,UAAU,sBAAqB/B,UACpD8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,GAAE/B,SAAA,EACfkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,GAAE/B,UACfkC,EAAAA,EAAAA,KAAA,OAAKH,UAAW,kBAAkB/B,UAChCkC,EAAAA,EAAAA,KAAA,MAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAIjE,EAAMG,MACVmG,eAAgBtG,EAAMG,eAK9BoG,EAAAA,EAAAA,KAAA,OAAKH,UAAW,GAAG/B,UACjBkC,EAAAA,EAAAA,KAAA,OAAKH,UAAW,oBAAoBpG,EAAM8R,aAAazN,SACpDjE,EAAAA,EAAQ+C,4BACPpF,EAAY,GAAGqF,YACfrF,EAAY,GAAGsF,cACfrD,EAAM+R,OACN,WAlBA/R,EAAMG,YA0BpBoG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,MAAK/B,SACjB6Q,EAAUxU,KAAIkP,IACbrJ,EAAAA,EAAAA,KAAA,OAAoBH,UAAU,sBAAqB/B,UACjD8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,GAAE/B,SAAA,EACfkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,GAAE/B,UACfkC,EAAAA,EAAAA,KAAA,OAAKH,UAAW,kBAAkB/B,UAChC8B,EAAAA,EAAAA,MAAA,MAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAI2L,EAAKyF,WACT/O,eAAgBsJ,EAAKyF,cAEvB9O,EAAAA,EAAAA,KAAA,OACEH,UAAW,oBAAoBwJ,EAAKkC,qBAAqBlC,EAAKkC,aAAazN,SAE1EuL,EAAK0F,oBAKd/O,EAAAA,EAAAA,KAAA,OAAKH,UAAW,GAAG/B,UACjBkC,EAAAA,EAAAA,KAAA,OAAKH,UAAW,oBAAoBwJ,EAAKkC,aAAazN,UACpDkC,EAAAA,EAAAA,KAAA,UACEqC,QAASA,IAzdfwM,KAClB,MAAO7K,EAAQC,GAAQqM,GAAahO,MAAM,KACpC3I,EAAQE,EAAAA,EAAQqK,cAAcF,GAEpC,IAAIoU,EAAS,CACX7P,UAAW,GAAGtE,KAAQtK,OACtB6O,QAAS,GAAGvE,KAAQtK,KAHN,IAAIiC,KAAKqI,EAAMtK,EAAO,GAAGiL,YAIvC6C,gBAEF,OAAQoH,GACN,IAAK,YACHuJ,EAAS,IACJA,EACHxe,MAAOzC,EAAK2I,cAAc,CACxBpC,GAAI,YACJqC,eAAgB,cAElB0I,SAAU,QAEZ,MACF,IAAK,gBACH2P,EAAS,IACJA,EACHxe,MAAOzC,EAAK2I,cAAc,CACxBpC,GAAI,gBACJqC,eAAgB,kBAElB0I,SAAU,QAEZ,MACF,IAAK,WACH2P,EAAS,IACJA,EACHxe,MAAOzC,EAAK2I,cAAc,CACxBpC,GAAI,WACJqC,eAAgB,aAElB0I,SAAU,UAEZ,MACF,IAAK,UACH2P,EAAS,IACJA,EACHxe,MAAOzC,EAAK2I,cAAc,CACxBpC,GAAI,UACJqC,eAAgB,YAElB0I,SAAU,MAKhB4G,GAAiB,GACjBK,EAAgB0I,EAAO,EAoagBC,CAAYhP,EAAKwF,KAChChP,UAAW,kBAAkBwJ,EAAKkC,aAAazN,SAE9CjE,EAAAA,EAAQ+C,4BACPpF,EAAY,GAAGqF,YACfrF,EAAY,GAAGsF,cACfuM,EAAK2F,UACL,aA3BF3F,EAAKwF,gBAuCvBc,IAAWV,KAAiB,OAANA,QAAM,IAANA,GAAAA,EAAQrH,MAAMjN,UACpCqF,EAAAA,EAAAA,KAAA,OAAKH,UAAU,mBAAkB/B,UAC/BkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,qBACHqC,eAAe,yBAIpB4P,IACC3P,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kBAAiB/B,UAC9BkC,EAAAA,EAAAA,KAACiK,EAAAA,EAAM,WAIT,ICj1BV,GAAehT,EAAAA,EAAAA,KAhCCC,IACd,MAAMC,GAAOqQ,EAAAA,EAAAA,KACPpQ,GAAiBC,EAAAA,EAAAA,YAAWC,IAC5BO,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,IACzB,SAAEwW,EAAQ,aAAE7G,EAAY,gBAAE6Q,GAAoBlhB,EAEpD,OACE4I,EAAAA,EAAAA,KAACkN,EAAAA,EAAY,CACXjB,YAAa9U,EAAK2I,cAAc,CAC9BpC,GAAI,SACJqC,eAAgB,WAElBiM,SAAUA,CAACmB,EAAKpT,EAAOqT,KACrBkL,EAAgBve,EAAM,EAExByT,QAAS,CACPC,MAAO,CACLC,aAAcY,EAASnU,KAAI8L,IAAG,CAC5BvI,GAAIuI,EAAIvI,GACR3D,MAAOkM,EAAIlM,WAGf4T,YAAY,GAEd5T,MAAO0N,EACPlI,KAAM,SACNoO,YAAY,EACZjL,MAAO7K,EAAY4K,SAASC,OAC5B,ICIN,GAAezL,EAAAA,EAAAA,KAhCCC,IACd,MAAMC,GAAOqQ,EAAAA,EAAAA,KACPpQ,GAAiBC,EAAAA,EAAAA,YAAWC,IAC5BO,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,IACzB,SAAEygB,EAAQ,aAAEC,EAAY,gBAAEC,GAAoBrhB,EAEpD,OACE4I,EAAAA,EAAAA,KAACkN,EAAAA,EAAY,CACXjB,YAAa9U,EAAK2I,cAAc,CAC9BpC,GAAI,SACJqC,eAAgB,WAElBiM,SAAUA,CAACmB,EAAKpT,EAAOqT,KACrBqL,EAAgB1e,EAAM,EAExByT,QAAS,CACPC,MAAO,CACLC,aAAc6K,EAASpe,KAAI8L,IAAG,CAC5BvI,GAAIuI,EAAIvI,GACR3D,MAAOkM,EAAIlM,WAGf4T,YAAY,GAEd5T,MAAOye,EACPjZ,KAAM,SACNoO,YAAY,EACZjL,MAAO7K,EAAY4K,SAASC,OAC5B,ICIN,GAAezL,EAAAA,EAAAA,KAhCGC,IAChB,MAAMC,GAAOqQ,EAAAA,EAAAA,KACPpQ,GAAiBC,EAAAA,EAAAA,YAAWC,IAC5BO,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,IACzB,WAAE4gB,EAAU,eAAE1R,EAAc,kBAAE2R,GAAsBvhB,EAE1D,OACE4I,EAAAA,EAAAA,KAACkN,EAAAA,EAAY,CACXjB,YAAa9U,EAAK2I,cAAc,CAC9BpC,GAAI,SACJqC,eAAgB,WAElBiM,SAAUA,CAACmB,EAAKpT,EAAOqT,KACrBuL,EAAkB5e,EAAM,EAE1ByT,QAAS,CACPC,MAAO,CACLC,aAAcgL,EAAWve,KAAI8L,IAAG,CAC9BvI,GAAIuI,EAAIvI,GACR3D,MAAOkM,EAAIlM,WAGf4T,YAAY,GAEd5T,MAAOiN,EACPzH,KAAM,SACNoO,YAAY,EACZjL,MAAO7K,EAAY4K,SAASC,OAC5B,ICGN,GAAezL,EAAAA,EAAAA,KA/BGC,IAChB,MAAMC,GAAOqQ,EAAAA,EAAAA,KACPpQ,GAAiBC,EAAAA,EAAAA,YAAWC,IAC5BO,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,IACzB,WAAE8gB,EAAU,eAAEC,EAAc,kBAAEC,GAAsB1hB,EAE1D,OACE4I,EAAAA,EAAAA,KAACkN,EAAAA,EAAY,CACXjB,YAAa9U,EAAK2I,cAAc,CAC9BpC,GAAI,SACJqC,eAAgB,WAElBiM,SAAUA,CAACmB,EAAKpT,EAAOqT,KACrB0L,EAAkB/e,EAAM,EAE1ByT,QAAS,CACPC,MAAO,CACLC,aAAckL,EAAWze,KAAI8L,IAAG,CAC9BvI,GAAIuI,EAAIvI,GACR3D,MAAOkM,EAAIlM,WAGf4T,YAAY,GAEd5T,MAAO8e,EACPtZ,KAAM,SACNoO,YAAY,EACZjL,MAAO7K,EAAY4K,SAASC,OAC5B,I,aC3BN,MA+VA,EA/VwBxL,IACtB,MAAMC,GAAOqQ,EAAAA,EAAAA,MACP,SAAEuR,GAAa7hB,EACfW,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,IACxBkhB,EAAOC,IAAY9gB,EAAAA,EAAAA,UAAS,KAC5B+gB,EAAMC,IAAWhhB,EAAAA,EAAAA,UAAS,KAC1ByU,EAAQwM,IAAajhB,EAAAA,EAAAA,WAAU,IAC/BqU,EAAMC,IAAWtU,EAAAA,EAAAA,WAAU,IAC3BkhB,EAAQC,IAAanhB,EAAAA,EAAAA,WAAU,IAC/BohB,EAAWC,IAAgBrhB,EAAAA,EAAAA,UAAS,KAErCshB,EAAW,CACf,CACE7f,MAAOzC,EAAK2I,cAAc,CACxBpC,GAAI,cACJqC,eAAgB,gBAElBR,KAAM,OACNsP,IAAK,kBAEP,CACEjV,MAAOzC,EAAK2I,cAAc,CAAEpC,GAAI,OAAQqC,eAAgB,SACxDR,KAAM,QACNsP,IAAK,WAEP,CACEjV,MAAOzC,EAAK2I,cAAc,CACxBpC,GAAI,iBACJqC,eAAgB,mBAElBR,KAAM,SACNsP,IAAK,sBAEP,CACEjV,MAAOzC,EAAK2I,cAAc,CAAEpC,GAAI,UAAWqC,eAAgB,YAC3DR,KAAM,SACNsP,IAAK,sBAEP,CACEjV,MAAOzC,EAAK2I,cAAc,CACxBpC,GAAI,YACJqC,eAAgB,cAElBR,KAAM,SACNsP,IAAK,gBAEP,CACEjV,MAAOzC,EAAK2I,cAAc,CAAEpC,GAAI,WAAYqC,eAAgB,aAC5DR,KAAM,SACNsP,IAAK,sBAGH6K,GAAc1hB,EAAAA,EAAAA,QAAO,MACrB2hB,EAAY,mBAiDlB1gB,EAAAA,EAAAA,YAAU,KACR,GAAI2T,GAAU,GAAKJ,GAAQ,GAAK6M,GAAU,GAAKzM,IAAWJ,EAAM,CAC9D,IAAIoN,EAAc,IAAIZ,GACtBY,EAAcA,EACXzf,KAAI,CAAC0f,EAAMvb,KACNA,IAAM+a,GAAUQ,EAAKlf,OAAS,IAChCkf,EAAKjN,GACHiN,EAAKjN,IACLiN,EAAKrN,IACL,IAAIqN,EAAKjN,MAAYiN,EAAKrN,IAAOsN,KAAK,IACxCD,EAAKrN,GAAQqN,EAAKrN,IAAS,MAEtBqN,KAER1f,KAAIkf,GAAUA,EAAOtd,QAAOge,GAAmB,OAAVA,MACxCd,EAASW,GACTnN,GAAS,GACT6M,GAAW,GACXF,GAAW,EACb,IACC,CAACxM,EAAQJ,EAAM6M,IAElB,MAUMW,EAAaxc,IACjBA,EAAEyc,gBAAgB,EAqDdC,EAASA,CAAC1c,EAAG+B,EAAM4a,KACvB,MAAMC,EAAcC,KAAKC,MAAM9c,EAAE+c,aAAaC,QAAQ,cACtD,IAAI,KAAEC,EAAI,EAAEnc,GAAM8b,EACdM,EAAc,GArDDC,MAsDJ,UAATpb,GAtDaob,EAuDUF,EAAzBC,EAtDmB,CACnBhZ,IAAOiZ,EAAI,eAAe,GAAMC,WAC9BlZ,IAAOiZ,EAAI,eAAehZ,OAAO,cACnCD,IAAOiZ,EAAI,eAAe,GAAMC,WAC9BlZ,IAAOiZ,EAAI,eAAehZ,OAAO,cACnCD,IAAOiZ,EAAI,eAAe,GAAMC,WAC9BlZ,IAAOiZ,EAAI,eAAehZ,OAAO,cACnCD,IAAOiZ,EAAI,eAAe,GAAMC,WAC9BlZ,IAAOiZ,EAAI,eAAehZ,OAAO,cAEnCD,IAAOiZ,EAAI,cAAc,GAAMC,WAC7BlZ,IAAOiZ,EAAI,cAAchZ,OAAO,cAClCD,IAAOiZ,EAAI,cAAc,GAAMC,WAC7BlZ,IAAOiZ,EAAI,cAAchZ,OAAO,cAClCD,IAAOiZ,EAAI,cAAc,GAAMC,WAC7BlZ,IAAOiZ,EAAI,cAAchZ,OAAO,cAClCD,IAAOiZ,EAAI,cAAc,GAAMC,WAC7BlZ,IAAOiZ,EAAI,cAAchZ,OAAO,cAElCD,IAAOiZ,EAAI,cAAc,GAAMC,WAC7BlZ,IAAOiZ,EAAI,cAAchZ,OAAO,cAClCD,IAAOiZ,EAAI,cAAc,GAAMC,WAC7BlZ,IAAOiZ,EAAI,cAAchZ,OAAO,cAClCD,IAAOiZ,EAAI,cAAc,GAAMC,WAC7BlZ,IAAOiZ,EAAI,cAAchZ,OAAO,cAClCD,IAAOiZ,EAAI,cAAc,GAAMC,WAC7BlZ,IAAOiZ,EAAI,cAAchZ,OAAO,cAElCD,IAAOiZ,EAAI,eAAe,GAAMC,WAC9BlZ,IAAOiZ,EAAI,eAAehZ,OAAO,cACnCD,IAAOiZ,EAAI,eAAe,GAAMC,WAC9BlZ,IAAOiZ,EAAI,eAAehZ,OAAO,cACnCD,IAAOiZ,EAAI,eAAe,GAAMC,WAC9BlZ,IAAOiZ,EAAI,eAAehZ,OAAO,cACnCD,IAAOiZ,EAAI,eAAe,GAAMC,WAC9BlZ,IAAOiZ,EAAI,eAAehZ,OAAO,cAEnCD,IAAOiZ,EAAI,gBAAgB,GAAMC,WAC/BlZ,IAAOiZ,EAAI,gBAAgBhZ,OAAO,cACpCD,IAAOiZ,EAAI,gBAAgB,GAAMC,WAC/BlZ,IAAOiZ,EAAI,gBAAgBhZ,OAAO,cACpCD,IAAOiZ,EAAI,gBAAgB,GAAMC,WAC/BlZ,IAAOiZ,EAAI,gBAAgBhZ,OAAO,cACpCD,IAAOiZ,EAAI,gBAAgB,GAAMC,WAC/BlZ,IAAOiZ,EAAI,gBAAgBhZ,OAAO,eACpC5F,QAAO0F,IAAiB,IAATA,IAAgB,IACI,gBASjB,SAATlC,EACTmb,EAAcD,EACI,WAATlb,IACTkb,EAAOA,EAAKjW,QAAQ,IAAK,IACzBkW,EAAc1gB,OAAOygB,IAAS,GAEhCjd,EAAEC,OAAO1D,MAAQ2gB,EACjBG,EAAWvc,EAAG6b,EAASO,EAAY,EAG/BG,EAAaA,CAACC,EAAOX,EAASpgB,KAClC,IAAIghB,EAAa,IAAI7B,GACrB6B,EAAaA,EAAW5gB,KAAI,CAAC8L,EAAK3H,KAC5Bwc,IAAUxc,IACZ2H,EAAIkU,GAAWpgB,GAEVkM,KAETkT,EAAQ4B,EAAW,EAGrB,OACEnb,EAAAA,EAAAA,MAAC+J,EAAAA,EAAK,IAAKzS,EAAOgG,MAAO,CAAE0M,OAAQ,KAAQ9L,SAAA,EACzCkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAME,OAAM,CAACC,aAAW,EAAAhM,UACvBkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMI,MAAK,CAAAjM,UACVkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,gCACHqC,eAAe,uCAIrBC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMK,KAAI,CACTnK,UAAW,mBACsB,SAA/BhI,EAAY4K,SAASC,MACjB,qBACA,sBACH5E,UAEH8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiB/B,SAAA,CAC5Bkb,EAAMre,QAgCNqF,EAAAA,EAAAA,KAAA,OAAKH,UAAU,wBAAuB/B,UACpC8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAW/B,SAAA,CACvB2b,EAAStf,KAAI,CAAC+b,EAAM5X,KACnB0B,EAAAA,EAAAA,KAAA,OAAaH,UAAU,UAAS/B,SAC7BoY,EAAKtc,OADE0E,KAIX0a,EAAM7e,KAAI,CAAC0f,EAAMvb,KAChBsB,EAAAA,EAAAA,MAAC+T,EAAAA,SAAc,CAAA7V,SAAA,CACZ+b,EAAKlf,OAAS,IACbiF,EAAAA,EAAAA,MAAA,OAAKC,UAAW,cAAc/B,SAAA,CAC3B+b,EAAK1f,KAAI,CAACsgB,EAAMO,KACfpb,EAAAA,EAAAA,MAAA,QAEElC,GAAIsd,EACJC,UAAU,OACVC,YAAa1d,GAxJnB0d,EAAC1d,EAAG2d,KACtB/B,EAAUpf,OAAOwD,EAAEC,OAAOC,KAC1BF,EAAE+c,aAAariB,QAAQ,YAAaijB,EAAO,EAuJjBD,CAAY1d,EAAG6c,KAAKe,UAAU,CAAEX,OAAMnc,IAAG0c,OAE3Cd,OAAQ1c,GAhKR6d,EAAC7d,EAAG2d,KAC5B,MAAM,EAAE7c,GAAM6c,EACd7B,EAAUtf,OAAOsE,IACjBmO,EAAQzS,OAAOwD,EAAEC,OAAOC,IAAI,EA6JS2d,CAAkB7d,EAAG,CAAEc,IAAG0c,MACvChB,WAAYxc,GAAKwc,EAAWxc,GAC5BqC,UAAU,OAAM/B,SAAA,CAEf2c,GACDza,EAAAA,EAAAA,KAAA,KACEqC,QAASA,IAxMlBiZ,EAACC,EAASxB,KAC3B,IAAIH,EAAc,IAAIZ,GACtBY,EAAcA,EAAYzf,KAAI,CAAC0f,EAAMvb,IAC/BA,IAAMid,EACD1B,EAAK9d,QAAO,CAACoG,EAAG6Y,IACdA,IAAMjB,IAGVF,IAETZ,EAASW,EAAY,EA8LoB0B,CAAWhd,EAAG0c,GAC7Bnb,UAAU,yBAbPmb,KAiBRnB,EAAKlf,OAAS,IACbqF,EAAAA,EAAAA,KAAA,QACEqC,QAASA,IA1NjByY,KAChB,IAAIlB,EAAc,IAAIZ,GACtBY,EAAcA,EAAYzf,KAAI,CAAC0f,EAAMvb,KAC/BA,IAAMwc,IACRjB,EAAO,IAEFA,KAETZ,EAASW,EAAY,EAkNkB4B,CAAUld,GACzBuB,UAAU,cACVI,MAAM,cAAanC,UAEnBkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,qBAKpB4Z,EAAStf,KAAI,CAAC+b,EAAMuF,KACnBzb,EAAAA,EAAAA,KAAA,OAAAlC,UACEkC,EAAAA,EAAAA,KAAA,SACET,KAAM2W,EAAK3W,KACXyM,SAAUxO,GACRqd,EAAWvc,EAAG4X,EAAKrH,IAAKrR,EAAEC,OAAO1D,OAEnCigB,WAAYxc,GAAKwc,EAAWxc,GAC5B0c,OAAQ1c,GAAK0c,EAAO1c,EAAG0Y,EAAK3W,KAAM2W,EAAKrH,KACvChP,UAAU,WARJ4b,OAlCOnd,WAvC3BsB,EAAAA,EAAAA,MAAA,OAAA9B,SAAA,EACE8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2B/B,SAAA,EACxCkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sBAAqB/B,UAClC8B,EAAAA,EAAAA,MAAA,SAAOuM,QAAQ,QAAOrO,SAAA,EACpBkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,mCACHqC,eAAe,qCACd,KACHC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,2BAGjBG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sBAAqB/B,UAClC8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6BAA4B/B,SAAA,EACzCkC,EAAAA,EAAAA,KAAA,QAAMH,UAAU,0BAAyB/B,UACvCkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,gBACHqC,eAAe,qBAGnBC,EAAAA,EAAAA,KAAA,SACET,KAAK,OACLmc,aAAcnC,EACdvN,SAAUxO,GAAKgc,EAAahc,EAAEC,OAAO1D,OACrC8F,UAAU,0BAKlBG,EAAAA,EAAAA,KAAA,YAAUtC,GAAG,QAAQ3F,IAAK2hB,EAAa7Z,UAAU,iBA8DrDD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAe/B,SAAA,CAC3Bkb,EAAMre,OAAS,IACdiF,EAAAA,EAAAA,MAAA,UAAQyC,QAASA,IAAM4W,EAAS,IAAKpZ,UAAU,mBAAkB/B,SAAA,EAC/DkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,4BAA6B,KAC1CG,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,OAAOqC,eAAe,YAG7CiZ,EAAMre,QAKNqF,EAAAA,EAAAA,KAAA,UAAQqC,QAASA,IAAM0W,EAASG,GAAOrZ,UAAU,cAAa/B,UAC5DkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,WAAWqC,eAAe,gBALjDC,EAAAA,EAAAA,KAAA,UAAQqC,QAASA,IArRXsZ,MAChB,IAAI5hB,EAAQ2f,EAAYxgB,QAAQa,MAChCA,EAAQA,EACLyK,QAAQ,iBAAkBmV,GAC1BrX,MAAMqX,GACN5d,QAAO6f,GAAKA,IACZzhB,KAAIuG,GAAKA,EAAE4B,MAAMiX,KAEpB,MAAMsC,EAAU9hB,EAAMI,KAAI,MACxB2hB,YAAa,GACbC,QAAS,GACTC,oBAAqB,GACrBC,YAAa,GACbC,MAAO,GACPC,mBAAoB,GACpBC,mBAAoB,GACpBC,aAAc,GACdC,kBAAmB,GACnBC,eAAgB,OAElBpD,EAAQ0C,GACR5C,EAASlf,EAAM,EAgQkB4hB,GAAa9b,UAAU,cAAa/B,UACzDkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,UAAUqC,eAAe,wBAUlD,ECGZ,GAAe9I,EAAAA,EAAAA,KAlVmBC,IAAU,IAADiX,EAAAqO,EACzC,MAAMplB,GAAiBC,EAAAA,EAAAA,YAAWC,IAC5BO,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,GACzBsW,GAAiB/W,EAAAA,EAAAA,YAAWgX,EAAAA,IAC5B,KAAElX,GAASD,GACX,oBACJiM,EAAmB,eACnB0V,EAAc,UACdzV,EAAS,WACTiJ,EAAU,WACVuM,GACExhB,GACGqlB,EAAqBC,IAA0BvkB,EAAAA,EAAAA,WAAS,IACxD8W,EAAQC,IAAa/W,EAAAA,EAAAA,UAAS,CAAC,IAC/BwX,EAAQC,IAAazX,EAAAA,EAAAA,WAAS,IAC9BwkB,EAAiBC,IAAsBzkB,EAAAA,EAAAA,UAAS,KAMhDiY,EAAWC,IAAgBlY,EAAAA,EAAAA,UALd,CAClB8D,MAAO,EACPiU,MAAO,GACPC,aAAc,KAIVwB,EAAYA,KAChB,MAAO3N,EAAQC,GAAQd,EAAoBb,MAAM,KAC3C3I,EAAQE,EAAAA,EAAQqK,cAAcF,GAC9BG,EAAanK,OAAOoJ,EAAUgB,wBAC9BC,EAAWrK,OAAOoJ,EAAUkB,sBAE5BC,EAAQ,IAAI3I,KAChB,GAAG5B,OAAOiK,MAASjK,OAAOL,MAAU0K,IAAWG,QAAQ,KAAM,MAEzDC,EAAW,GAAGF,EAAMvC,iBAAiBnI,EAAAA,EAAQ6K,aACjDH,EAAMI,WAAa,MAChB9K,EAAAA,EAAQ6K,aAAaH,EAAMK,aAGhC,IAAIC,EAAQN,EAAMO,QAAQP,EAAMQ,UADb,QAEnBF,EAAQ,IAAIjJ,KAAKiJ,GACjBA,EAAQ,IAAIjJ,KAAKiJ,EAAMG,QAAQb,IAC/B,MAIM0N,EAAU,oBAJC,GAAGhN,EAAM7C,iBAAiBnI,EAAAA,EAAQ6K,aACjDG,EAAMF,WAAa,MAChB9K,EAAAA,EAAQ6K,aAAaG,EAAMD,sBAEsBH,wBAA+BoU,IAErF3J,EAAU,CAAC,GACXU,GAAU,GACV,MAAMnT,EAAIqV,EAAeD,GACzB5J,QAAQC,IAAI,CAACzL,IAAI0L,MAAK4J,UACpB6K,EAAmB,IACnB1N,EAAU1N,EAAE,GAAGvJ,KAAK8Q,UACpB6G,GAAU,GACViN,EAAAA,GAAiB,GAAG3L,YAAY,GAAK,CACnCzD,MAAO,CACLC,aAAckL,GAEhBjL,YAAY,GAEdkP,EAAAA,GAAiB,GAAG3L,YAAY,GAAK,CACnCzD,MAAO,CACLC,aAAcrB,GAEhBsB,YAAY,GAEdkP,EAAAA,GAAiB,GAAG3L,YAAY,GAAGvD,YAAa,CAAI,GACpD,EAGEqK,EAAgBA,KACpBrG,GAAW,EAGPG,EAAiBD,IACrB,MAAMzJ,EAAW,IAAIC,SAUrB,OATAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OAChDP,EAASE,OAAO,YAAauU,EAAAA,GAAiB,GAAGzL,WACjDhJ,EAASE,OAAO,QAASuU,EAAAA,GAAiB,GAAG1L,OAC7C/I,EAASE,OAAO,QAAS8H,EAAUF,OACnC9H,EAASE,OAAO,QAAS8H,EAAUnU,OACnCmM,EAASE,OAAO,eAAgB8H,EAAUD,cACtC0B,GACFzJ,EAASE,OAAO,cAAeuJ,GAE1BjJ,EAAAA,EAAYC,KAAK,qCAAsCT,EAAS,EAgFnE0U,EAA0BD,EAAAA,GAAiB1iB,KAAI4iB,IACnD,MAAMhF,EAAM,CACVtH,OAAQ,CACNC,kBAAmBvZ,EAAK2I,cAAc,CACpCpC,GAAI,aACJqC,eAAgB,eAElB4N,YAAY,GAEdgD,OAAQ,CACNlX,MAAO,CACLwG,MAAO9I,EAAK2I,cAAc,CAAEpC,GAAI,QAASqC,eAAgB,UACzD6Q,OAAQxN,EAAUmD,mBAClBsK,SAAUzN,EAAUoD,qBACpBsK,WAAY,GAEdC,WAAY,CACVC,YAAa,QACbC,eAAgB,KAoBtB,OAhBA8L,EAAKvM,OAASuH,EACdgF,EAAK1L,eAAiB,CACpB,KACA,cACA,OACA,iBACA,UACA,YACA,mBACA,UACA,aACA,WACA,SACA,WACA,YACAlX,KAAImX,GAAMna,EAAK2I,cAAc,CAAEpC,GAAI4T,EAAIvR,eAAgBuR,MAClDyL,CAAI,IAgBPtJ,GAAe7c,EAAAA,EAAAA,KACf8c,EAASC,EAAAA,SACb,MACElG,MAAOgG,EAAaG,IAAI,SACxB/c,OAAQ4c,EAAaG,IAAI,aAE3B,CAACH,IAwBH,OArBAxa,EAAAA,EAAAA,YAAU,KACJya,EAAOjG,OAA0B,mBAAjBiG,EAAOjG,OAA8BiG,EAAO7c,QAC9DwZ,EAAa,CACXpU,MAAO,EACPiU,MAAO,GACPC,aAAcuD,EAAO7c,QAEzB,GACC,CAAC6c,KAEJza,EAAAA,EAAAA,YAAU,KACRoX,GAAaqD,IAAM,IACdA,EACEzX,MAAO,EAAGiU,MAAO,GAAIC,aAAc,MACvC,GACF,CAAChN,KAEJlK,EAAAA,EAAAA,YAAU,KACR0Y,GAAW,GACV,CAACvB,KAGFxQ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAU/B,SAAA,CACtB2e,IACCzc,EAAAA,EAAAA,KAACgd,EAAe,CACdnd,UAAU,kBACV8U,KAAM8H,EACN7H,OAAQA,IAAM8H,GAAuB,GACrC7H,KAAK,KACLC,WAAW,EACXiE,SAAU9gB,IACR2kB,EAAmB3kB,GACnBykB,GAAuB,EAAM,KAInC9c,EAAAA,EAAAA,MAAA,OAAKC,UAAU,GAAE/B,SAAA,EACfkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,WAAU/B,UACvBkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,YAAW/B,UACxBkC,EAAAA,EAAAA,KAACkV,EAAAA,EAAc,CACbC,UAAU,OACVC,MAAO,CAAET,KAAM,IAAKU,KAAM,KAC1BC,QAhEe/C,EAACrb,EAAOsb,KACjCxS,EAAAA,EAAAA,KAACyS,EAAAA,EAAO,CAAC/U,GAAG,mBAAmBmC,UAAU,aAAc3I,EAAK4G,SACzD0U,IA8DgBD,CACPrb,EACAC,EAAK2I,cAAc,CACjBpC,GAAI,gCACJqC,eAAgB,mCAGpBwV,YAAY,QAAOzX,UAEnBkC,EAAAA,EAAAA,KAAA,KACEqC,QAASA,IAAMqa,GAAwBD,GACvC5c,UAAU,gDAKjB8P,IACC3P,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kBAAiB/B,UAC9BkC,EAAAA,EAAAA,KAACiK,EAAAA,EAAM,MAGVgF,IACkB,QAAnBd,EAAA2F,OAAOC,KAAK9E,UAAO,IAAAd,OAAA,EAAnBA,EAAqBxT,QAAS,IACxB,OAANsU,QAAM,IAANA,GAAa,QAAPuN,EAANvN,EAAQrH,aAAK,IAAA4U,OAAP,EAANA,EAAe7hB,QAAS,EACtBmiB,EACGG,MAAK,CAACxgB,EAAGC,IAAMD,EAAEiB,GAAKhB,EAAEgB,KACxBvD,KAAI,CAAC+D,EAAGI,KACP0B,EAAAA,EAAAA,KAACmX,EAAAA,EAAW,CAEVzZ,GAAI,UACJyT,MAAOjT,EAAEiT,MACTX,OAAQtS,EAAEsS,OACVY,UAAWlT,EAAEkT,UACbC,eAAgBnT,EAAEmT,eAClBpC,OAAQA,EACRiC,YAAahT,EAAEgT,YACfkG,WAAW,sCACXC,UAAWtO,GA3NPA,KAChB,MAAM,OAAEuO,EAAM,KAAErf,GAAS8Q,EACzB,GAAe,MAAXuO,GAyCF,GAvCEvO,GACA9Q,GACyB,mBAAlBA,EAAK8Q,UACM,OAAlB9Q,EAAK8Q,UACL9Q,EAAK8Q,UAEL3R,EAAe0W,YAAY,CACzBC,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,+BACJqC,eAAgB,mCAKpBgJ,GACA9Q,GACyB,mBAAlBA,EAAK8Q,UACM,OAAlB9Q,EAAK8Q,WACa,IAAlB9Q,EAAK8Q,UAEL3R,EAAe0W,YAAY,CACzBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,oBACJqC,eAAgB,wBAIlBgJ,GAAY9Q,GAA0B,OAAlBA,EAAK8Q,UAC3BqF,EAAemJ,UAAU,CACvB5C,MAAM,EACN9U,UAAW,kCACXN,KAAM,SACNiY,aAAa,EACbC,SAASzX,EAAAA,EAAAA,KAAC0X,EAAAA,EAAc,IACxBlF,SAASxS,EAAAA,EAAAA,KAAC2X,EAAAA,EAAc,MAI1B5O,GACA9Q,GACyB,kBAAlBA,EAAK8Q,UACM,OAAlB9Q,EAAK8Q,SACL,CACA,IAAI6O,EAGAA,EADG,OADC3f,EAAK8Q,SAAS8O,OAER,0BAGA,GAEdhgB,EAAYiW,YAAY,CACtBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAIka,EACJ7X,eAAgB6X,KAGtB,OAEAxgB,EAAe0W,YAAY,CACzBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,sBACJqC,eAAgB,yBAGtB,EAgJmCsX,CAAUtO,GACjCqH,UAAWA,EACX0H,eAAgBC,GAjGPA,KACrB1H,GAAa7K,IAAI,IACZA,KACAuS,KACF,EA6FgCD,CAAeC,GACtCrG,eAAgBxT,EAAEwT,eAClBH,cAAerT,EAAEqT,cACjByG,cAAeA,EACf2E,gBAAiBA,EACjB1E,UAAW,CAAC,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IACrDC,eAAgB/gB,EAAK2I,cAAc,CACjCpC,GAAI,SACJqC,eAAgB,WAElBoY,cAAe,CACbtJ,IAAK,WACL9U,MAAOlC,EAAY6Q,WAAWC,OAEhCjG,MAAO7K,EAAY4K,SAASC,OAzBvBpE,MA6BX0B,EAAAA,EAAAA,KAAA,OAAKH,UAAU,mBAAkB/B,UAC/BkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,qBACHqC,eAAe,8BAKnB,I,uBC/UV,MAyeA,EAzeqB7I,IACnB,MAAMC,GAAOqQ,EAAAA,EAAAA,KACPpQ,GAAiBC,EAAAA,EAAAA,YAAWC,IAC5BO,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,GACzBsW,GAAiB/W,EAAAA,EAAAA,YAAWgX,EAAAA,IAC3B5M,EAAMuD,IAAW7M,EAAAA,EAAAA,UAAS,IAAIyD,OAC9BshB,EAAaC,IAAkBhlB,EAAAA,EAAAA,UAAS,KACxCilB,EAAUC,IAAellB,EAAAA,EAAAA,UAAS,KAClCqT,EAAQ8R,IAAanlB,EAAAA,EAAAA,UAAS,MAC9BoH,EAAMge,IAAWplB,EAAAA,EAAAA,WAAS,IAC1BqlB,EAAUC,IAAetlB,EAAAA,EAAAA,WAAS,IAClCmW,EAAUoP,IAAevlB,EAAAA,EAAAA,UAAS,KAClCygB,EAAY+E,IAAiBxlB,EAAAA,EAAAA,UAAS,KACtCylB,EAAMC,IAAW1lB,EAAAA,EAAAA,UAAS,KAE1BkU,EAAYyR,IAAiB3lB,EAAAA,EAAAA,UAAS,KACtC4lB,EAAQC,IAAa7lB,EAAAA,EAAAA,UAAS,KAC9B8lB,EAAQC,IAAa/lB,EAAAA,EAAAA,UAAS,KAC9BgmB,EAAWC,IAAgBjmB,EAAAA,EAAAA,WAAS,IACpCkmB,EAAWC,IAAgBnmB,EAAAA,EAAAA,WAAS,GACrComB,EAAU,SACVC,EAAU,CACd,CAAE,EAAGrnB,EAAK2I,cAAc,CAAEpC,GAAI,IAAKA,GAAI,OACvC,CAAE,EAAGvG,EAAK2I,cAAc,CAAEpC,GAAI,IAAKA,GAAI,OACvC,CAAE,EAAGvG,EAAK2I,cAAc,CAAEpC,GAAI,IAAKA,GAAI,OACvC,CAAE,EAAGvG,EAAK2I,cAAc,CAAEpC,GAAI,IAAKA,GAAI,OACvC,CAAE,EAAGvG,EAAK2I,cAAc,CAAEpC,GAAI,IAAKA,GAAI,OACvC,CAAE,EAAGvG,EAAK2I,cAAc,CAAEpC,GAAI,IAAKA,GAAI,OACvC,CAAE,EAAGvG,EAAK2I,cAAc,CAAEpC,GAAI,IAAKA,GAAI,OACvC,CAAE,EAAGvG,EAAK2I,cAAc,CAAEpC,GAAI,IAAKA,GAAI,OACvC,CAAE,EAAGvG,EAAK2I,cAAc,CAAEpC,GAAI,IAAKA,GAAI,OACvC,CAAE,SAAU6gB,GACZ,CAAE,EAAGpnB,EAAK2I,cAAc,CAAEpC,GAAI,IAAKA,GAAI,OACvC,CAAE,IAAK,KACP,CAAE+gB,EAAG,OA4CPxlB,EAAAA,EAAAA,YAAU,KACR,MAAMwD,EAlCYiiB,MAClB,MAAMtW,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EACJC,KAAK,6BAA8BT,GACnCD,MAAKW,GAAOA,EAAI7Q,KAAK8Q,WACrBC,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EA0BMyV,GACJhiB,EAxBciiB,MACpB,MAAMvW,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EACJC,KAAK,gCAAiCT,GACtCD,MAAKW,GAAOA,EAAI7Q,KAAK8Q,WACrBC,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EAgBM0V,GACJxc,EAdcyc,MACpB,MAAMxW,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EACJC,KAAK,oCAAqCT,GAC1CD,MAAKW,GAAOA,EAAI7Q,KAAK8Q,WACrBC,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EAMM2V,GACV3W,QAAQC,IAAI,CAACzL,EAAGC,EAAGyF,IAAIgG,MAAK3G,IAC1BA,EAAE,GAAG7G,OAAS,EACV+iB,EAAYlc,EAAE,IACdkc,EAAY,CAAC,CAAEhgB,GAAI,KAAM3D,MAAO,UACpCyH,EAAE,GAAG7G,OAAS,GAAK6G,EAAE,GAAG,GAAG9D,GAAKmgB,EAAQrc,EAAE,GAAG,GAAG9D,IAAMmgB,EAAQ,IAC9Drc,EAAE,GAAG7G,OAAS,EACVmjB,EAActc,EAAE,IAChBsc,EAAc,CAAC,CAAEpgB,GAAI,KAAM3D,MAAO,UACtCyH,EAAE,GAAG7G,OAAS,GAAK6G,EAAE,GAAG,GAAG9D,GAAKsgB,EAAUxc,EAAE,GAAG,GAAG9D,IAAMsgB,EAAU,IAClExc,EAAE,GAAG7G,OAAS,EACVgjB,EAAcnc,EAAE,IAChBmc,EAAc,CAAC,CAAEjgB,GAAI,KAAM3D,MAAO,UACtCyH,EAAE,GAAG7G,OAAS,GAAK6G,EAAE,GAAG,GAAG9D,GAAKwgB,EAAU1c,EAAE,GAAG,GAAG9D,IAAMwgB,EAAU,GAAG,GACrE,GACD,IAEH,MAAMW,EAAepd,IACnB,MAAOqd,EAAMC,EAAIC,GAAM,CACrBvd,EAAKO,cACLP,EAAKkD,WAAa,EAAI,EAAIlD,EAAKkD,WAAa,EAAI,IAAIlD,EAAKkD,WAAa,IACtElD,EAAKmD,UAAY,EAAInD,EAAKmD,UAAY,IAAInD,EAAKmD,aAGjD,MADmB,GAAGka,KAAQC,KAAMC,GACnB,EA8InB,OACEpf,EAAAA,EAAAA,MAAC+J,EAAAA,EAAK,IAAKzS,EAAOgG,MAAO,CAAE0M,OAAQ,KAASqV,cAAc,EAAMnhB,SAAA,EAC9DkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAME,OAAM,CAACC,aAAW,EAAAhM,UACvBkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMI,MAAK,CAAAjM,UACVkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,eAAeqC,eAAe,sBAGvDC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMK,KAAI,CACTnK,UAAW,oDACsB,SAA/BhI,EAAY4K,SAASC,MACjB,qBACA,sBACH5E,UAEH8B,EAAAA,EAAAA,MAAA,QAAMlC,GAAG,eAAewhB,SAAU1hB,GAAKA,EAAEyc,iBAAiBnc,SAAA,EACxDkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,GAAE/B,UACfkC,EAAAA,EAAAA,KAAA,SACET,KAAK,OACLM,UAAU,eACVoM,YAAa9U,EAAK2I,cAAc,CAC9BpC,GAAI,cACJqC,eAAgB,gBAElBiM,SAAUxO,GAAK2f,EAAe3f,EAAEC,OAAO1D,YAG3CiG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,oBAAmB/B,SAAE0N,KACpCxL,EAAAA,EAAAA,KAAA,OAAKH,UAAU,GAAE/B,UACfkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,eAAc/B,SAC1B0gB,EAAQrkB,KAAI,CAACglB,EAAO7gB,KACnB,MAAM8gB,EAAKxT,MAAM5R,OAAO8Z,OAAOC,KAAKoL,GAAO,KAEvCrL,OAAOC,KAAKoL,GAAO,GADnBnlB,OAAO8Z,OAAOC,KAAKoL,GAAO,IAExBE,EAAMvL,OAAO9Q,OAAOmc,GAAO,GACjC,OACEnf,EAAAA,EAAAA,KAAA,OAAaH,UAAU,8BAA6B/B,UAClDkC,EAAAA,EAAAA,KAAA,UACE4N,SAAUpC,EAAO8T,WAAWpZ,SAAS,MAAc,MAANkZ,EAC7C/c,QAASA,IAlLP8c,KACpB,IAAII,EAAW/T,EACM,kBAAV2T,IACTI,EAAYpB,EAAkC,GAAGoB,KAAYJ,IAArC,GAAG3T,IAAS2T,IACpCf,GAAa,IAED,MAAVe,IACFf,GAAa,GACoB,MAA7BmB,EAASC,UAAU,EAAG,KACxBD,EAAW,IAAMA,IAInBA,EAAS5kB,OAAS,GACW,MAA7B4kB,EAASC,UAAU,EAAG,KACrBD,EAASrZ,SAAS,OAEnBqZ,EAAWA,EAASC,UAAU,EAAGD,EAAS5kB,SAExC4kB,EAAS5kB,OAAS,GAAkC,MAA7B4kB,EAASC,UAAU,EAAG,KAC/CD,EAAW,IAAIA,KAEH,MAAVJ,IACFI,EAAW,IACXnB,GAAa,IAEXe,IAAUZ,IACZgB,EAAWA,EAAS5kB,OAAS,EAAI4kB,EAASE,MAAM,GAAI,GAAK,IACrDF,EAAS5kB,OAAS,GAA6C,MAAxC4kB,EAASE,MAAMF,EAAS5kB,OAAS,KAC1D4kB,EAAWA,EAASE,MAAM,GAAI,GAC9BrB,GAAa,KAGjBd,EAAUiC,EAAS,EAiJcG,CAAcN,GAC7BO,wBAAyB,CAAEC,OAAQP,MAJ7B/gB,EAMJ,SAKdsB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAU/B,SAAA,EACvBkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,8CAA6C/B,UAC1DkC,EAAAA,EAAAA,KAAC6f,EAAAA,EAAc,CACb7T,SAAUjS,IACRiL,EAAQjL,EAAM,EAEhBA,MAAO0H,EACPE,OAAQ,UACRme,UAAQ,EACRC,UAAW,KACXlgB,UAAU,8BAGdG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,aAAY/B,UACzB8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2B/B,SAAA,EACxCkC,EAAAA,EAAAA,KAAA,OAAKqC,QAASA,IAAMob,GAAaD,GAAW3d,UAAU,GAAE/B,SACrD0f,EACGrmB,EAAK2I,cAAc,CACjBpC,GAAI,YACJqC,eAAgB,cAElB5I,EAAK2I,cAAc,CACjBpC,GAAI,aACJqC,eAAgB,kBAGxBC,EAAAA,EAAAA,KAAA,KACEqC,QAASA,IAAMob,GAAaD,GAC5B3d,UAAW,sBACT2d,EAAW,QAAU,qBAM/Bxd,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAM/B,UACnBkC,EAAAA,EAAAA,KAAA,SACET,KAAK,OACLM,UAAU,eACVoM,YAAY,WACZD,SAAUxO,GAAK6f,EAAY7f,EAAEC,OAAO1D,YAGxCiG,EAAAA,EAAAA,KAAA,OAAAlC,SACGwQ,EAAS3T,OAAS,GACnB0R,EAAW1R,OAAS,GACpBie,EAAWje,OAAS,GAClBiF,EAAAA,EAAAA,MAAAM,EAAAA,SAAA,CAAApC,SAAA,CACG0f,GACC5d,EAAAA,EAAAA,MAAAM,EAAAA,SAAA,CAAApC,SAAA,EACEkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAM/B,UACnB8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mDAAkD/B,SAAA,EAC/DkC,EAAAA,EAAAA,KAAA,OAAKqC,QAASA,IAAMkb,GAAQ,GAAO1d,UAAU,GAAE/B,UAC7CkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,UACHqC,eAAe,eAGnBC,EAAAA,EAAAA,KAACggB,EAAAA,EAAM,CACLC,QAASrnB,SAASC,gBAAgBqE,MAAMpE,iBACtC,wBAEFonB,SAAS,OACTC,aAAa,EACbC,eAAe,EACfjjB,OAAQ,GACR7E,MAAO,GACP0T,SAAUA,IAAMuR,GAAShe,GACzB8S,SAAkB,IAAT9S,KAEXS,EAAAA,EAAAA,KAAA,OAAKqC,QAASA,IAAMkb,GAAQ,GAAQ1d,UAAU,GAAE/B,UAC9CkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,SACHqC,eAAe,cAGnBC,EAAAA,EAAAA,KAACggB,EAAAA,EAAM,CACLC,QAASrnB,SAASC,gBAAgBqE,MAAMpE,iBACtC,wBAEFonB,SAAS,OACTC,aAAa,EACbC,eAAe,EACfjjB,OAAQ,GACR7E,MAAO,GACP0T,SAAUA,IAAMuR,GAAShe,GACzB8S,SAAkB,IAAT9S,UAIfS,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAM/B,UACnBkC,EAAAA,EAAAA,KAACkN,EAAAA,EAAY,CAEXjB,YAAa9U,EAAK2I,cAAc,CAC9BpC,GAAI,SACJqC,eAAgB,WAElBiM,SAAUA,CAACmB,EAAKpT,EAAOqT,KACrByQ,EAAQ9jB,EAAM,EAEhByT,QAAS,CACPC,MAAO,CACLC,aAAcY,EAASnU,KAAI8L,IAAG,CAC5BvI,GAAIuI,EAAIvI,GACR3D,MAAOkM,EAAIlM,WAGf4T,YAAY,GAEd5T,MAAO6jB,EACPre,KAAM,SACNoO,YAAY,EACZjL,MAAO7K,EAAY4K,SAASC,OApBvB,SAyBX1C,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAM/B,UACnBkC,EAAAA,EAAAA,KAACkN,EAAAA,EAAY,CAEXjB,YAAa9U,EAAK2I,cAAc,CAC9BpC,GAAI,SACJqC,eAAgB,WAElBiM,SAAUA,CAACmB,EAAKpT,EAAOqT,KACrB8Q,EAAUnkB,EAAM,EAElByT,QAAS,CACPC,MAAO,CACLC,aAAckL,EAAWze,KAAI8L,IAAG,CAC9BvI,GAAIuI,EAAIvI,GACR3D,MAAOkM,EAAIlM,WAGf4T,YAAY,GAEd5T,MAAOkkB,EACP1e,KAAM,SACNoO,YAAY,EACZjL,MAAO7K,EAAY4K,SAASC,OApBvB,MAwBX1C,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAM/B,UACnBkC,EAAAA,EAAAA,KAACkN,EAAAA,EAAY,CAEXjB,YAAa9U,EAAK2I,cAAc,CAC9BpC,GAAI,SACJqC,eAAgB,WAElBiM,SAAUA,CAACmB,EAAKpT,EAAOqT,KACrB4Q,EAAUjkB,EAAM,EAElByT,QAAS,CACPC,MAAO,CACLC,aAAcrB,EAAWlS,KAAI8L,IAAG,CAC9BvI,GAAIuI,EAAIvI,GACR3D,MAAOkM,EAAIlM,WAGf4T,YAAY,GAEd5T,MAAOgkB,EACPxe,KAAM,SACNoO,YAAY,EACZjL,MAAO7K,EAAY4K,SAASC,OApBvB,SA/YnB1C,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kBAAiB/B,UAC9BkC,EAAAA,EAAAA,KAACiK,EAAAA,EAAM,SA0aLjK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAM/B,UACnBkC,EAAAA,EAAAA,KAAA,UACE4N,WAAY5T,OAAOwR,GAAU,GAAK0R,IAAgBmB,GAClDhc,QAASA,IAvUDge,MAClB/B,GAAa,GACb,MAAMvR,EAAW,CACfoE,MAAOqM,EAAW,iBAAmB,2BACrC8C,WAAY9C,EACR,CACE,CACE+C,WAAY,KACZC,cAAe3oB,EAAY6Q,WAAWC,MACtC4B,aAAc2S,EACd9S,eAAgBoB,EAChBrB,oBAAqB,EACrBqH,aAAcjS,EAAO,KAAO,KAC5BkS,aAAcoN,EAAapd,GAC3Bgf,iBAAkB1C,EAClB2C,aAAc9C,EACdlI,iBAAkB0H,IAGtB,CACE,CACElB,MAAO,KACPyE,SAAU9oB,EAAY6Q,WAAWC,MACjC4T,eAAgBW,EAChBnB,QAAS8C,EAAapd,GACtB0a,mBAAoB,EACpBC,mBAAoB,EACpBC,aAAc7Q,EACd8Q,kBAAmB,EACnBL,YAAagC,EACb2C,eAAgB7C,EAChBjC,YAAasB,EACbyD,sBAAuB,KAI3BzY,EAAW,IAAIC,SACrBzP,SAASkoB,eAAe,gBAAgBC,QACxC3Y,EAASE,OAAO,WAAY+R,KAAKe,UAAUrO,IAC3CnE,EAAAA,EACGC,KAAK,sCAAuCT,GAC5CD,MAAKY,IACJ,MAAM,KAAE9Q,GAAS8Q,EAEfA,GACA9Q,GACyB,mBAAlBA,EAAK8Q,UACM,OAAlB9Q,EAAK8Q,UACL9Q,EAAK8Q,UAEL3R,EAAe0W,YAAY,CACzBC,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,+BACJqC,eAAgB,mCAKpBgJ,GACA9Q,GACyB,mBAAlBA,EAAK8Q,UACM,OAAlB9Q,EAAK8Q,WACa,IAAlB9Q,EAAK8Q,UAEL3R,EAAe0W,YAAY,CACzBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,oBACJqC,eAAgB,wBAIlBgJ,GAAY9Q,GAA0B,OAAlBA,EAAK8Q,WAC3BqF,EAAemJ,UAAU,CACvB5C,MAAM,EACN9U,UAAW,kCACXN,KAAM,SACNiY,aAAa,EACbC,SAASzX,EAAAA,EAAAA,KAAC0X,EAAAA,EAAc,IACxBlF,SAASxS,EAAAA,EAAAA,KAAC2X,EAAAA,EAAc,MAE1BzgB,EAAM0d,QAAO,IAEf0I,EAAU,KACVH,EAAe,IACfE,EAAY,IACmC,MAA3CzkB,SAASkoB,eAAe,iBAC1BloB,SAASkoB,eAAe,gBAAgBC,OAC1C,IAED/X,OAAMC,IACL7R,EAAe0W,YAAY,CACzBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,sBACJqC,eAAgB,0BAGpBmJ,QAAQC,IAAIF,EAAM,IAEnBqJ,SAAQ,IAAMgM,GAAa,IAAO,EAiOZ+B,GACfxgB,UAAU,uBAAsB/B,SAE/BugB,GACCre,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wCAEbG,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,SAASqC,eAAe,sBAMjD,ECzbZ,EAnDkB7I,IAChB,MAAM,UAAEkM,GAAclM,GACf8pB,EAAMC,IAAW9oB,EAAAA,EAAAA,UAAS,GAEjC,IAAI+oB,EAAiB,GADRlnB,OAAOoJ,EAAU+d,SACJ,MAE1BloB,EAAAA,EAAAA,YAAU,KACJe,OAAOoJ,EAAU+d,SAAW,GAC9BC,GACF,GACC,CAAChe,EAAU+d,UAEd,MAAMC,EAAaA,KACjB,MAAMpiB,EAAOC,KAAKC,MAAMgiB,EAAU,GAAK,GAAK,IACtCG,EAAYpiB,KAAKC,MAAMgiB,EAAiB,MAAPliB,GACjCsiB,EAAQriB,KAAKC,MAAMmiB,EAAY,MAC/BE,EAActiB,KAAKC,MAAMmiB,EAAoB,KAARC,GACrCE,EAAUviB,KAAKC,MAAMqiB,EAAc,IACnCE,EAAmBP,EAAU,GAC7BQ,EACJC,EAAI3iB,GACJ,IACA2iB,EAAIL,GACJ,IACAK,EAAIH,GACJ,IACAG,EAAIF,GACU,IAAZP,EACFU,EAAeR,GAEfF,IAEFD,EAAQS,GACRrlB,WAAW+kB,EAAY,IAAK,EAGxBQ,EAAiBA,KACrBC,aAAaT,EAAW,EAGpBO,EAAM/F,GACHA,EAAI,GAAK,IAAMA,EAAIA,EAG5B,OAAO5b,EAAAA,EAAAA,KAAA,QAAAlC,SAAOkjB,GAAY,ECyL5B,EA9N2B9pB,IACzB,MAAMW,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,IACxB6X,EAAQC,IAAazX,EAAAA,EAAAA,WAAS,IAC9B2pB,EAAaC,IAAkB5pB,EAAAA,EAAAA,WAAS,IACxC6pB,EAAcC,IAAmB9pB,EAAAA,EAAAA,WAAS,IAC1CiL,EAAWC,IAAgBlL,EAAAA,EAAAA,UAAS,CAAC,IACrC+pB,EAAUC,IAAehqB,EAAAA,EAAAA,UAAS,IACnC0X,EAAM,IAAIjU,MAChB3C,EAAAA,EAAAA,YAAU,KACR2W,GAAU,GACV,MAAMnT,EAAImiB,IACV3W,QAAQC,IAAI,CAACzL,IAAI0L,MAAK3G,IACpB,MAAMvJ,EAAOuJ,EAAE,GACf2gB,EAAYlqB,GACZ2X,GAAU,EAAM,GAChB,GACD,IAEH,MAAMwS,EAAaA,KAEfpiB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kBAAiB/B,UAC9BkC,EAAAA,EAAAA,KAACiK,EAAAA,EAAM,MAuFP2U,EAAgBA,KACpB,MAAMxW,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EACJC,KAAK,oCAAqCT,GAC1CD,MAAKW,GAAOA,EAAI7Q,KAAK8Q,WACrBC,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EAEN,OACErJ,EAAAA,EAAAA,MAAC+J,EAAAA,EAAK,IAAKzS,EAAOgG,MAAO,CAAE0M,OAAQ,KAAQ9L,SAAA,EACzCkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAME,OAAM,CAACC,aAAW,EAAAhM,UACvBkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMI,MAAK,CAAAjM,UACVkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,2BACHqC,eAAe,kCAIrBH,EAAAA,EAAAA,MAAC+J,EAAAA,EAAMK,KAAI,CACTnK,UAAW,mBACsB,SAA/BhI,EAAY4K,SAASC,MACjB,qBACA,sBACH5E,SAAA,CAEF6R,EACCyS,KAEApiB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,MAAK/B,SACjBokB,GACCA,EAASvnB,OAAS,GAClBunB,EAAS/nB,KAAI,CAACkoB,EAAM/jB,KAClBsB,EAAAA,EAAAA,MAAA,OAEEyC,QAASA,IAtHIub,KAC3B,MAAMxV,EAAW,IAAIC,SAMrB,OALAD,EAASE,OAAO,OAAQsV,GACxBxV,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OAChDtF,EAAa,CAAC,GACd0e,GAAe,GACfE,EAAgBrE,GACThV,EAAAA,EACJC,KAAK,uCAAwCT,GAC7CD,MAAKW,IACJ,MAAMiP,EAAMjP,EAAI7Q,KAAK8Q,SAAS,GAE9B,IAAIR,EAAYwP,EAAI3T,uBACpBmE,EAAY1O,EAAAA,EAAQuL,UAClB,IAAIxJ,KACF,GAAGiU,EAAI7N,iBAAiB6N,EAAIlL,WAAa,KAAK4D,IAAY/D,QACxD,KACA,OAGH,GAEH,IAAK8d,EAAOC,EAAKC,GAAO,CACtBja,EAAUvG,cACVuG,EAAU5D,WAAa,EACvB4D,EAAU3D,YAEX2d,EAAKC,GAAO,CAACD,EAAM,GAAK,IAAIA,IAAQA,EAAKC,EAAM,GAAK,IAAIA,IAAQA,GACjEja,EAAY,GAAG+Z,KAASC,KAAOC,IAE/B,IAAIha,EAAUuP,EAAIzT,qBAClBkE,EAAU,IAAI5M,KACZ,GAAGiU,EAAI7N,iBAAiB6N,EAAIlL,WAAa,KAAK6D,IAAUhE,QACtD,KACA,MAGJ,IAAKie,EAAOC,EAAKC,GAAO,CACtBna,EAAQxG,cACRwG,EAAQ7D,WAAa,EACrB6D,EAAQ5D,YAET8d,EAAKC,GAAO,CAACD,EAAM,GAAK,IAAIA,IAAQA,EAAKC,EAAM,GAAK,IAAIA,IAAQA,GACjEna,EAAU,GAAGia,KAASC,KAAOC,IAE7B,IAAIzd,EAAU6S,EAAI5S,yBAClBD,EAAUrL,EAAAA,EAAQuL,UAChB,IAAIxJ,KACF,GAAGiU,EAAI7N,iBAAiB6N,EAAIlL,WAAa,KAAKO,IAAUV,QACtD,KACA,MAGJ,GAEF,IAAKoe,EAAOC,EAAKC,GAAO,CACtB5d,EAAQlD,cACRkD,EAAQP,WAAa,EACrBO,EAAQN,YAETie,EAAKC,GAAO,CAACD,EAAM,GAAK,IAAIA,IAAQA,EAAKC,EAAM,GAAK,IAAIA,IAAQA,GACjE5d,EAAU,GAAG0d,KAASC,KAAOC,IAE7B,IAAI3B,EAAU,IAAIvlB,KAAKsJ,GAAW,IAAItJ,KACtCulB,EAAUliB,KAAK8jB,IAAI5B,GACnBA,EAAUliB,KAAKE,KAAKgiB,EAAO,OAC3B,MAAMlpB,EAAO,CACX+qB,WAAYjL,EAAIjR,mBAChBmc,SAAUlL,EAAImL,iBACd3a,YACAC,UACAtD,UACAic,WAEF9d,EAAapL,GACb8pB,GAAe,EAAM,IAEtB/Y,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EAuCyBka,CAAqBd,EAAK3kB,IACzCmC,UAAW,kCACTmiB,IAAiBK,EAAK3kB,GAAK,SAAW,IACrCI,SAAA,EAEHkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,0BACZwiB,EAAKtoB,QAPDuE,OAYdwjB,EACGM,IACAtO,OAAOC,KAAK3Q,GAAWzI,OAAS,IAC9BiF,EAAAA,EAAAA,MAAAM,EAAAA,SAAA,CAAApC,SAAA,EACEkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,mBAAkB/B,SAAEsF,EAAU6f,YAC7CrjB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6B/B,SAAA,EAC1CkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,eAAc/B,UAC3BkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,aACHqC,eAAe,kBAGnBC,EAAAA,EAAAA,KAAA,OAAAlC,SAAMsF,EAAU4f,cAChBpjB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAe/B,SAAA,EAC5B8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAO/B,SAAA,EACpBkC,EAAAA,EAAAA,KAAA,SAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,YACHqC,eAAe,iBAGnBC,EAAAA,EAAAA,KAAA,OAAAlC,SAAMsF,EAAUmF,gBAElB3I,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAO/B,SAAA,EACpBkC,EAAAA,EAAAA,KAAA,SAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,UACHqC,eAAe,eAGnBC,EAAAA,EAAAA,KAAA,OAAAlC,SAAMsF,EAAUoF,iBAGpB5I,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiB/B,SAAA,EAC9B8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAO/B,SAAA,EACpBkC,EAAAA,EAAAA,KAAA,SAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,UACHqC,eAAe,eAGnBC,EAAAA,EAAAA,KAAA,OAAAlC,SAAMsF,EAAU8B,cAElBtF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAO/B,SAAA,EACpBkC,EAAAA,EAAAA,KAAA,SAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,gBACHqC,eAAe,qBAGnBC,EAAAA,EAAAA,KAAA,OAAAlC,UACEkC,EAAAA,EAAAA,KAACojB,EAAS,CAAChgB,UAAWA,uBAQlC,EChLZ,EA1CuBlM,IACrB,MAAM,OAAE0d,EAAM,MAAEyO,GAAUnsB,EACpBW,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,GAC/B,OACE8H,EAAAA,EAAAA,MAAC+J,EAAAA,EAAK,IAAKzS,EAAOgG,MAAO,CAAE0M,OAAQ,KAAQ9L,SAAA,EACzCkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAME,OAAM,CAACC,aAAW,EAAAhM,UACvBkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMI,MAAK,CAAAjM,UACVkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,oBACHqC,eAAe,2BAIrBC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMK,KAAI,CACTnK,UAAW,mBACsB,SAA/BhI,EAAY4K,SAASC,MACjB,qBACA,sBACH5E,UAEH8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iCAAgC/B,SAAA,EAC7CkC,EAAAA,EAAAA,KAAA,OAAAlC,UACEkC,EAAAA,EAAAA,KAAA,UAAQqC,QAASA,IAAMghB,IAASxjB,UAAU,cAAa/B,UACrDkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,QAAQqC,eAAe,eAGhDC,EAAAA,EAAAA,KAAA,OAAAlC,UACEkC,EAAAA,EAAAA,KAAA,UAAQqC,QAASA,IAAMuS,IAAU/U,UAAU,oBAAmB/B,UAC5DkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,WAAWqC,eAAe,wBAKjD,E,mCC5BZ,MA8SA,GA9SyB7I,IACvB,MAAMC,GAAOqQ,EAAAA,EAAAA,KACP3P,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,GACzBwrB,EAAW,QACXC,EAAgB,KACfC,EAAcC,IAAmBtrB,EAAAA,EAAAA,UAAS,CAAC,IAC3CF,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAC3BurB,EAAiB,CACrB,CACEnD,WAAY,OACZhW,aAAc,eACdH,eAAgB,IAChBD,oBAAqB,EACrBqH,aAAc,KACdC,aAAc/P,IAAO,IAAI9F,MAAQ+F,OAAO,cAAc2d,WACtDmB,iBAAkB,gBAClBC,aAAc,YACdhL,iBAAkB,wBAEpB,CACE6K,WAAY,OACZhW,aAAc,gBACdH,eAAgB,IAChBD,oBAAqB,EACrBqH,aAAc,KACdC,aAAc/P,IAAO,IAAI9F,MAAQ+F,OAAO,cAAc2d,WACtDmB,iBAAkB,gBAClBC,aAAc,YACdhL,iBAAkB,0BAqJtB,OACE9V,EAAAA,EAAAA,MAAC+J,EAAAA,EAAK,IAAKzS,EAAOgG,MAAO,CAAE0M,OAAQ,KAAQ9L,SAAA,EACzCkC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAME,OAAM,CAACC,aAAW,EAAAhM,UACvB8B,EAAAA,EAAAA,MAAC+J,EAAAA,EAAMI,MAAK,CAAAjM,SAAA,EACVkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,aAAaqC,eAAe,gBACjDH,EAAAA,EAAAA,MAAA,MAAIC,UAAU,OAAM/B,SAAA,CAAC,KAEnB8B,EAAAA,EAAAA,MAAA,SAAOC,UAAU,OAAM/B,SAAA,EACrBkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,QAAQqC,eAAe,UAAU,IAAE,IACvD,YAEHH,EAAAA,EAAAA,MAAA,SAAOC,UAAU,OAAM/B,SAAA,EACrBkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,UAAUqC,eAAe,YAAY,IAAE,IAC3D,YAEHH,EAAAA,EAAAA,MAAA,SAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,OAAOqC,eAAe,SAAS,SAAO,QAE7DH,EAAAA,EAAAA,MAAA,SAAOC,UAAU,OAAM/B,SAAA,EACrBkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,OAAOqC,eAAe,SAAU,KACrDC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,OAAOqC,eAAe,SAAS,IACnD,iBACK,aAKdC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAMK,KAAI,CACTnK,UAAW,uBACsB,SAA/BhI,EAAY4K,SAASC,MACjB,qBACA,sBACH5E,UAEH8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAU/B,SAAA,EACvBkC,EAAAA,EAAAA,KAAC2jB,GAAAA,GAAQ,CACPC,OAAO,uDACPC,QAASP,EACTpJ,OA3HKA,CAAC4J,EAAeC,EAAeC,KA5D1BC,MA6DdH,EAAcnpB,OAAS,IACzB8oB,EAAgBK,EAAc,KA9DdG,EA+DJH,EAAc,GA9DrB,IAAI7b,SAAQ,CAACic,EAASC,KAC3B,MAAMC,EAAQH,EACRI,EAAS,IAAIC,WACnBD,EAAOE,WAAWH,GAClBC,EAAOG,OAAShnB,IACd,MAAMwb,EAAQ,GAGRyL,EAFUjnB,EAAEC,OAAOinB,OAEIpiB,MAAM,WAAWvG,QAAO6f,GAAW,KAANA,IACpD+I,EAAUF,EAAa,GAAGniB,MAAM,KAChCsiB,EAAYH,EACf1oB,QAAO,CAAC+J,EAAGxH,IAAY,IAANA,IACjBvC,QAAOkK,GAA6B,SAAtBA,EAAI3D,MAAM,KAAK,KAEhC,GAAI8hB,EAAMvP,MAAQyO,EAChB,GAAIsB,EAAUjqB,QAAU4oB,EAAe,CACrC,IAAK,IAAIjlB,EAAI,EAAGA,EAAIsmB,EAAUjqB,OAAQ2D,IAAK,CACzC,MAAMrG,EAAO2sB,EAAUtmB,GAAGgE,MAAM,iCAChC,GAAIrK,EAAK0C,SAAWgqB,EAAQhqB,OAAQ,CAClC,MAAMkqB,EAAO,GACb,IAAK,IAAI7J,EAAI,EAAGA,EAAI2J,EAAQhqB,OAAQqgB,IAClC6J,EAAKxa,KAAK,CACR,CAACsa,EAAQ3J,IAAK/iB,EAAK+iB,GAChBxW,QAAQ,MAAO,IACfsgB,WAAW,IAAK,MAGvB,MAAMC,EAASjR,OAAOkR,OAAO,CAAC,KAAMH,GACpC7L,EAAM3O,KAAK0a,EACb,CACF,CACAb,EAAQlL,EACV,MACEmL,EACE,IAAIc,MACF,GAAG9tB,EAAK2I,cAAc,CACpBpC,GAAI,uBACJqC,eAAgB,uCAMxBokB,EACE,IAAIc,MACF,GAAG9tB,EAAK2I,cAAc,CACpBpC,GAAI,qBACJqC,eAAgB,qCAIxB,EAEFskB,EAAOa,QAAU1nB,IACf2mB,EAAO3mB,EAAE,CACV,KAQE2K,MAAKW,IACJjR,EAAYiW,YAAY,CACtBC,QAAS,GAAGjF,EAAInO,UAAUxD,EAAK2I,cAAc,CAC3CpC,GAAI,wBACJqC,eAAgB,4BAElBolB,UAAW,MAEbjtB,EAAQ4Q,EAAI,IAEbE,OAAMxL,IACLtF,EAAQ,IACRL,EAAYiW,YAAY,CACtBvO,KAAM,QACNyO,KAAM,qBACND,QAASvQ,GACT,IAER,EAsGQqC,UAAU,cAAa/B,SAEtBvE,IAAkE,IAAjE,aAAE6rB,EAAY,cAAEC,EAAa,aAAEC,EAAY,aAAEC,GAAchsB,EACvDisB,EAAU,kBACVvZ,GACFjM,EAAAA,EAAAA,KAAA,OAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,gBACHqC,eAAe,oBA0BrB,OAtBIulB,IACFE,EAAU,GAAGA,eACbvZ,GACEjM,EAAAA,EAAAA,KAAA,OAAKH,UAAU,iBAAgB/B,UAC7BkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,sBACHqC,eAAe,2BAKnBwlB,IACFC,EAAU,GAAGA,cACbvZ,GACEjM,EAAAA,EAAAA,KAAA,OAAKH,UAAU,eAAc/B,UAC3BkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,qBACHqC,eAAe,2BAMrBH,EAAAA,EAAAA,MAAA,UAASwlB,IAAgBvlB,UAAW,GAAG2lB,UAAgB1nB,SAAA,EACrDkC,EAAAA,EAAAA,KAAA,YAAWqlB,MACVpZ,IACG,IAIX6H,OAAOC,KAAKyP,GAAc7oB,OAAS,IAClCqF,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kBAAiB/B,UAC9B8B,EAAAA,EAAAA,MAAA,SAAOC,UAAU,WAAU/B,SAAA,EACzBkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,4BACZ2jB,EAAaiC,MACdzlB,EAAAA,EAAAA,KAAA,SAAOH,UAAU,OAAM/B,UACrB8B,EAAAA,EAAAA,MAAA,MAAA9B,SAAA,CAAI,IAnJA4nB,KAClB,MAAMC,GAAMD,EAAQ,KAAO,MAAMpf,QAAQ,GACzC,GAAIqf,EAAK,EACP,MAAO,GAAGA,OAGV,MAAO,IADKD,EAAQ,MAAMpf,QAAQ,OAEpC,EA4IoBsf,CAAYpC,EAAa3O,MAAM,eAK7CjV,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gCAA+B/B,SAAA,EAC5CkC,EAAAA,EAAAA,KAAA,UAAQH,UAAU,sDAAqD/B,UACrE8B,EAAAA,EAAAA,MAAC+W,EAAAA,EAAa,CACZC,MAAO8M,EACP5M,SAAU,gCAAgChZ,SAAA,EAE1CkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,6BACbG,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,sBACHqC,eAAe,8BAKnBC,EAAAA,EAAAA,KAAA,UACE4N,UAAW3V,EAAK0C,OAChB0H,QAASA,IA9JNwL,MACf,MAAMzF,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQ+R,KAAKe,UAAUnjB,IACvCmQ,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OAChDC,EAAAA,EACGC,KAAK,8BAA+BT,GACpCD,MAAKY,IACAA,EAAS9Q,KAAK8Q,UAChBlR,EAAYiW,YAAY,CACtBC,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,oBACJqC,eAAgB,wBAIjBgJ,EAAS9Q,KAAK8Q,UACjBlR,EAAYiW,YAAY,CACtBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,mBACJqC,eAAgB,uBAKS,OAA3BgJ,EAAS9Q,KAAK8Q,UAChBqF,eAAemJ,UAAU,CACvB5C,MAAM,EACN9U,UAAW,kCACXN,KAAM,SACNiY,aAAa,EACbC,SAASzX,EAAAA,EAAAA,KAAC0X,EAAAA,EAAc,IACxBlF,SAASxS,EAAAA,EAAAA,KAAC2X,EAAAA,EAAc,KAE5B,IAED3O,OAAMxL,IACL3F,EAAYiW,YAAY,CACtBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,mBACJqC,eAAgB,sBAElB,IAEHuS,SAAQ,IAAMpa,EAAQ,KAAI,EA+GF2V,GACfhO,UAAU,qCAAoC/B,UAE9CkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACzC,GAAG,SAASqC,eAAe,uBAMjD,ECaZ,IAAe9I,EAAAA,EAAAA,KAjTOC,IAAU,IAADslB,EAC7B,MAAM,KAAErlB,GAASD,EACXE,GAAiBC,EAAAA,EAAAA,YAAWC,IAC5BO,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,GACzBsW,GAAiB/W,EAAAA,EAAAA,YAAWgX,EAAAA,IAC5B,WAAEhC,EAAU,SAAEiC,EAAQ,WAAEgS,GAAelpB,GACtC6X,EAAQC,IAAa/W,EAAAA,EAAAA,UAAS,KAC9BwX,EAAQC,IAAazX,EAAAA,EAAAA,WAAS,GAa/B0tB,EAAoBA,KACxBjW,GAAU,GACVxY,EAAe0uB,cAAc,IAC7B,MAAMrpB,EAdYspB,MAClB,MAAM3d,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EACJC,KAAK,qCAAsCT,GAC3CD,MAAKW,GAAOA,EAAI7Q,KAAK8Q,WACrBC,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EAMM8c,GACV9d,QAAQC,IAAI,CAACzL,IACV0L,MAAK3G,IACJ,MACMwkB,EADOxkB,EAAE,GAEZrH,KACCZ,IAOO,IAPN,kBACC0sB,EAAiB,YACjBC,EAAW,kBACXC,EAAiB,kBACjBC,EAAiB,cACjBC,EAAa,UACbC,GACD/sB,EACC,MAAO,CACLgnB,WAAY,GACZhW,aAAc0b,EACd7b,eAAgB,EAChBD,oBAAqB+b,EACrB1U,aAAc2U,EACd1U,aAAc/P,MACXD,KAAK2kB,GACLtnB,IAAI,EAAG,UACP6C,OAAO,cACV8e,iBAAkB4F,EAClB3F,aAAc4F,EACd5Q,iBAAkB,GACnB,IAGJuH,MACC,CAACxgB,EAAGC,IACF,IAAId,KAAKa,EAAEgV,aAAajN,QAAQ,KAAM,MACtC,IAAI5I,KAAKc,EAAE+U,aAAajN,QAAQ,KAAM,QAE5CpN,EAAe0uB,cAAcE,EAAI,IAElC1T,SAAQ,KACP1C,GAAU,EAAM,GAChB,GAEN3W,EAAAA,EAAAA,YAAU,KACR4sB,GAAmB,GAClB,CAAC1uB,KAEJ8B,EAAAA,EAAAA,YAAU,KACR,MAAMsV,EAA2B,CAC/Bd,MAAO,CACLC,aAAcrB,EAAWlS,KAAI,CAAAe,EAAgBoD,KAAC,IAAhB,GAAEZ,EAAE,MAAE3D,GAAOmB,EAAA,MAAS,CAClDwC,KACA3D,QACD,MAICyU,EAAgB,CACpBf,MAAO,CACLC,aAAcY,IAGlByB,EAAAA,GAAuB,GAAGmB,YAAY,GAAK,SAC3CnB,EAAAA,GAAuB,GAAGmB,YAAY,GAAK3C,EAC3CwB,EAAAA,GAAuB,GAAGmB,YAAY,GAAK1C,EAC3CuB,EAAAA,GAAuB,GAAGmB,YAAY,GAAK,CACzCiB,MAAO,CACLC,UAAW,CACT,CACExY,MAAOzC,EAAK2I,cAAc,CACxBpC,GAAI,SACJqC,eAAgB,WAElBhG,MAAO,KACPsY,SAAS,GAEX,CACEzY,MAAOzC,EAAK2I,cAAc,CACxBpC,GAAI,QACJqC,eAAgB,UAElBhG,MAAO,KACPsY,SAAS,MAKjB,MAAMkU,EAAYA,CAAChd,EAAOsF,KACxB,MAAM5I,EACJ4I,GACAtF,EAAMxN,QAAOC,IAAC,IAAAwqB,EAAA,OAAW,QAAXA,EAAIxqB,EAAEjC,aAAK,IAAAysB,OAAA,EAAPA,EAAS1kB,cAAcoE,SAAY,OAAH2I,QAAG,IAAHA,OAAG,EAAHA,EAAK/M,cAAc,IAEvE,OADWmE,EAAItL,OAAS,EAAIsL,EAAI,GAAGvI,GAAK,EAC/B,EAGL+oB,EAAU,IAAInG,GAAYnmB,KAAIusB,IAClCA,EAAEjG,iBAAmB8F,EAAUla,EAAYqa,EAAEjG,kBAC7CiG,EAAEhG,aAAe6F,EAAUjY,EAAUoY,EAAEhG,cAChCgG,KAETxX,EAAU,IACV7S,YAAW,KACT,MAAMsqB,EAASF,EACZ1qB,QAAOC,GAAwB,OAAnBA,EAAEwV,eACdhV,QAAO,CAACC,EAAG0F,IAAMnI,OAAOyC,GAAKzC,OAAOmI,EAAEgI,sBAAsB,GACzDyc,EAAQH,EACX1qB,QAAOC,GAAwB,OAAnBA,EAAEwV,eACdhV,QAAO,CAACC,EAAG0F,IAAMnI,OAAOyC,GAAKzC,OAAOmI,EAAEgI,sBAAsB,GAyB/D+E,EAvBY,CACVtH,MAAO6e,EACPhtB,MAAO,CACL0Q,oBAAqB,CACnB,CACEpQ,MAAO4sB,EACPE,OAAQ,GACRC,OAAQ,OAEV,CACE/sB,MAAO6sB,EACPC,OAAQ,GACRC,OAAQ,OAEV,CACE/sB,MAhBQ4sB,EAASC,EAiBjBC,OAAQ,GACRC,OAAQ,MACRjnB,UAAW,mCAKL,GACb,IAAI,GACN,CAACygB,EAAYnpB,IAEhB,MAAMqZ,EAAST,EAAAA,GAAuB5V,KAAI4iB,IACxC,MAAMhF,EAAM,CACVtH,OAAQ,CACNC,kBAAmBvZ,EAAK2I,cAAc,CACpCpC,GAAI,aACJqC,eAAgB,eAElB4N,YAAY,GAEdgD,OAAQ,CACNlX,MAAO,CACLwG,MAAO9I,EAAK2I,cAAc,CAAEpC,GAAI,QAASqC,eAAgB,UACzD6Q,OAAQ,KACRC,SAAU,GACVC,WAAY,GAEdC,WAAY,CACVC,YAAa,OACbC,eAAgB,KAgBtB,OAZA8L,EAAKvM,OAASuH,EACdgF,EAAK1L,eAAiB,CACpB,KACA,cACA,SACA,OACA,OACA,OACA,WACA,OACA,YACAlX,KAAImX,GAAMna,EAAK2I,cAAc,CAAEpC,GAAI4T,EAAIvR,eAAgBuR,MAClDyL,CAAI,IA0DP/E,EAAgBA,KACpB9I,EAAU,GAAG,EAKf,OACEtP,EAAAA,EAAAA,MAAA,OAAA9B,SAAA,EACS,OAANmR,QAAM,IAANA,GAAa,QAAPuN,EAANvN,EAAQrH,aAAK,IAAA4U,OAAP,EAANA,EAAe7hB,QAAS,IACvBiF,EAAAA,EAAAA,MAAA,OAAA9B,SAAA,EACEkC,EAAAA,EAAAA,KAAA,MAAAlC,UACEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,mBACHqC,eAAe,uBAGlByQ,EACEyM,MAAK,CAACxgB,EAAGC,IAAMD,EAAEiB,GAAKhB,EAAEgB,KACxBvD,KAAI,CAAC+D,EAAGI,KACP0B,EAAAA,EAAAA,KAACmX,EAAAA,EAAW,CAEV3G,OAAQtS,EAAEsS,OACVW,MAAOjT,EAAEiT,MACTC,UAAWlT,EAAEkT,UACbC,eAAgBnT,EAAEmT,eAClBH,YAAahT,EAAEgT,YACfjC,OAAQA,EACRmI,WAAW,sCACXC,UAAWtO,GAnFPA,KAChB,MAAM,OAAEuO,EAAM,KAAErf,GAAS8Q,EACV,MAAXuO,GAEAvO,GACA9Q,GACyB,mBAAlBA,EAAK8Q,UACM,OAAlB9Q,EAAK8Q,UACL9Q,EAAK8Q,UAEL3R,EAAe0W,YAAY,CACzBC,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,+BACJqC,eAAgB,mCAKpBgJ,GACA9Q,GACyB,mBAAlBA,EAAK8Q,UACM,OAAlB9Q,EAAK8Q,WACa,IAAlB9Q,EAAK8Q,UAEL3R,EAAe0W,YAAY,CACzBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,oBACJqC,eAAgB,wBAIlBgJ,GAAY9Q,GAA0B,OAAlBA,EAAK8Q,UAC3BqF,EAAemJ,UAAU,CACvB5C,MAAM,EACN9U,UAAW,kCACXN,KAAM,SACNiY,aAAa,EACbC,SAASzX,EAAAA,EAAAA,KAAC0X,EAAAA,EAAc,IACxBlF,SAASxS,EAAAA,EAAAA,KAAC2X,EAAAA,EAAc,OAI5BvgB,EAAe0W,YAAY,CACzBvO,KAAM,QACNyO,KAAM,qBACND,QAAS5W,EAAK2I,cAAc,CAC1BpC,GAAI,sBACJqC,eAAgB,yBAGtB,EA+BmCsX,CAAUtO,GACjC+O,eAAgBC,IAA2B,EAC3CrG,eAAgBxT,EAAEwT,eAClBH,cAAerT,EAAEqT,cACjByG,cAAeA,EACfC,UAAW,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC3CC,eAAgB/gB,EAAK2I,cAAc,CACjCpC,GAAI,SACJqC,eAAgB,WAElBoY,cAAe,CACbtJ,IAAK,gBACL9U,MAAOlC,EAAY6Q,WAAWC,OAEhCjG,MAAO7K,EAAY4K,SAASC,OAtBvBpE,QA2BdqR,IACC3P,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kBAAiB/B,UAC9BkC,EAAAA,EAAAA,KAACiK,EAAAA,EAAM,QAGP,I,eClSH,MAAM3S,GAAiBqc,EAAAA,gBA8nB9B,GA5nBuBzc,IAAU,IAAD6vB,EAC9B,MAAM5vB,GAAOqQ,EAAAA,EAAAA,KACPwf,GAAgB3vB,EAAAA,EAAAA,YAAW4vB,EAAAA,GACjCruB,SAASqH,MAAQ,GAAG+mB,EAAcE,aAAa/vB,EAAK2I,cAAc,CAChEpC,GAAI,eACJqC,eAAgB,mBAElB,MAAMlI,GAAcR,EAAAA,EAAAA,YAAWS,EAAAA,IAuBxBygB,EAAU4O,IAAehvB,EAAAA,EAAAA,UAAS,KAClCugB,EAAY0O,IAAiBjvB,EAAAA,EAAAA,UAAS,KACtCmW,EAAUoP,IAAevlB,EAAAA,EAAAA,UAAS,KAClCZ,EAAWgM,IAAgBpL,EAAAA,EAAAA,UAAS,KACpC4O,EAAasgB,IAAkBlvB,EAAAA,EAAAA,UAAS,KACxCkU,EAAYyR,IAAiB3lB,EAAAA,EAAAA,UAAS,KACtCX,EAAa8vB,IAAkBnvB,EAAAA,EAAAA,UAAS,KACxCmoB,EAAYwF,IAAiB3tB,EAAAA,EAAAA,UAAS,KAEtC6O,EAAgB2R,IAAqBxgB,EAAAA,EAAAA,UAAS,KAC9CygB,EAAY+E,IAAiBxlB,EAAAA,EAAAA,UAAS,KACtC0gB,EAAgBC,IAAqB3gB,EAAAA,EAAAA,UAAS,KAE9CqgB,EAAcC,IAAmBtgB,EAAAA,EAAAA,UAAS,KAC1CsP,EAAc6Q,IAAmBngB,EAAAA,EAAAA,UAAS,KAC1CT,EAAmB6vB,KAAwBpvB,EAAAA,EAAAA,UAAS,KACpDgL,GAAqBqkB,KAA0BrvB,EAAAA,EAAAA,UAAS,KAExDiL,GAAWC,KAAgBlL,EAAAA,EAAAA,UAAS,CAAC,IAErCsvB,GAAaC,KAAkBvvB,EAAAA,EAAAA,WAAS,IACxCwvB,GAAeC,KAAoBzvB,EAAAA,EAAAA,WAAS,IAE5C0vB,GAAWC,KAAgB3vB,EAAAA,EAAAA,WAAS,IACpC4vB,GAAmBC,KAAwB7vB,EAAAA,EAAAA,WAAS,IACpD8vB,GAAqBC,KAA0B/vB,EAAAA,EAAAA,WAAS,IACxDgwB,GAAaC,KAAkBjwB,EAAAA,EAAAA,WAAS,IACxCkwB,GAAeC,KAAoBnwB,EAAAA,EAAAA,WAAS,GAC7Csb,IAAe7c,EAAAA,EAAAA,KACf8c,GAAS,CACbjG,MAAOgG,GAAaG,IAAI,SACxBnS,KAAMgS,GAAaG,IAAI,QACvBgK,KAAMnK,GAAaG,IAAI,QACvByO,KAAM5O,GAAaG,IAAI,UAElB2U,GAAgBC,KAAqBrwB,EAAAA,EAAAA,WAAS,IAC9CswB,GAAcC,KAAmBvwB,EAAAA,EAAAA,WAAS,IAyFjDc,EAAAA,EAAAA,YAAU,KACR,MAAMwD,EA7DYksB,MAClB,MAAMvgB,EAAW,IAAIC,SAGrB,OAFAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OAEzCC,EAAAA,EACJC,KAAK,6BAA8BT,GACnCD,MAAKW,GAAOA,EAAI7Q,KAAK8Q,WACrBC,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EAoDM0f,GACJjsB,EAvCYgiB,MAClB,MAAMtW,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EACJC,KAAK,6BAA8BT,GACnCD,MAAKW,GAAOA,EAAI7Q,KAAK8Q,WACrBC,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EA+BMyV,GACJvc,EAnDcymB,MACpB,MAAMxgB,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EACJC,KAAK,gCAAiCT,GACtCD,MAAKW,GAAOA,EAAI7Q,KAAK8Q,WACrBC,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EA2CM2f,GACJvnB,EA/Bcud,MACpB,MAAMxW,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EACJC,KAAK,oCAAqCT,GAC1CD,MAAKW,GAAOA,EAAI7Q,KAAK8Q,WACrBC,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EAuBM2V,GACJphB,EAtBcmhB,MACpB,MAAMvW,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EACJC,KAAK,gCAAiCT,GACtCD,MAAKW,GAAOA,EAAI7Q,KAAK8Q,WACrBC,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EAcM0V,GACV1W,QAAQC,IAAI,CAACzL,EAAGC,EAAGyF,EAAGd,EAAG7D,IAAI2K,MAAK3G,IAAM,IAADqnB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACjC,QAAJR,EAAArnB,EAAE,UAAE,IAAAqnB,OAAA,EAAJA,EAAMluB,QAAS,EACXwsB,EAAY3lB,EAAE,IACd2lB,EAAY,CACV,CACEzpB,GAAIgE,IAAO,IAAI9F,MAAQ+F,OAAO,QAAQ2d,WACtCvlB,MAAO2H,IAAO,IAAI9F,MAAQ+F,OAAO,QAAQ2d,eAG7C,QAAJwJ,EAAAtnB,EAAE,UAAE,IAAAsnB,OAAA,EAAJA,EAAMnuB,QAAS,GAAK6G,EAAE,GAAG,GAAG9D,GACxB+a,EAAgBjX,EAAE,GAAG,GAAG9D,IACxB+a,EAAgB,SAChB,QAAJsQ,EAAAvnB,EAAE,UAAE,IAAAunB,OAAA,EAAJA,EAAMpuB,QAAS,EACX+iB,EAAYlc,EAAE,IACdkc,EAAY,CACV,CACEhgB,GAAIvG,EAAK2I,cAAc,CAAEpC,GAAI,OAAQqC,eAAgB,SACrDhG,MAAO5C,EAAK2I,cAAc,CAAEpC,GAAI,OAAQqC,eAAgB,aAG5D,QAAJipB,EAAAxnB,EAAE,UAAE,IAAAwnB,OAAA,EAAJA,EAAMruB,QAAS,GAAK6G,EAAE,GAAG,GAAG9D,GACxB4a,EAAgB9W,EAAE,GAAG,GAAG9D,IACxB4a,EAAgB,SAChB,QAAJ2Q,EAAAznB,EAAE,UAAE,IAAAynB,OAAA,EAAJA,EAAMtuB,QAAS,EACXysB,EAAc5lB,EAAE,IAChB4lB,EAAc,CACZ,CACE1pB,GAAIgE,IAAO,IAAI9F,MAAQ+F,OAAO,QAAQ2d,WACtCvlB,MAAO2H,IAAO,IAAI9F,MAAQ+F,OAAO,QAAQ2d,eAG7C,QAAJ4J,EAAA1nB,EAAE,UAAE,IAAA0nB,OAAA,EAAJA,EAAMvuB,QAAS,GAAK6G,EAAE,GAAG,GAAG9D,GACxBib,EAAkBjX,IAAO,IAAI9F,MAAQ+F,OAAO,QAAQ2d,YACpD3G,EAAkB,SAClB,QAAJwQ,EAAA3nB,EAAE,UAAE,IAAA2nB,OAAA,EAAJA,EAAMxuB,QAAS,EACXgjB,EAAcnc,EAAE,IAChBmc,EAAc,CACZ,CACEjgB,GAAIvG,EAAK2I,cAAc,CAAEpC,GAAI,OAAQqC,eAAgB,SACrDhG,MAAO5C,EAAK2I,cAAc,CAAEpC,GAAI,OAAQqC,eAAgB,aAI5D,QAAJqpB,EAAA5nB,EAAE,UAAE,IAAA4nB,OAAA,EAAJA,EAAMzuB,QAAS,GAAK6G,EAAE,GAAG,GAAG9D,GACxBob,EAAwB,OAANpF,SAAM,IAANA,IAAAA,GAAQ2O,KAAa,OAAN3O,SAAM,IAANA,QAAM,EAANA,GAAQ2O,KAAO7gB,EAAE,GAAG,GAAG9D,IACxDob,EAAkB,SAClB,QAAJuQ,EAAA7nB,EAAE,UAAE,IAAA6nB,OAAA,EAAJA,EAAM1uB,QAAS,EACXmjB,EAActc,EAAE,IAChBsc,EAAc,CAAC,CAAEpgB,GAAI,KAAM3D,MAAO,KAAMuvB,eAAgB,OAAQ,IAEtEjC,EAAe,GAAG,GACjB,IAEH,MAAMkC,GAAmBxX,MAAOyX,EAAoB5X,KAClD8V,IAAe,GACfnkB,EAAa,IACbuiB,EAAc,IACd,MAAMjhB,EAAQ,GAAG2T,UACXjU,EAAQ,GAAGiU,eAhJQiR,EAAC5kB,EAAON,EAAOqZ,KACxC,MAAMxV,EAAW,IAAIC,SAKrB,OAJAD,EAASE,OAAO,YAAazD,GAC7BuD,EAASE,OAAO,UAAW/D,GAC3B6D,EAASE,OAAO,OAAQsV,GACxBxV,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EAAYC,KAAK,sCAAuCT,EAAS,EA2IlEqhB,CAAmB5kB,EAAON,EAAOkD,GACpCU,MAAK4J,UACJ,MAAMtX,EAAQqO,EAAI7Q,KAAK8Q,SACvBxF,EAAa9I,QA3EIivB,KACrB,MAAMthB,EAAW,IAAIC,SAGrB,OAFAD,EAASE,OAAO,OAAQohB,GACxBthB,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EAAYC,KAAK,kCAAmCT,EAAS,EAwE1DuhB,CAAeliB,GAClBU,MAAK4J,UAAc,IAAD6X,EACjBtC,EAAexe,EAAI7Q,KAAK8Q,UACV,oBAAP6I,GAAqB4X,QAClB5X,EAAQ,OAALnX,QAAK,IAALA,GAAkB,QAAbmvB,EAALnvB,EAAOjB,SAAS,UAAE,IAAAowB,OAAb,EAALA,EAAoBjwB,aACvBiY,GAAI,IAEf5I,OAAMC,IACLqe,EAAe,GAAG,GAClB,IAELte,OAAMC,IACL1F,EAAa,IACb2F,QAAQC,IAAIF,EAAM,IAEnBqJ,SAAQ,KACPoV,IAAe,EAAM,GACrB,EAWAmC,GAAsB9X,MAAOyX,EAAoB5X,KACrDgW,IAAiB,GACjBP,EAAe,IACfhkB,GAAa,IACbmkB,GAAuB,WA5LI5J,KAC3B,MAAMxV,EAAW,IAAIC,SAGrB,OAFAD,EAASE,OAAO,OAAQsV,GACxBxV,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EAAYC,KAAK,uCAAwCT,EAAS,EAyLnE+a,CAAqBtK,GACxB1Q,MAAK4J,UACJ,MAAM9Z,EAAO6Q,EAAI7Q,KAAK8Q,SAAS,GAC/B1F,GAAapL,GACb,MAAM4M,EAAQ,GAAGmC,UACXzC,EAAQ,GAAGyC,eAlLQ8iB,EAACjlB,EAAON,EAAO8d,KAC5C,MAAMja,EAAW,IAAIC,SAKrB,OAJAD,EAASE,OAAO,YAAazD,GAC7BuD,EAASE,OAAO,UAAW/D,GAC3B6D,EAASE,OAAO,OAAQ+Z,GACxBja,EAASE,OAAO,QAASzQ,EAAY6Q,WAAWC,OACzCC,EAAAA,EAAYC,KACjB,0CACAT,EACD,EA0KS0hB,CAAuBjlB,EAAON,EAAOsU,GACxC1Q,MAAK4J,UACJ,MAAMgY,EAAQjhB,EAAI7Q,KAAK8Q,SACjBihB,EAASD,EAAM5vB,KAAI8vB,GAAMA,EAAGtwB,QAC5BuwB,EAAoBF,EAAOG,WAC/BnuB,GAAKA,IAAM0F,MAASC,OAAO,YAAY2d,aAEnC8K,EACJF,GAAqB,EACjBF,EAAOE,GACPH,EAAM,IAAIpwB,MAChB0tB,EAAe0C,GACD,oBAAPnY,GAAqB4X,QAClB5X,EAAGwY,SACHxY,EAAG3Z,EAAK,IAEnB+Q,OAAMC,IACLC,QAAQC,IAAIF,EAAM,IAEnBqJ,SAAQ,KACPsV,IAAiB,EAAM,GACvB,IAEL5e,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,EAGAmZ,GAAaA,KAEfpiB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kBAAiB/B,UAC9BkC,EAAAA,EAAAA,KAACiK,EAAAA,EAAM,MA4Eb,OArEAhR,EAAAA,EAAAA,YAAU,KACR,MAAMoxB,EAAY3oB,IAAOgS,GAAOjS,MAAME,OAAO,QAAQ2d,WAEnD/G,EAAS5d,OAAS,GAClB2T,EAAS3T,OAAS,GACD,qBAAjB+Y,GAAOjG,QAEPgL,EAAgB4R,GAChB/R,EAAgB5E,GAAOkK,MACvB4K,IAAkB,GACpB,GACC,CAACnO,KAAKe,UAAU1H,IAAS6E,EAAUjK,KAEtCrV,EAAAA,EAAAA,YAAU,KACR,GACE2f,EAAWje,OAAS,GACpB+d,EAAW/d,OAAS,GACH,mBAAjB+Y,GAAOjG,MACP,CACA,MAAM4c,EAAY3oB,IAAOgS,GAAOjS,MAAME,OAAO,QAAQ2d,WACrD3G,EAAkB0R,GAClBvR,EAAkBpF,GAAO2O,MACzBqG,IAAgB,EAClB,IACC,CAACrO,KAAKe,UAAU1H,IAASkF,EAAYF,KAExCzf,EAAAA,EAAAA,YAAU,KACR,GAAIuf,GAAgB/Q,GAAgB8gB,GAAgB,CAClD,MAAM+B,EAAiB5oB,IAAOgS,GAAOjS,MAAME,OAAO,YAAY2d,WAC9DiK,IAAiB,GAAO,KACtBhC,GAAqB+C,GACrB9B,IAAkB,GAClBnsB,YAAW,KAAO,IAADkuB,EACuB,QAAtCA,EAAA3xB,SAASkoB,eAAe,sBAAc,IAAAyJ,GAAtCA,EAAwCC,eAAe,CACrDC,SAAU,SACVC,MAAO,SACPC,OAAQ,SACR,GACD,IAAI,GAEX,IACC,CAACtQ,KAAKe,UAAU1H,IAAS6U,GAAgB/P,EAAc/Q,KAE1DxO,EAAAA,EAAAA,YAAU,KACJ+N,GAAkB6R,GAAkB4P,IACtCoB,IAAoB,GAAOe,IACzB,MAAMN,EACJtwB,OAAO4wB,EAAMxmB,yBACbpK,OAAO0H,IAAOgS,GAAOjS,MAAME,OAAO,KAAK2d,YACnC5d,IAAOgS,GAAOjS,MAAME,OAAO,YAAY2d,WACvC5d,IAAOgS,GAAOjS,MAAM3C,IAAI,EAAG,KAAK6C,OAAO,YAAY2d,WAEzDkI,GAAuB8C,GACvB5B,IAAgB,GAChBrsB,YAAW,KAAO,IAADwuB,EACmB,QAAlCA,EAAAjyB,SAASkoB,eAAe,kBAAU,IAAA+J,GAAlCA,EAAoCL,eAAe,CACjDC,SAAU,SACVC,MAAO,SACPC,OAAQ,SACR,GACD,IAAI,GAEX,GACC,CAACtQ,KAAKe,UAAU1H,IAAS+U,GAAczhB,EAAgB6R,KAOxDjZ,EAAAA,EAAAA,MAACtI,GAAewzB,SAAQ,CACtB/wB,MAAO,CACL+T,YA5WcvU,IAAA,IAAC,UACnB4rB,EAAY,IAAI,KAChB5lB,EAAO,UAAS,SAChBoH,EAAW,YAAW,QACtBoH,EAAO,MACPrL,EAAQ,UAAS,gBACjBqoB,GAAkB,EAAK,aACvBC,GAAe,EAAK,aACpBC,GAAe,EAAI,UACnBhQ,GAAY,GACb1hB,EAAA,OACC2xB,EAAAA,GAAM3rB,GAAMwO,EAAS,CACnBoX,YACAxe,WACAjE,QACAqoB,kBACAC,eACAC,eACAhQ,aACA,EA0VExT,eACA6Q,kBACA9gB,cACA8W,WACAoP,cACAlF,eACAC,kBACAF,WACA7gB,oBACAD,oBA3IsB0zB,IAC1B5D,GAAqB4D,EAAU,EA2I3B9e,aACAyR,gBACAlF,aACAC,iBACAC,oBACA9R,iBACA2R,oBACAD,aACAiF,gBACApmB,YACAwP,cACA3D,aACAC,gBACAF,uBACAG,sBAtJwB6nB,IAC5B3D,GAAuB2D,EAAU,EAsJ7B7K,aACAwF,iBACAhoB,SAAA,EAEFkC,EAAAA,EAAAA,KAACorB,EAAAA,GAAc,CAACvrB,UAAU,gBAC1BD,EAAAA,EAAAA,MAAA,WAASC,UAAU,GAAE/B,SAAA,CAClB+pB,KACC7nB,EAAAA,EAAAA,KAACqrB,EAAkB,CACjB1W,KAAMkT,GACNjT,OAAQA,IAAMkT,IAAa,GAC3BjT,KAAK,KACLC,WAAW,IAGdiT,KACC/nB,EAAAA,EAAAA,KAACsrB,EAAY,CACXzrB,UAAU,8BACV8U,KAAMoT,GACNnT,OAAQA,IAAMoT,IAAqB,GACnCnT,KAAK,KACLC,WAAW,IAGdmT,KACCjoB,EAAAA,EAAAA,KAACurB,GAAgB,CACf1rB,UAAU,iBACV8U,KAAMsT,GACNrT,OAAQA,IAAMsT,IAAuB,GACrCjT,UAAQ,EACRJ,KAAK,KACL2W,SAAS,WAGZrD,KACCnoB,EAAAA,EAAAA,KAACyrB,EAAc,CACb5rB,UAAU,iBACV8U,KAAMwT,GACNvT,OAAQA,KACNwT,IAAe,GACfsD,uBAAsB,EAAM,EAE9BrI,MAAOA,KACL+E,IAAe,GACfsD,uBAAsB,EAAK,EAE7B7W,KAAK,KACLC,WAAW,KAGflV,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAK/B,SAAA,EAClBkC,EAAAA,EAAAA,KAAC2rB,GAAAA,EAAU,CAAC3d,KAAK,cAAc4d,OAAO,kBACtC5rB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAM/B,UACnBkC,EAAAA,EAAAA,KAAA,OAAKH,UAAW,kBAAkBhI,EAAY4K,SAASC,QAAQ5E,SAC5DwQ,EAAS3T,OAAS,GACnB4d,EAAS5d,QACT+d,EAAW/d,OAAS,GACpBie,EAAWje,OAAS,EAAI,GACtBiF,EAAAA,EAAAA,MAAAM,EAAAA,SAAA,CAAApC,SAAA,EACEkC,EAAAA,EAAAA,KAAA,OACEH,UAAW,UACsB,SAA/BhI,EAAY4K,SAASC,MACjB,0BACA,sBACH5E,UAEHkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,mBACHqC,eAAe,wBAGnBH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAW/B,SAAA,EACxBkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,yBAAwB/B,UACrCkC,EAAAA,EAAAA,KAAC6rB,EAAO,OAEV7rB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,yBAAwB/B,UACrCkC,EAAAA,EAAAA,KAAC8rB,EAAO,OAEV9rB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,yBAAwB/B,UACrCkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,eAAc/B,UAC3BkC,EAAAA,EAAAA,KAAA,UACEqC,QAASA,IACPknB,IAAiB,GAAMlK,IACrBkI,GAAqBlI,EAAI,IAG7Bxf,UAAU,0DAAyD/B,UAEnEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,WACHqC,eAAe,oBAKvBC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,2BAA0B/B,UACvCkC,EAAAA,EAAAA,KAAA,UACEqC,QAASA,IAAM2lB,IAAqB,GACpCnoB,UAAU,oBACVI,MAAO9I,EAAK2I,cAAc,CACxBpC,GAAI,eACJqC,eAAgB,iBACfjC,UAEHkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,yBAGjBG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,2BAA0B/B,UACvCkC,EAAAA,EAAAA,KAAA,UACEqC,QAASA,IAAM6lB,IAAuB,GACtCroB,UAAU,oBACVI,MAAO9I,EAAK2I,cAAc,CACxBpC,GAAI,aACJqC,eAAgB,eAElB6N,SACgD,OAAnC,OAAX/V,QAAW,IAAXA,GAAuB,QAAZkvB,EAAXlvB,EAAa6Q,kBAAU,IAAAqe,OAAZ,EAAXA,EAAyBgF,kBAC1BjuB,UAEDkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,4BAGjBG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,2BAA0B/B,UACvCkC,EAAAA,EAAAA,KAAA,UACEqC,QAASA,IAAMimB,IAAkBD,IACjCxoB,UAAU,oBACVI,MAAO9I,EAAK2I,cAAc,CACxBpC,GAAI,mBACJqC,eAAgB,qBACfjC,UAEHkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,uBAIlByO,EAAS3T,OAAS,GAAK0tB,KAAiBroB,EAAAA,EAAAA,KAACgsB,GAAa,IACtDvE,GACCrF,MAEApiB,EAAAA,EAAAA,KAAAE,EAAAA,SAAA,CAAApC,SACGuO,EAAW1R,OAAS,GAAKnD,EAAYmD,OAAS,IAC7CqF,EAAAA,EAAAA,KAACisB,EAAW,OAIlBjsB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,MAAK/B,UAClBkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gCAA+B/B,SAM1CtG,EAAYmD,OAAS,IAAKqF,EAAAA,EAAAA,KAACiO,EAAqB,SAItDjO,EAAAA,EAAAA,KAAA,OAAKH,UAAU,MAAK/B,UAClBkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,YAAW/B,UACxBkC,EAAAA,EAAAA,KAAA,OACEH,UAAW,UACsB,SAA/BhI,EAAY4K,SAASC,MACjB,0BACA,sBACH5E,UAEHkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,yBACHqC,eAAe,kCAKvBH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAK/B,SAAA,EAClBkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAe/B,UAC5BkC,EAAAA,EAAAA,KAACksB,EAAS,OAEZlsB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAe/B,UAC5BkC,EAAAA,EAAAA,KAACmsB,EAAS,OAEZnsB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAe/B,UAC5BkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,eAAc/B,UAC3BkC,EAAAA,EAAAA,KAAA,UACEqC,QAASA,IACPwnB,IAAoB,GAAMxK,IACxBmI,GAAuBnI,EAAI,IAG/Bxf,UAAU,0DAAyD/B,UAEnEkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,WACHqC,eAAe,oBAKvBC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAe/B,UAC5BkC,EAAAA,EAAAA,KAAA,UACEqC,QAASA,IAAMylB,IAAa,GAC5BjoB,UAAU,oBAAmB/B,UAE7BkC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,kCAIlB8nB,GACCvF,KACErb,GAAeA,EAAYpM,OAAS,GACtCqF,EAAAA,EAAAA,KAACosB,EAAe,KAEhBpsB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,mBAAkB/B,UAC/BkC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CACfzC,GAAG,qBACHqC,eAAe,0BAIrBC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,MAAK/B,UAClBkC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,iBAAgB/B,SAC5BqF,IACC0V,GACAxM,EAAW1R,QACXie,EAAWje,QACXyI,KAAapD,EAAAA,EAAAA,KAACqsB,EAAyB,WAK/CjK,iBAMc,C","sources":["components/GlobalHeader/queryParamHook.js","components/accountPlanner/IncExpChart.js","components/accountPlanner/CreditCardUsage.js","components/accountPlanner/CreditCardChart.js","components/accountPlanner/PlanInfoModal.js","components/accountPlanner/TallyModal.js","components/accountPlanner/FundTransferModal.js","components/accountPlanner/MonthExpenditureTable.js","components/accountPlanner/SetBank.js","components/accountPlanner/SetYear.js","components/accountPlanner/SetCcYear.js","components/accountPlanner/SetCcBank.js","components/accountPlanner/CreditCardModal.js","components/accountPlanner/TypeCreditCardExpenditure.js","components/accountPlanner/FastShopping.js","components/accountPlanner/CountDown.js","components/accountPlanner/CheckCardCycleDate.js","components/accountPlanner/ConfirmQBModal.js","components/accountPlanner/BulkImportIncExp.js","components/accountPlanner/TemplateClone.js","components/accountPlanner/AccountPlanner.js"],"sourcesContent":["import { useMemo } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst useQuery = () => {\n  const { search } = useLocation();\n  return useMemo(() => new URLSearchParams(search), [search]);\n};\n\nexport { useQuery };\n","import React, { useState, useEffect, useRef, useContext } from \"react\";\nimport DonutChart from \"react-donut-chart\";\nimport helpers from \"../../helpers\";\nimport moment from \"moment\";\nimport LineChart from \"react-linechart\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport { LocaleContext } from \"../../contexts/LocaleContext\";\nimport { AccountContext } from \"./AccountPlanner\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { Row, Col } from \"react-bootstrap\";\n\n// https://www.npmjs.com/package/react-donut-chart\n\nconst IncExpChart = props => {\n  const { intl } = props;\n  const accountContext = useContext(AccountContext);\n  const { chartData, bankDetails, onMonthYearSelected, monthYearSelected } =\n    accountContext;\n  const localeContext = useContext(LocaleContext);\n  const userContext = useContext(UserContext);\n  const ref = useRef(null);\n  const [data, setData] = useState([]);\n  const [lineChartData, setLineChartData] = useState([]);\n  const [width, setWidth] = useState(0);\n  const [metrics, setMetrics] = useState({});\n  const height = 250;\n  const creditLineColor = getComputedStyle(\n    document.documentElement,\n  ).getPropertyValue(\"--bs-indigo\");\n  const incomeLineColor = getComputedStyle(\n    document.documentElement,\n  ).getPropertyValue(\"--bs-pink\");\n\n  const svgWrapperId = \"debit-card-income\";\n\n  useEffect(() => {\n    setWidth(ref.current.clientWidth);\n  }, []);\n\n  useEffect(() => {\n    const massageData = ({ category, total, dated }) => ({\n      month: dated,\n      label: helpers.shorten(category, 15),\n      value: Number(total),\n      isEmpty: Number(total) <= 0,\n    });\n\n    const Ddata = chartData.category.map(cd => {\n      const obj = {\n        month: cd.month,\n        cData:\n          cd?.data?.expense?.length > 0\n            ? cd.data.expense.map(ex =>\n                massageData({\n                  category: ex.category,\n                  total: ex.total,\n                  dated: cd.month,\n                }),\n              )\n            : [massageData({ category: \"No Data\", total: 0, dated: null })],\n        creditData:\n          cd?.data?.income?.length > 0\n            ? cd.data.income.map(ex =>\n                massageData({\n                  category: ex.category,\n                  total: ex.total,\n                  dated: cd.month,\n                }),\n              )\n            : [massageData({ category: \"No Data\", total: 0, dated: null })],\n      };\n      return obj;\n    });\n    setData(Ddata);\n\n    const lChart = [\n      {\n        color: creditLineColor,\n        points: chartData.income.map(\n          ({\n            month,\n            measureDate,\n            monthStart,\n            monthEnd,\n            totalIncome,\n            metricIncome,\n          }) => ({\n            month,\n            x: monthStart,\n            z: monthEnd,\n            y: totalIncome,\n            metricTotal: metricIncome,\n            measureDate: new Date(measureDate),\n          }),\n        ),\n      },\n      {\n        color: incomeLineColor,\n        points: chartData.income.map(\n          ({ month, monthStart, monthEnd, metricIncome }) => ({\n            month,\n            x: monthStart,\n            z: monthEnd,\n            y: metricIncome,\n          }),\n        ),\n      },\n    ];\n\n    setLineChartData([]);\n    const filt = lChart[1].points.filter(f => f.y !== 0);\n    const start = new Date(filt[filt.length - 1]?.x);\n    const end = new Date(filt[0]?.z);\n    const weekNumber = getWeekNumber(start, end);\n\n    setTimeout(() => {\n      setLineChartData(lChart);\n      const total = lChart[0].points.reduce((a, b) => a + b.metricTotal, 0);\n      const hourly = helpers.countryCurrencyLacSeperator(\n        bankDetails[0].bank_locale,\n        bankDetails[0].bank_currency,\n        total / (5 * 8 * weekNumber) || 0,\n        2,\n      );\n      const daily = helpers.countryCurrencyLacSeperator(\n        bankDetails[0].bank_locale,\n        bankDetails[0].bank_currency,\n        total / (5 * weekNumber) || 0,\n        2,\n      );\n\n      const weekly = helpers.countryCurrencyLacSeperator(\n        bankDetails[0].bank_locale,\n        bankDetails[0].bank_currency,\n        total / weekNumber || 0,\n        2,\n      );\n\n      setMetrics({ hourly, daily, weekly });\n      if (ref.current?.childNodes[2]?.childNodes[0]) {\n        ref.current.childNodes[2].childNodes[0].style.height = height + 10;\n      }\n    }, 1);\n  }, [chartData, localeContext]);\n\n  useEffect(() => {\n    if (lineChartData.length > 0 && data.length > 0) {\n      const onXClick = e => {\n        const value = e.target.id;\n        onMonthYearSelected(value);\n      };\n\n      const xAxisElement = ref.current\n        ?.querySelector(`#${svgWrapperId} svg`)\n        ?.getElementsByClassName(\"axis\")[0].children;\n\n      const ticks =\n        xAxisElement &&\n        Array.from(xAxisElement)\n          ?.filter(t => t.classList.contains(\"tick\"))\n          .reverse();\n      const points = [...lineChartData[1].points];\n      for (let i = 0; i < ticks.length; i++) {\n        ticks[i].children[1].classList.remove(\"colored\");\n        ticks[i].children[1].setAttribute(\"id\", points[i]?.month);\n        ticks[i].children[1].addEventListener(\"click\", onXClick);\n      }\n\n      if (monthYearSelected) {\n        const g =\n          ticks &&\n          Array.from(ticks)?.filter(\n            t => t.children[1].id === monthYearSelected,\n          )[0];\n\n        if (g) g.getElementsByTagName(\"text\")[0].classList.add(\"colored\");\n      }\n\n      return () => {\n        for (let i = 0; i < ticks.length; i++) {\n          ticks[i].children[1].removeEventListener(\"click\", onXClick);\n        }\n      };\n    }\n  }, [monthYearSelected, lineChartData, data]);\n\n  const getWeekNumber = (start, end) => {\n    const days = Math.floor((end - start) / (24 * 60 * 60 * 1000));\n    const weekNumber = Math.ceil(days / 7);\n    return weekNumber || 1;\n  };\n\n  // Interface type\n  // {dated: \"Dec-2020\", total: \"0.00\", category: \"Bike petrol\"}\n  // cData = { label: \"Mobile bill\", value: 120 },\n\n  const genId = i => `chart-${i}`;\n  const colors = helpers.donutChartColors;\n\n  const getMonthString = r => {\n    let date = \"\";\n    if (width > 450) {\n      date = moment(r).format(\"MMM\");\n      const first = date\n        .toLocaleString(\"default\", { month: \"short\" })\n        .toLowerCase();\n      const last = r.getFullYear();\n      date = `${intl.formatMessage({\n        id: first,\n        defaultMessage: first,\n      })} ${last}`;\n    } else {\n      date = moment(r).format(\"M\");\n    }\n    return date;\n  };\n\n  const getTotalIncome = data => {\n    let total = data.reduce((a, b) => a + b.metricTotal, 0);\n    total = helpers.countryCurrencyLacSeperator(\n      bankDetails[0].bank_locale,\n      bankDetails[0].bank_currency,\n      total,\n      2,\n    );\n    return total;\n  };\n\n  const getMinMax = (data, type) => {\n    let total = isFinite(Math[type](...data)) ? Math[type](...data) : 0;\n    total = helpers.countryCurrencyLacSeperator(\n      bankDetails[0].bank_locale,\n      bankDetails[0].bank_currency,\n      total,\n      2,\n    );\n    return total;\n  };\n\n  const Metric = ({ i18Key, value }) => (\n    <div className='position-relative small py-4'>\n      {intl.formatMessage({ id: i18Key, defaultMessage: i18Key })}\n      <span\n        title={value}\n        className='position-absolute top-0 start-50 translate-middle rounded-pill bni-bg bni-text w-100 py-2 text-break'\n      >\n        {value}\n      </span>\n    </div>\n  );\n  return (\n    <>\n      <div ref={ref}>\n        {lineChartData.length > 0 && data.length > 0 && (\n          <>\n            <div className='badge bni-bg bni-text'>\n              <FormattedMessage\n                id='incomeMetrics'\n                defaultMessage='incomeMetrics'\n              />\n            </div>\n            <Row className='mt-3'>\n              <Col lg={2} sm={4} xs={6} className='py-2 text-center'>\n                <Metric\n                  i18Key='total'\n                  value={getTotalIncome(lineChartData[0].points)}\n                />\n              </Col>\n              <Col lg={2} sm={4} xs={6} className='py-2 text-center'>\n                <Metric\n                  i18Key='highest'\n                  value={getMinMax(\n                    lineChartData[0].points\n                      .filter(f => f.metricTotal !== 0)\n                      .map(v => v.metricTotal),\n                    \"max\",\n                  )}\n                />\n              </Col>\n              <Col lg={2} sm={4} xs={6} className='py-2 text-center'>\n                <Metric\n                  i18Key='lowest'\n                  value={getMinMax(\n                    lineChartData[0].points\n                      .filter(f => f.metricTotal !== 0)\n                      .map(v => v.metricTotal),\n                    \"min\",\n                  )}\n                />\n              </Col>\n              <Col lg={2} sm={4} xs={6} className='py-2 text-center'>\n                <Metric i18Key='weekly' value={metrics.weekly} />\n              </Col>\n              <Col lg={2} sm={4} xs={6} className='py-2 text-center'>\n                <Metric i18Key='daily' value={metrics.daily} />\n              </Col>\n              <Col lg={2} sm={4} xs={6} className='py-2 text-center'>\n                <Metric i18Key='hourly' value={metrics.hourly} />\n              </Col>\n            </Row>\n            <div className='d-flex justify-content-between'>\n              <div>\n                <span>\n                  <i\n                    style={{ color: creditLineColor }}\n                    className='fa fa-circle me-2'\n                    title={intl.formatMessage({\n                      id: \"credit\",\n                      defaultMessage: \"credit\",\n                    })}\n                  />\n                  {intl.formatMessage({\n                    id: \"credit\",\n                    defaultMessage: \"credit\",\n                  })}\n                </span>\n              </div>\n              <div className='fst-italic text-wrap'>\n                <sup className='text-danger'>*</sup>\n                {intl.formatMessage({\n                  id: \"CreditInclusiveIncome\",\n                  defaultMessage: \"CreditInclusiveIncome\",\n                })}\n              </div>\n              <div>\n                <span>\n                  <i\n                    style={{ color: incomeLineColor }}\n                    className='fa fa-circle me-2'\n                    title={intl.formatMessage({\n                      id: \"income\",\n                      defaultMessage: \"income\",\n                    })}\n                  />\n                  {intl.formatMessage({\n                    id: \"income\",\n                    defaultMessage: \"income\",\n                  })}\n                </span>\n              </div>\n            </div>\n            <LineChart\n              data={lineChartData}\n              id={svgWrapperId}\n              margins={{\n                top: 50,\n                right: width > 450 ? 80 : 30,\n                bottom: 50,\n                left: 135,\n              }}\n              width={width}\n              isDate={true}\n              height={height}\n              xLabel={intl.formatMessage({\n                id: \"month\",\n                defaultMessage: \"month\",\n              })}\n              yLabel={`${intl.formatMessage({\n                id: \"credit\",\n                defaultMessage: \"credit\",\n              })} & ${intl.formatMessage({\n                id: \"income\",\n                defaultMessage: \"income\",\n              })}`}\n              onPointHover={d =>\n                helpers.countryCurrencyLacSeperator(\n                  bankDetails[0].bank_locale,\n                  bankDetails[0].bank_currency,\n                  d.y,\n                  2,\n                )\n              }\n              tooltipClass={`line-chart-tooltip`}\n              ticks={data.length}\n              xDisplay={(r, i) => {\n                return getMonthString(r);\n              }}\n              onPointClick={(e, c) => {\n                onMonthYearSelected(c.month);\n              }}\n            />\n          </>\n        )}\n      </div>\n      <div className='x-scroll'>\n        {data.length > 0 && (\n          <div className='d-flex align-items-center pt-2 ps-3'>\n            {data.map((d, i) => (\n              <div className='chartWrapper' key={genId(i)}>\n                <div className='text-center pt-10 pb-10'>\n                  <button\n                    className={`btn btn-sm btn-bni ${\n                      String(monthYearSelected) === String(d.month)\n                        ? \"active\"\n                        : \"\"\n                    }`}\n                    onClick={() => {\n                      onMonthYearSelected(d.month);\n                    }}\n                  >\n                    {`${intl.formatMessage({\n                      id: d.month.split(\"-\")[0].toLowerCase(),\n                      defaultMessage: d.month.split(\"-\")[0].toLowerCase(),\n                    })} ${d.month.split(\"-\")[1]}`}\n                  </button>\n                </div>\n                <div className='floatingChartWrapper'>\n                  {i < 1 && (\n                    <div className='floatingChartHeader btn btn-sm btn-bni'>\n                      <FormattedMessage id='expense' defaultMessage='expense' />\n                    </div>\n                  )}\n                  <DonutChart\n                    strokeColor={`${\n                      userContext.userData.theme === \"dark\" ? \"#000\" : \"#eee\"\n                    }`}\n                    innerRadius={0.7}\n                    outerRadius={0.9}\n                    clickToggle={true}\n                    colors={colors}\n                    height={220}\n                    width={220}\n                    legend={false}\n                    data={d.cData}\n                    formatValues={(values, total) =>\n                      `${helpers.countryCurrencyLacSeperator(\n                        bankDetails[0].bank_locale,\n                        bankDetails[0].bank_currency,\n                        values,\n                        2,\n                      )}`\n                    }\n                  />\n                </div>\n                <div className='floatingChartWrapper'>\n                  {i < 1 && (\n                    <div className='floatingChartHeader btn btn-sm btn-bni'>\n                      <FormattedMessage id='income' defaultMessage='income' />\n                    </div>\n                  )}\n                  <DonutChart\n                    strokeColor={`${\n                      userContext.userData.theme === \"dark\" ? \"#000\" : \"#eee\"\n                    }`}\n                    innerRadius={0.7}\n                    outerRadius={0.9}\n                    clickToggle={true}\n                    colors={colors}\n                    height={220}\n                    width={220}\n                    legend={false}\n                    data={d.creditData}\n                    formatValues={(values, total) =>\n                      `${helpers.countryCurrencyLacSeperator(\n                        bankDetails[0].bank_locale,\n                        bankDetails[0].bank_currency,\n                        values,\n                        2,\n                      )}`\n                    }\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default injectIntl(IncExpChart);\n","import React, { useRef, useEffect, useState, useContext } from \"react\";\nimport LineChart from \"react-linechart\";\nimport \"../../../node_modules/react-linechart/dist/styles.css\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport helpers from \"../../helpers\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport { LocaleContext } from \"../../contexts/LocaleContext\";\nimport { AccountContext } from \"./AccountPlanner\";\n\nconst CreditCardUsage = props => {\n  const accountContext = useContext(AccountContext);\n  const localeContext = useContext(LocaleContext);\n  const { data, intl } = props;\n  const {\n    ccMonthYearSelected,\n    ccDetails,\n    setCcDetails,\n    onCcMonthYearSelected,\n  } = accountContext;\n  const [width, setWidth] = useState(0);\n  const height = 250;\n  const [chartData, setChartData] = useState([]);\n  const [toggleChart, setToggleChart] = useState(true);\n  const ref = useRef(null);\n  const interestLineColor = getComputedStyle(\n    document.documentElement,\n  ).getPropertyValue(\"--bs-danger\");\n  const purchasesLineColor = getComputedStyle(\n    document.documentElement,\n  ).getPropertyValue(\"--bs-primary\");\n  const paidLineColor = getComputedStyle(\n    document.documentElement,\n  ).getPropertyValue(\"--bs-success\");\n  const openingLineColor = getComputedStyle(\n    document.documentElement,\n  ).getPropertyValue(\"--bs-warning\");\n  const [dateRanges, setDateRanges] = useState({});\n  const svgWrapperId = \"credit-card-usage\";\n\n  useEffect(() => {\n    const [smonth, year] = ccMonthYearSelected.split(\"-\");\n    const month = helpers.strToNumMonth[smonth];\n    const ccStartDay = Number(ccDetails.credit_card_start_date);\n    const ccEndDay = Number(ccDetails.credit_card_end_date);\n\n    const eDate = new Date(\n      `${Number(year)}-${Number(month)}-${ccEndDay}`.replace(/-/g, \"/\"),\n    );\n    const eDateStr = `${eDate.getFullYear()}-${helpers.leadingZeros(\n      eDate.getMonth() + 1,\n    )}-${helpers.leadingZeros(eDate.getDate())}`;\n\n    const dateOffset = 24 * 60 * 60 * 1000 * 30; // 30 days\n    let sDate = eDate.setTime(eDate.getTime() - dateOffset);\n    sDate = new Date(sDate);\n    sDate = new Date(sDate.setDate(ccStartDay));\n    const sDateStr = `${sDate.getFullYear()}-${helpers.leadingZeros(\n      sDate.getMonth() + 1,\n    )}-${helpers.leadingZeros(sDate.getDate())}`;\n\n    let payDate = Number(ccDetails.credit_card_payment_date);\n    payDate = payDate < 10 ? `0${payDate}` : payDate;\n    payDate = new Date(`${payDate}-${ccMonthYearSelected}`);\n    payDate = helpers.addMonths(payDate, 1);\n    let [yyyy, mmm, dd] = [\n      payDate.getFullYear(),\n      payDate.getMonth() + 1,\n      payDate.getDate(),\n    ];\n    mmm = mmm < 10 ? `0${mmm}` : mmm;\n    dd = dd < 10 ? `0${dd}` : dd;\n    payDate = `${yyyy}-${mmm}-${dd}`;\n\n    setDateRanges({ sDateStr, eDateStr, payDate });\n    setCcDetails(prev => ({\n      ...prev,\n      creditCardCycleStartDate: sDateStr,\n      creditCardCycleEndDate: eDateStr,\n    }));\n\n    setWidth(ref.current.clientWidth);\n  }, [ccMonthYearSelected]);\n\n  useEffect(() => {\n    if (toggleChart && chartData.length > 0) {\n      const onXClick = e => {\n        const value = e.target.id;\n        onCcMonthYearSelected(value);\n      };\n\n      const xAxisElement = ref.current\n        ?.querySelector(`#${svgWrapperId} svg`)\n        ?.getElementsByClassName(\"axis\")[0].children;\n\n      const ticks =\n        xAxisElement &&\n        Array.from(xAxisElement)?.filter(t => t.classList.contains(\"tick\"));\n\n      for (let i = 0; i < ticks.length; i++) {\n        ticks[i].children[1].classList.remove(\"colored\");\n        ticks[i].children[1].setAttribute(\"id\", chartData[0].points[i].month);\n        ticks[i].children[1].addEventListener(\"click\", onXClick);\n      }\n\n      if (ccMonthYearSelected) {\n        const g =\n          ticks &&\n          Array.from(ticks)?.filter(\n            t => t.children[1].id === ccMonthYearSelected,\n          )[0];\n        if (g) {\n          g.getElementsByTagName(\"text\")[0].classList.add(\"colored\");\n        }\n      }\n\n      return () => {\n        for (let i = 0; i < ticks.length; i++) {\n          ticks[i].children[1].removeEventListener(\"click\", onXClick);\n        }\n      };\n    }\n  }, [ccMonthYearSelected, toggleChart, chartData]);\n\n  const massageData = where => {\n    const yyyy = ccMonthYearSelected.split(\"-\")[1];\n    let points = new Array(12)\n      .fill()\n      .map((_, i) => (i > 8 ? String(i + 1) : `0${i + 1}`))\n      .map(mm => {\n        const mmm = helpers.monthToStr[mm];\n        const row = data.filter(d => d.month.split(\"-\")[0].includes(mmm));\n        const yy = row.length\n          ? row[0].cData.filter(cd => cd.label === where)[0].value\n          : 0;\n        return {\n          x: moment(`${yyyy}/${mm}/01`).format(\"YYYY-MM-DD\"),\n          y: yy,\n          month: `${mmm}-${yyyy}`,\n        };\n      });\n    points = _.flatten(points);\n    return points;\n  };\n  const getTotal = where => {\n    let num = massageData(where).reduce(\n      (a, b) => a + Number(b.y.toFixed(2)),\n      0,\n    );\n    num = helpers.countryCurrencyLacSeperator(\n      ccDetails.credit_card_locale,\n      ccDetails.credit_card_currency,\n      num,\n      2,\n    );\n    return num;\n  };\n\n  useEffect(() => {\n    if (data.length > 0) {\n      const cData = [\n        {\n          color: interestLineColor,\n          points: massageData(\"Taxes & Interest\"),\n        },\n        {\n          color: purchasesLineColor,\n          points: massageData(\"Purchases\"),\n        },\n        {\n          color: paidLineColor,\n          points: massageData(\"Paid\"),\n        },\n        {\n          color: openingLineColor,\n          points: massageData(\"Opening Balance\"),\n        },\n      ];\n      setChartData([]);\n      setTimeout(() => {\n        setChartData(cData);\n      }, 100);\n      if (ref.current?.childNodes[2]?.childNodes[0]) {\n        ref.current.childNodes[2].childNodes[0].style.height = height + 10;\n      }\n    }\n  }, [data]);\n\n  const getMonthLocale = r => {\n    if (intl?.formatMessage) {\n      let date = \"\";\n      if (width > 450) {\n        date = moment(r).format(\"MMM\");\n        const first = date\n          .toLocaleString(\"default\", { month: \"short\" })\n          .toLowerCase();\n        const last = r.getFullYear();\n        date = `${intl.formatMessage({\n          id: first,\n          defaultMessage: first,\n        })} ${last}`;\n      } else {\n        date = moment(r).format(\"M\");\n      }\n      return date;\n    }\n  };\n\n  return (\n    <div ref={ref} className='position-relative'>\n      <i\n        className={`fa fa-${\n          toggleChart ? \"minus\" : \"plus\"\n        }-circle roundedButton`}\n        onClick={() => setToggleChart(!toggleChart)}\n        style={!toggleChart ? { position: \"absolute\", top: \"15px\" } : {}}\n      />\n      {toggleChart && chartData.length > 0 && (\n        <>\n          <div className='row rounded pt-2'>\n            <div className='col-md-3 small d-flex justify-content-between align-items-center'>\n              <span>\n                <i\n                  className={`fa fa-circle text-warning me-2`}\n                  title={intl.formatMessage({\n                    id: \"openingBalance\",\n                    defaultMessage: \"openingBalance\",\n                  })}\n                />\n                <FormattedMessage\n                  id='openingBalance'\n                  defaultMessage='openingBalance'\n                />\n              </span>\n              <span>\n                <span className='pe-2'>\n                  <FormattedMessage id='year' defaultMessage='year' />\n                </span>\n                {data[0]?.month.split(\"-\")[1]}\n              </span>\n            </div>\n            <div className='col-md-3 small d-flex justify-content-between align-items-center'>\n              <span>\n                <i\n                  className='fa fa-circle text-primary me-2'\n                  title={intl.formatMessage({\n                    id: \"purchases\",\n                    defaultMessage: \"purchases\",\n                  })}\n                />\n                <FormattedMessage id='purchases' defaultMessage='purchases' />\n              </span>\n              <span>{`${getTotal(\"Purchases\")}`}</span>\n            </div>\n            <div className='col-md-3 small d-flex justify-content-between align-items-center'>\n              <span>\n                <i\n                  className='fa fa-circle text-success me-2'\n                  title={intl.formatMessage({\n                    id: \"payments\",\n                    defaultMessage: \"payments\",\n                  })}\n                />\n                <FormattedMessage id='payments' defaultMessage='payments' />\n              </span>\n              <span>{`${getTotal(\"Paid\")}`}</span>\n            </div>\n            <div className='col-md-3 small d-flex flex-nowrap justify-content-between align-items-center'>\n              <span>\n                <i\n                  className='fa fa-circle text-danger me-2'\n                  title={intl.formatMessage({\n                    id: \"taxesAndInterest\",\n                    defaultMessage: \"taxesAndInterest\",\n                  })}\n                />\n                <FormattedMessage\n                  id='taxesAndInterest'\n                  defaultMessage='taxesAndInterest'\n                />\n              </span>\n              <span>{`${getTotal(\"Taxes & Interest\")}`}</span>\n            </div>\n          </div>\n          <LineChart\n            data={chartData}\n            id={svgWrapperId}\n            margins={{\n              top: 50,\n              right: width > 450 ? 80 : 30,\n              bottom: 50,\n              left: 135,\n            }}\n            width={width}\n            isDate={true}\n            height={height}\n            xLabel={intl.formatMessage({\n              id: \"month\",\n              defaultMessage: \"month\",\n            })}\n            yLabel={intl.formatMessage({\n              id: \"amount\",\n              defaultMessage: \"amount\",\n            })}\n            onPointHover={d =>\n              helpers.countryCurrencyLacSeperator(\n                localeContext.localeLanguage,\n                localeContext.localeCurrency,\n                d.y,\n                2,\n              )\n            }\n            tooltipClass={`line-chart-tooltip`}\n            ticks={12}\n            xDisplay={(r, i) => {\n              return getMonthLocale(r);\n            }}\n            onPointClick={(e, c) => onCcMonthYearSelected(c.month)}\n          />\n          {ccMonthYearSelected &&\n            dateRanges &&\n            ccDetails &&\n            dateRanges.payDate && (\n              <div className='pt-4'>\n                <div className='row mt-10'>\n                  <div className='col-md-3 small d-flex justify-content-between'>\n                    <span>\n                      <FormattedMessage id='month' defaultMessage='month' />\n                    </span>\n                    <span>\n                      {getMonthLocale(\n                        new Date(`\n                        ${ccMonthYearSelected.split(\"-\")[1]}/${\n                          helpers.strToNumMonth[\n                            ccMonthYearSelected.split(\"-\")[0]\n                          ]\n                        }/01`),\n                      )}\n                    </span>\n                  </div>\n                  <div className='col-md-3 small d-flex justify-content-between align-items-center'>\n                    <i className='fa fa-credit-card-alt' />\n                    <span>{ccDetails.credit_card_number}</span>\n                  </div>\n                  <div className='col-md-3 small d-flex justify-content-between align-items-center'>\n                    <span>\n                      <FormattedMessage id='cycle' defaultMessage='cycle' />\n                    </span>\n                    <span>\n                      {dateRanges.sDateStr}{\" \"}\n                      <FormattedMessage id='to' defaultMessage='to' />{\" \"}\n                      {dateRanges.eDateStr}\n                    </span>\n                  </div>\n                  <div className='col-md-3 small d-flex justify-content-between'>\n                    <span>\n                      <FormattedMessage id='payDate' defaultMessage='payDate' />\n                    </span>\n                    <span>{dateRanges.payDate}</span>\n                  </div>\n                </div>\n              </div>\n            )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default injectIntl(CreditCardUsage);\n","import React, { useState, useEffect, useContext } from \"react\";\n// https://www.npmjs.com/package/react-donut-chart\nimport CreditCardUsage from \"./CreditCardUsage\";\nimport { AccountContext } from \"./AccountPlanner\";\n\nconst CreditCardChart = props => {\n  const accountContext = useContext(AccountContext);\n  const { ccChartData, ccYearSelected, ccDetails, onCcMonthYearSelected } =\n    accountContext;\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (ccChartData.length > 0) {\n      const data = ccChartData.map(l => {\n        return {\n          month: l.month,\n          cData: [\n            {\n              label: \"Opening Balance\",\n              value: l.data.ob,\n            },\n            {\n              label: \"Paid\",\n              value: l.data.paid,\n            },\n            {\n              label: \"Purchases\",\n              value: l.data.purchases,\n            },\n            {\n              label: \"Taxes & Interest\",\n              value: l.data.taxesInterest,\n            },\n            {\n              label: \"Balance\",\n              value: l.data.balance,\n            },\n          ],\n        };\n      });\n      setData(data);\n    }\n  }, [ccChartData, ccDetails, ccYearSelected, onCcMonthYearSelected]);\n\n  // Interface\n  // {month: \"Dec-2020\", total: \"0.00\", category: \"Bike petrol\"}\n  // cData = { label: \"Mobile bill\", value: 120 },\n\n  return <CreditCardUsage data={data} />;\n};\n\nexport default CreditCardChart;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal } from \"react-bootstrap\";\nimport apiInstance from \"../../services/apiServices\";\nimport helpers from \"../../helpers\";\nimport Loader from \"../resuable/Loader\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { LocaleContext } from \"../../contexts/LocaleContext\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nconst PlanInfoModal = props => {\n  const intl = useIntl();\n  const { monthYearSelected, bankSelected, selectedPlan, ...rest } = props;\n  const userContext = useContext(UserContext);\n  const localeContext = useContext(LocaleContext);\n  const [table, setTable] = useState([]);\n  const [allLoader, setAllLoader] = useState(true);\n  useEffect(() => {\n    setAllLoader(true);\n    const a = getPlanDetails();\n    Promise.all([a]).then(r => {\n      const data = r[0];\n      setTable(data);\n      setAllLoader(false);\n    });\n  }, [monthYearSelected, bankSelected, selectedPlan]);\n\n  const getPlanDetails = () => {\n    const formdata = new FormData();\n    formdata.append(\"startDate\", selectedPlan.startDate);\n    formdata.append(\"endDate\", selectedPlan.endDate);\n    formdata.append(\"bankSelected\", bankSelected);\n    formdata.append(\"criteria\", selectedPlan.criteria);\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance\n      .post(\"/account_planner/getPlanDetails\", formdata)\n      .then(res => res.data.response)\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  const loaderComp = () => {\n    return (\n      <div className='relativeSpinner'>\n        <Loader />\n      </div>\n    );\n  };\n  const doDifference = (plan, actual) => {\n    if (selectedPlan.criteria === \"E0\") {\n      // no plan\n      return Number(plan);\n    }\n    if (selectedPlan.criteria === \"0TO100\") {\n      // bad plan\n      return Number(plan) - Number(actual);\n    }\n    if (selectedPlan.criteria === \"E100\") {\n      // acheived plan\n      return Number(plan) - Number(actual);\n    }\n    if (selectedPlan.criteria === \"G100\") {\n      // Good plan\n      return Number(plan) - Number(actual);\n    }\n    return 0;\n  };\n  const getTotal = array => {\n    const total = array.reduce((a, b) => a + b, 0);\n    return helpers.countryCurrencyLacSeperator(\n      localeContext.localeLanguage,\n      localeContext.localeCurrency,\n      total,\n      2,\n    );\n  };\n  const commitTotal = [];\n  const plannedTotal = [];\n  const diffTotal = [];\n  return (\n    <Modal {...rest} style={{ zIndex: 10000 }}>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          {intl.formatMessage({\n            id: monthYearSelected.split(\"-\")[0].toLowerCase(),\n            defaultMessage: monthYearSelected.split(\"-\")[0].toLowerCase(),\n          })}{\" \"}\n          {monthYearSelected.split(\"-\")[1]}{\" \"}\n          <i className='fa fa-angle-double-right' /> {selectedPlan.label}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body\n        className={`rounded-bottom ${\n          userContext.userData.theme === \"dark\"\n            ? \"bg-dark text-white\"\n            : \"bg-white text-dark\"\n        }`}\n      >\n        <div className='table-responsive p-10'>\n          {!allLoader ? (\n            <table\n              className={`table ${\n                userContext.userData.theme === \"dark\"\n                  ? \"table-dark\"\n                  : \"table-white\"\n              }`}\n            >\n              <tbody>\n                <tr>\n                  <th>#</th>\n                  <th>\n                    <FormattedMessage id='expense' defaultMessage='expense' />\n                  </th>\n                  <th>\n                    <FormattedMessage\n                      id='committed'\n                      defaultMessage='committed'\n                    />\n                  </th>\n                  <th>\n                    <FormattedMessage id='plan' defaultMessage='plan' />\n                  </th>\n                  <th>\n                    <FormattedMessage\n                      id='difference'\n                      defaultMessage='difference'\n                    />\n                  </th>\n                </tr>\n                {table && table.length > 0 ? (\n                  table.map((t, i) => {\n                    const diff = doDifference(\n                      t.inc_exp_plan_amount,\n                      t.inc_exp_amount,\n                    );\n                    commitTotal.push(Number(t.inc_exp_amount));\n                    plannedTotal.push(Number(t.inc_exp_plan_amount));\n                    const dArr = doDifference(\n                      t.inc_exp_plan_amount,\n                      t.inc_exp_amount,\n                    );\n                    diffTotal.push(dArr);\n                    return (\n                      <tr key={i}>\n                        <td>{i + 1}.</td>\n                        <td>{t.inc_exp_name}</td>\n                        <td>{t.inc_exp_amount}</td>\n                        <td>{t.inc_exp_plan_amount}</td>\n                        <td\n                          className={`text-${diff >= 0 ? \"success\" : \"danger\"}`}\n                        >\n                          {diff >= 0\n                            ? `+${helpers.countryCurrencyLacSeperator(\n                                localeContext.localeLanguage,\n                                localeContext.localeCurrency,\n                                diff,\n                                2,\n                              )}`\n                            : `(${helpers.countryCurrencyLacSeperator(\n                                localeContext.localeLanguage,\n                                localeContext.localeCurrency,\n                                diff,\n                                2,\n                              )})`}\n                        </td>\n                      </tr>\n                    );\n                  })\n                ) : (\n                  <tr>\n                    <td className='text-center py-3' colSpan='5'>\n                      <FormattedMessage\n                        id='noRecordsGenerated'\n                        defaultMessage='noRecordsGenerated'\n                      />\n                    </td>\n                  </tr>\n                )}\n                {table && table.length > 0 && (\n                  <tr>\n                    <td>\n                      <FormattedMessage id='total' defaultMessage='total' />\n                    </td>\n                    <td />\n                    <td>{getTotal(commitTotal)}</td>\n                    <td>{getTotal(plannedTotal)}</td>\n                    <td>{getTotal(diffTotal)}</td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          ) : (\n            loaderComp()\n          )}\n        </div>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nPlanInfoModal.propTypes = {\n  property: PropTypes.string,\n};\n\nexport default PlanInfoModal;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport helpers from \"../../helpers\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { LocaleContext } from \"../../contexts/LocaleContext\";\n\nconst TallyModal = props => {\n  const intl = useIntl();\n  const userContext = useContext(UserContext);\n  const localeContext = useContext(LocaleContext);\n  const { totals, ...rest } = props;\n  const [appplicationBalance, setApplicationBalance] = useState(0);\n  const [bankBalance, setBankBalance] = useState(0);\n  const [unAccounted, setUnAccounted] = useState(0);\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [grandTotal, setGrandTotal] = useState(0);\n  const [progressPercent, setProgressPercent] = useState(0);\n\n  useEffect(() => {\n    if (totals.length > 0) {\n      let live =\n        totals.length > 0 &&\n        totals.filter(t => t.flagString === \"danger\" && t.amount > 0);\n      live = live.length > 0 ? live[0].amount : 0;\n      live = live.toFixed(2);\n      live = Number(live);\n      setApplicationBalance(live);\n    }\n  }, [totals]);\n\n  useEffect(() => {\n    let GrandTotal =\n      appplicationBalance - bankBalance - unAccounted - walletBalance;\n    GrandTotal = Math.round(GrandTotal * 100) / 100;\n    GrandTotal = GrandTotal === -0 ? 0 : GrandTotal;\n    setGrandTotal(GrandTotal);\n\n    const numerator = Number(appplicationBalance) - GrandTotal;\n    let percent = numerator / appplicationBalance;\n    percent = percent * 100;\n    percent = percent > 100 ? 100 : percent;\n    percent = isNaN(percent) ? 100 : percent;\n    setProgressPercent(percent);\n  }, [appplicationBalance, bankBalance, unAccounted, walletBalance]);\n\n  const getStatus = netValue => {\n    return {\n      label:\n        netValue === 0\n          ? intl.formatMessage({ id: \"solved\", defaultMessage: \"solved\" })\n          : netValue > 0\n          ? intl.formatMessage({ id: \"behind\", defaultMessage: \"behind\" })\n          : intl.formatMessage({ id: \"ahead\", defaultMessage: \"ahead\" }),\n      class:\n        netValue === 0\n          ? \"text-success\"\n          : netValue > 0\n          ? \"text-danger\"\n          : \"text-primary\",\n    };\n  };\n\n  return (\n    <Modal {...rest} style={{ zIndex: 10000 }}>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <FormattedMessage id='tally' defaultMessage='tally' />\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body\n        className={`rounded-bottom ${\n          userContext.userData.theme === \"dark\" ? \"bg-dark\" : \"bg-white\"\n        }`}\n      >\n        <div className={`tallyModal text-dark`}>\n          <div className='py-2 form-floating'>\n            <input\n              id='appplicationBalance'\n              value={appplicationBalance}\n              onChange={e => setApplicationBalance(Number(e.target.value))}\n              placeholder={intl.formatMessage({\n                id: \"balance\",\n                defaultMessage: \"balance\",\n              })}\n              type='number'\n              className='form-control'\n              readOnly={true}\n            />\n            <label htmlFor='appplicationBalance'>\n              <FormattedMessage id='balance' defaultMessage='balance' />\n            </label>\n          </div>\n          <div className='py-2 form-floating'>\n            <input\n              id='bankBalance'\n              // value={bankBalance}\n              onChange={e => setBankBalance(Number(e.target.value))}\n              type='number'\n              className='form-control'\n              placeholder={`${intl.formatMessage({\n                id: \"bank\",\n                defaultMessage: \"bank\",\n              })} ${intl.formatMessage({\n                id: \"balance\",\n                defaultMessage: \"balance\",\n              })}`}\n            />\n            <label htmlFor='bankBalance'>\n              <FormattedMessage id='bank' defaultMessage='bank' />{\" \"}\n              <FormattedMessage id='balance' defaultMessage='balance' />\n            </label>\n          </div>\n          <div className='py-2 form-floating'>\n            <input\n              id='unAccounted'\n              // value={unAccounted}\n              onChange={e => setUnAccounted(Number(e.target.value))}\n              type='number'\n              className='form-control'\n              placeholder={intl.formatMessage({\n                id: \"unaccounted\",\n                defaultMessage: \"unaccounted\",\n              })}\n            />\n            <label htmlFor='unAccounted'>\n              <FormattedMessage id='unaccounted' defaultMessage='unaccounted' />\n            </label>\n          </div>\n          <div className='py-2 form-floating'>\n            <input\n              id='walletBalance'\n              // value={walletBalance}\n              onChange={e => setWalletBalance(Number(e.target.value))}\n              type='number'\n              className='form-control'\n              placeholder={`${intl.formatMessage({\n                id: \"wallet\",\n                defaultMessage: \"wallet\",\n              })} ${intl.formatMessage({\n                id: \"balance\",\n                defaultMessage: \"balance\",\n              })}`}\n            />\n            <label htmlFor='walletBalance'>\n              <FormattedMessage id='wallet' defaultMessage='wallet' />{\" \"}\n              <FormattedMessage id='balance' defaultMessage='balance' />\n            </label>\n          </div>\n          <div className='py-2'>\n            <div className='text-center p-10'>\n              <h5 className={getStatus(grandTotal).class}>\n                {getStatus(grandTotal).label}&nbsp;\n                <i\n                  className={`fa ${\n                    progressPercent === 100 ? \"fa-check\" : \"fa-times-circle\"\n                  }`}\n                />\n              </h5>\n            </div>\n            <div className={`text-center ${getStatus(grandTotal).class}`}>\n              {helpers.countryCurrencyLacSeperator(\n                localeContext.localeLanguage,\n                localeContext.localeCurrency,\n                grandTotal,\n                2,\n              )}\n            </div>\n          </div>\n          <div\n            className={`custom-progress-bar ${\n              progressPercent < 100 ? \"danger\" : \"success\"\n            }`}\n            style={{ width: `${progressPercent}%` }}\n          ></div>\n        </div>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default TallyModal;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { AccountContext } from \"./AccountPlanner\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport apiInstance from \"../../services/apiServices\";\nimport moment from \"moment\";\nimport FilterSelect from \"../configuration/backend/FormElements/FilterSelect\";\n\nconst FundTransferModal = props => {\n  const accountContext = useContext(AccountContext);\n  const { srcArr, ...rest } = props;\n  const { incExpList } = accountContext;\n  const [sources, setSources] = useState([]);\n  const [dest, setDest] = useState([]);\n  const intl = useIntl();\n  const userContext = useContext(UserContext);\n  const [formData, setFormData] = useState({\n    amount: \"\",\n    source: \"\",\n    dest: \"\",\n    description: intl.formatMessage({\n      id: \"fundTransfer\",\n      defaultMessage: \"fundTransfer\",\n    }),\n    category: \"\",\n    availableFunds: 0,\n  });\n\n  useEffect(() => {\n    if (srcArr && srcArr.length > 0) {\n      setSources(srcArr);\n    }\n  }, [srcArr]);\n\n  const onsubmit = () => {\n    const formdata = new FormData();\n    formdata.append(\"amount\", formData.amount);\n    formdata.append(\"source\", formData.source);\n    formdata.append(\"dest\", formData.dest);\n    formdata.append(\n      \"description\",\n      `${formData.description}: ${\n        sources.filter(f => f.id === formData.source)[0].value\n      } -> ${sources.filter(f => f.id === formData.dest)[0].value}`,\n    );\n    formdata.append(\"category\", formData.category);\n    formdata.append(\"date\", moment(new Date()).format(\"YYYY-MM-DD\"));\n    formdata.append(\n      \"dateTime\",\n      moment(new Date()).format(\"YYYY-MM-DD HH:mm:ss\"),\n    );\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    apiInstance\n      .post(\"/account_planner/postFundTransfer\", formdata)\n      .then(response => {\n        const { data } = response;\n        if (response && data && data.response) {\n          userContext.renderToast({\n            message: intl.formatMessage({\n              id: \"fundTransferSuccess\",\n              defaultMessage: \"fundTransferSuccess\",\n            }),\n          });\n          setFormData(ev => ({\n            ...ev,\n            source: \"\",\n            dest: \"\",\n            amount: \"\",\n            category: \"\",\n            description: intl.formatMessage({\n              id: \"fundTransfer\",\n              defaultMessage: \"fundTransfer\",\n            }),\n          }));\n        } else {\n          userContext.renderToast({\n            type: \"error\",\n            icon: \"fa fa-times-circle\",\n            message: intl.formatMessage({\n              id: \"fundTransferFail\",\n              defaultMessage: \"fundTransferFail\",\n            }),\n          });\n        }\n      })\n      .catch(err => {\n        userContext.renderToast({\n          type: \"error\",\n          icon: \"fa fa-times-circle\",\n          message: intl.formatMessage({\n            id: \"unableToReachServer\",\n            defaultMessage: \"unableToReachServer\",\n          }),\n        });\n      });\n  };\n  useEffect(() => {\n    const postData = new FormData();\n    postData.append(\"id\", formData.source);\n    postData.append(\"appId\", userContext.userConfig.appId);\n    apiInstance\n      .post(\"/account_planner/getFundDetails\", postData)\n      .then(res => {\n        setFormData(ev => ({\n          ...ev,\n          availableFunds: res.data.response[0].availableFunds,\n        }));\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, [formData.source]);\n\n  const onSourceChange = srcId => {\n    const bSrc = [...sources];\n    const des = bSrc.filter(f => f.id !== srcId);\n    setDest(des);\n    setFormData(ev => ({\n      ...ev,\n      source: srcId,\n      dest: \"\",\n      amount: \"\",\n      category: \"\",\n    }));\n  };\n\n  return (\n    <Modal {...rest} style={{ zIndex: 10000 }}>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <FormattedMessage id='fundTransfer' defaultMessage='fundTransfer' />\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body\n        className={`p-0 rounded-bottom ${\n          userContext.userData.theme === \"dark\"\n            ? \"bg-dark text-white\"\n            : \"bg-white text-dark\"\n        }`}\n      >\n        <div className={`row m-0`}>\n          <div className='col-5 pt-3'>\n            <div className='py-3 text-center'>\n              <div>\n                <i className='fa fa-bank fa-3x' />\n              </div>\n              <small>\n                <FormattedMessage id='sourceBank' defaultMessage='sourceBank' />\n              </small>\n            </div>\n            <div className='form-floating mt-1'>\n              <FilterSelect\n                placeholder={`${intl.formatMessage({\n                  id: \"selectSourceAccount\",\n                  defaultMessage: \"selectSourceAccount\",\n                })}`}\n                onChange={(ind, value, pKey) => {\n                  onSourceChange(value);\n                }}\n                element={{\n                  fetch: {\n                    dropDownList: sources.map(row => ({\n                      id: row.id,\n                      value: row.value,\n                    })),\n                  },\n                  searchable: true,\n                }}\n                value={formData.source}\n                type={\"single\"}\n                searchable={true}\n                theme={userContext.userData.theme}\n              />\n              {Number(formData.availableFunds) > 0 && (\n                <small className='text-danger'>\n                  <FormattedMessage id='balance' defaultMessage='balance' />:\n                  {Number(formData.availableFunds).toLocaleString()}\n                </small>\n              )}\n            </div>\n          </div>\n          <div className='col-2 d-flex align-items-center justify-content-center'>\n            <i className='fa fa-arrow-circle-right fa-3x' />\n          </div>\n          <div className='col-5 pt-3'>\n            <div className='py-3 text-center'>\n              <div>\n                <i className='fa fa-bank fa-3x' />\n              </div>\n              <small>\n                <FormattedMessage\n                  id='destinationBank'\n                  defaultMessage='destinationBank'\n                />\n              </small>\n            </div>\n            <div className='form-floating mt-1'>\n              <FilterSelect\n                placeholder={`${intl.formatMessage({\n                  id: \"selectDestinationAccount\",\n                  defaultMessage: \"selectDestinationAccount\",\n                })}`}\n                onChange={(ind, value, pKey) => {\n                  setFormData(ev => ({ ...ev, dest: value }));\n                }}\n                element={{\n                  fetch: {\n                    dropDownList: dest.map(row => ({\n                      id: row.id,\n                      value: row.value,\n                    })),\n                  },\n                  searchable: true,\n                }}\n                value={formData.dest}\n                type={\"single\"}\n                searchable={true}\n                theme={userContext.userData.theme}\n              />\n            </div>\n          </div>\n          <div className='col-12 pt-3'>\n            <div className='form-floating'>\n              <FilterSelect\n                placeholder={`${intl.formatMessage({\n                  id: \"category\",\n                  defaultMessage: \"category\",\n                })}`}\n                onChange={(ind, value, pKey) => {\n                  setFormData(ev => ({ ...ev, category: value }));\n                }}\n                element={{\n                  fetch: {\n                    dropDownList: incExpList.map(row => ({\n                      id: row.id,\n                      value: row.value,\n                    })),\n                  },\n                  searchable: true,\n                }}\n                value={formData.category}\n                type={\"single\"}\n                searchable={true}\n                theme={userContext.userData.theme}\n              />\n            </div>\n          </div>\n          <div className='col-12 pt-3'>\n            <div className='form-floating'>\n              <input\n                id='amount'\n                value={formData.amount}\n                onChange={e =>\n                  setFormData(ev => ({ ...ev, amount: e.target.value }))\n                }\n                placeholder={intl.formatMessage({\n                  id: \"amount\",\n                  defaultMessage: \"amount\",\n                })}\n                type='number'\n                className='form-control form-control-sm'\n              />\n              <label htmlFor='amount' className='text-dark'>\n                <FormattedMessage id='amount' defaultMessage='amount' />\n              </label>\n            </div>\n          </div>\n          <div className='col-12 py-3'>\n            <button\n              disabled={\n                !(\n                  formData.dest &&\n                  formData.amount &&\n                  formData.source &&\n                  formData.category\n                )\n              }\n              className='btn btn-bni w-100 border-0'\n              onClick={() => onsubmit()}\n            >\n              <FormattedMessage id='submit' defaultMessage='submit' />\n            </button>\n          </div>\n        </div>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default FundTransferModal;\n","/* eslint-disable new-cap */\n/* eslint-disable camelcase */\nimport React, { useEffect, useState, useContext } from \"react\";\nimport BackendCore from \"../../components/configuration/backend/BackendCore\";\nimport helpers from \"../../helpers\";\nimport apiInstance from \"../../services/apiServices\";\nimport { Tooltip, OverlayTrigger } from \"react-bootstrap\";\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport PlanInfoModal from \"./PlanInfoModal\";\nimport TallyModal from \"./TallyModal\";\nimport FundTransferModal from \"./FundTransferModal\";\nimport Loader from \"../resuable/Loader\";\nimport { AccountContext } from \"./AccountPlanner\";\nimport CsvDownloader from \"react-csv-downloader\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport moment from \"moment\";\nimport { MyAlertContext } from \"../../contexts/AlertContext\";\nimport { UpgradeHeading, UpgradeContent } from \"../payment/Upgrade\";\nimport { useQuery } from \"../GlobalHeader/queryParamHook\";\n\nconst MonthExpenditureTable = (props, context) => {\n  const accountContext = useContext(AccountContext);\n  const userContext = useContext(UserContext);\n  const myAlertContext = useContext(MyAlertContext);\n  const { intl, ...rest } = props;\n  const { incExpList, bankList, bankSelected, bankDetails, monthYearSelected } =\n    accountContext;\n  const incExpListDropDownObject = {\n    fetch: {\n      dropDownList: incExpList.map(({ id, value }) => ({ id, value })),\n    },\n    searchable: true,\n  };\n  const bankListArray = {\n    fetch: {\n      dropDownList: bankList,\n    },\n    searchable: true,\n  };\n  const [rElements, setRelements] = useState([]);\n  const [planCards, setPlanCards] = useState([\n    {\n      key: \"goodPlans\",\n      flagString: \"success\",\n      planString: \"goodPlans\",\n      planCount: 0,\n      planTotal: 0,\n    },\n    {\n      key: \"achievedPlans\",\n      flagString: \"info\",\n      planString: \"achievedPlans\",\n      planCount: 0,\n      planTotal: 0,\n    },\n    {\n      key: \"badPlans\",\n      flagString: \"danger\",\n      planString: \"badPlans\",\n      planCount: 0,\n      planTotal: 0,\n    },\n    {\n      key: \"noPlans\",\n      flagString: \"warning\",\n      planString: \"noPlans\",\n      planCount: 0,\n      planTotal: 0,\n    },\n  ]);\n  const [dbData, setDbData] = useState({});\n  const [totals, setTotals] = useState([\n    {\n      amount: 0,\n      label: \"income\",\n      flagString: \"success\",\n    },\n    {\n      amount: 0,\n      label: \"expense\",\n      flagString: \"info\",\n    },\n    {\n      amount: 0,\n      label: \"balance\",\n      flagString: \"danger\",\n    },\n    {\n      amount: 0,\n      label: \"planning\",\n      flagString: \"warning\",\n    },\n  ]);\n  const [openPlanModal, setOpenPlanModal] = useState(false); // change to false\n  const [openTallyModal, setOpenTallyModal] = useState(false); // change to false\n  const [fundTransferModal, setFundTransferModal] = useState(false); // change to false\n  const [selectedPlan, setSelectedPlan] = useState({});\n  const [loader, setLoader] = useState(false);\n  const columns = [\n    { displayName: \"Transaction\", id: \"inc_exp_name\" },\n    { displayName: \"Date\", id: \"inc_exp_date\" },\n    { displayName: \"Type\", id: \"inc_exp_type\" },\n    { displayName: \"Amount\", id: \"inc_exp_amount\" },\n  ];\n  const now = helpers.getNow();\n  const [monthExpenditureConfig, setMonthExpenditureConfig] = useState({});\n  const defApiParam = {\n    start: 0,\n    limit: 10,\n    searchString: \"\",\n  };\n  const [apiParams, setApiParams] = useState(null);\n  const [selMonthYear, setSelMonthYear] = useState(null);\n\n  useEffect(() => {\n    setMonthExpenditureConfig({\n      config: {\n        header: {\n          searchPlaceholder: intl.formatMessage({\n            id: \"searchHere\",\n            defaultMessage: \"searchHere\",\n          }),\n          searchable: true,\n        },\n        footer: {\n          total: {\n            title: intl.formatMessage({ id: \"total\", defaultMessage: \"total\" }),\n            locale: bankDetails[0].bank_locale,\n            currency: bankDetails[0].bank_currency,\n            maxDecimal: 2,\n          },\n          pagination: {\n            currentPage: \"last\",\n            maxPagesToShow: 5,\n          },\n        },\n      },\n      rowElements: [],\n      Table: \"income_expense\",\n      TableRows: [\n        \"inc_exp_id\",\n        \"inc_exp_name\",\n        \"inc_exp_amount\",\n        \"inc_exp_plan_amount\",\n        \"inc_exp_type\",\n        \"inc_exp_date\",\n        \"inc_exp_category\",\n        \"inc_exp_bank\",\n        \"inc_exp_comments\",\n        \"inc_exp_added_at\",\n        \"inc_exp_is_planned\",\n      ],\n      TableAliasRows: [\n        \"id\",\n        \"transaction\",\n        \"amount\",\n        \"plan\",\n        \"type\",\n        \"date\",\n        \"category\",\n        \"bank\",\n        \"comments\",\n        \"recorded\",\n        \"isPlanned\",\n      ].map(al => intl.formatMessage({ id: al, defaultMessage: al })),\n      defaultValues: [\n        { inc_exp_type: \"Dr\" },\n        { inc_exp_amount: 0 },\n        { inc_exp_plan_amount: 0 },\n        { inc_exp_date: moment(new Date()).format(\"YYYY-MM-DD\") },\n      ],\n      showTooltipFor: [\"inc_exp_name\", \"inc_exp_comments\"],\n    });\n  }, [intl]);\n\n  const getAllApi = cb => {\n    if (selMonthYear) {\n      setDbData({});\n      setLoader(true);\n      const [smonth, year] = selMonthYear.split(\"-\");\n      const month = helpers.strToNumMonth[smonth];\n      const calDays = new Date(year, month, 0).getDate();\n      const wClause = `inc_exp_date between \"${year}-${month}-01\" and \"${year}-${month}-${calDays}\" and inc_exp_bank = ${bankSelected} and inc_exp_appId = \"${userContext.userConfig.appId}\"`;\n      const a = getBackendAjax(wClause);\n      Promise.all([a])\n        .then(async r => {\n          const data = r[0].data.response;\n          setDbData(data);\n          const rEle = [\n            \"checkbox\",\n            \"textbox\",\n            \"number\",\n            moment(data?.table[0]?.inc_exp_date).isAfter() ? \"number\" : \"label\",\n            {\n              radio: {\n                radioList: [\n                  {\n                    label: intl.formatMessage({\n                      id: \"credit\",\n                      defaultMessage: \"credit\",\n                    }),\n                    value: \"Cr\",\n                    checked: false,\n                  },\n                  {\n                    label: intl.formatMessage({\n                      id: \"debit\",\n                      defaultMessage: \"debit\",\n                    }),\n                    value: \"Dr\",\n                    checked: true,\n                  },\n                ],\n              },\n            },\n            \"date\",\n            incExpListDropDownObject,\n            bankListArray,\n            \"textbox\",\n            \"relativeTime\",\n            \"boolean\",\n          ];\n          setRelements(rEle);\n          setMonthExpenditureConfig(prev => ({\n            ...prev,\n            ...{\n              rowElements: rEle,\n            },\n          }));\n          typeof cb === \"function\" && cb(data);\n        })\n        .finally(() => setLoader(false));\n    }\n  };\n\n  const getBackendAjax = wClause => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    formdata.append(\"TableRows\", monthExpenditureConfig.TableRows);\n    formdata.append(\"Table\", monthExpenditureConfig.Table);\n    formdata.append(\"limit\", apiParams.limit);\n    formdata.append(\"start\", apiParams.start);\n    formdata.append(\"searchString\", apiParams.searchString);\n    if (wClause) {\n      formdata.append(\"WhereClause\", wClause);\n    }\n    return apiInstance.post(\"/account_planner/getAccountPlanner\", formdata);\n  };\n\n  const getPlanSum = () => {\n    const [smonth, year] = selMonthYear.split(\"-\");\n    const month = helpers.strToNumMonth[smonth];\n    const calDays = new Date(year, month, 0).getDate();\n\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    formdata.append(\"bank\", bankSelected);\n    formdata.append(\"startDate\", `${year}-${month}-01`);\n    formdata.append(\"endDate\", `${year}-${month}-${calDays}`);\n    return apiInstance.post(\"/account_planner/getPlanSum\", formdata);\n  };\n\n  const renderCloneTooltip = (props, content) => (\n    <Tooltip id='button-tooltip-1' className='in show' {...rest}>\n      {content}\n    </Tooltip>\n  );\n\n  const calculatePlanning = () => {\n    getPlanSum()\n      .then(res => {\n        const planData = res.data.response;\n        const plan = {\n          goodPlans: planData.goodPlans,\n          goodPlanCount: planData.goodPlanCount,\n          badPlans: planData.badPlans,\n          badPlanCount: planData.badPlanCount,\n          noPlans: planData.noPlans,\n          noPlanCount: planData.noPlanCount,\n          achievedPlans: planData.achievedPlans,\n          achievedPlanCount: planData.achievedPlanCount,\n        };\n\n        const totCards = [\n          { planCount: plan.goodPlanCount, planTotal: plan.goodPlans },\n          { planCount: plan.achievedPlanCount, planTotal: plan.achievedPlans },\n          {\n            planCount: plan.badPlanCount,\n            planTotal: plan.badPlans,\n          },\n          {\n            planCount: plan.noPlanCount,\n            planTotal: plan.noPlans,\n          },\n        ];\n\n        const newCards = planCards.map((p, i) => ({\n          ...p,\n          planCount: totCards[i].planCount,\n          planTotal: totCards[i].planTotal,\n        }));\n        setPlanCards(newCards);\n      })\n      .catch(e => console.log(\"bbb\", e));\n  };\n\n  const exportToPdf = () => {\n    const body = dbData?.table.map(\n      (\n        {\n          inc_exp_name,\n          inc_exp_amount,\n          inc_exp_plan_amount,\n          inc_exp_type,\n          inc_exp_date,\n          inc_exp_comments,\n        },\n        i,\n      ) => {\n        return [\n          i + 1,\n          inc_exp_name,\n          inc_exp_amount,\n          inc_exp_plan_amount,\n          inc_exp_type,\n          inc_exp_date,\n          inc_exp_comments,\n        ];\n      },\n    );\n    const head = [\n      \"#\",\n      \"Transaction\",\n      \"Amount\",\n      \"Planned\",\n      \"Type\",\n      \"Date\",\n      \"Comments\",\n    ];\n    const doc = new jsPDF();\n    doc.text(\n      `${helpers.stringToCapitalize(\n        monthExpenditureConfig.Table,\n      )} (${selMonthYear})`,\n      15,\n      10,\n    );\n    doc.autoTable({\n      styles: { overflow: \"linebreak\" },\n      theme: \"grid\",\n      head: [head],\n      body: [...body],\n    });\n\n    const mTotal = totals.map(total => helpers.lacSeperator(total.amount));\n\n    doc.autoTable({\n      styles: { overflow: \"linebreak\", halign: \"center\" },\n      theme: \"striped\",\n      head: [[\"Income\", \"Expense\", \"Balance\", \"Planning\"]],\n      body: [mTotal],\n    });\n\n    const pTotal = planCards.map(plan =>\n      helpers.lacSeperator(\n        plan?.planTotal,\n        monthExpenditureConfig?.config?.footer?.total?.currency,\n      ),\n    );\n    doc.autoTable({\n      styles: { overflow: \"linebreak\", halign: \"center\" },\n      theme: \"striped\",\n      head: [[\"Good Plans\", \"Achieved Plans\", \"Bad Plans\", \"No Plans\"]],\n      body: [pTotal],\n    });\n\n    doc.save(`${monthExpenditureConfig.Table}-${now}`);\n  };\n\n  const onPlanClick = key => {\n    const [smonth, year] = selMonthYear.split(\"-\");\n    const month = helpers.strToNumMonth[smonth];\n    const calDays = new Date(year, month, 0).getDate();\n    let clause = {\n      startDate: `${year}-${month}-01`,\n      endDate: `${year}-${month}-${calDays}`,\n      bankSelected,\n    };\n    switch (key) {\n      case \"goodPlans\":\n        clause = {\n          ...clause,\n          label: intl.formatMessage({\n            id: \"goodPlans\",\n            defaultMessage: \"goodPlans\",\n          }),\n          criteria: `G100`,\n        };\n        break;\n      case \"achievedPlans\":\n        clause = {\n          ...clause,\n          label: intl.formatMessage({\n            id: \"achievedPlans\",\n            defaultMessage: \"achievedPlans\",\n          }),\n          criteria: `E100`,\n        };\n        break;\n      case \"badPlans\":\n        clause = {\n          ...clause,\n          label: intl.formatMessage({\n            id: \"badPlans\",\n            defaultMessage: \"badPlans\",\n          }),\n          criteria: `0TO100`,\n        };\n        break;\n      case \"noPlans\":\n        clause = {\n          ...clause,\n          label: intl.formatMessage({\n            id: \"noPlans\",\n            defaultMessage: \"noPlans\",\n          }),\n          criteria: `E0`,\n        };\n        break;\n      default:\n    }\n    setOpenPlanModal(true);\n    setSelectedPlan(clause);\n  };\n\n  const onPostApi = response => {\n    const { status, data } = response;\n    if (status === 200) {\n      if (\n        response &&\n        data &&\n        typeof data.response === \"boolean\" &&\n        data.response !== null &&\n        data.response\n      ) {\n        accountContext.renderToast({\n          message: intl.formatMessage({\n            id: \"transactionSavedSuccessfully\",\n            defaultMessage: \"transactionSavedSuccessfully\",\n          }),\n        });\n      }\n      if (\n        response &&\n        data &&\n        typeof data.response === \"boolean\" &&\n        data.response !== null &&\n        data.response === false\n      ) {\n        accountContext.renderToast({\n          type: \"error\",\n          icon: \"fa fa-times-circle\",\n          message: intl.formatMessage({\n            id: \"noFormChangeFound\",\n            defaultMessage: \"noFormChangeFound\",\n          }),\n        });\n      }\n      if (response && data && data.response === null) {\n        myAlertContext.setConfig({\n          show: true,\n          className: \"alert-danger border-0 text-dark\",\n          type: \"danger\",\n          dismissible: true,\n          heading: <UpgradeHeading />,\n          content: <UpgradeContent />,\n        });\n      }\n      if (\n        response &&\n        data &&\n        typeof data.response === \"object\" &&\n        data.response !== null\n      ) {\n        let intlKey;\n        switch (data.response.number) {\n          case 1451:\n            intlKey = \"foreignKeyDeleteMessage\";\n            break;\n          default:\n            intlKey = \"\";\n        }\n        userContext.renderToast({\n          type: \"error\",\n          icon: \"fa fa-times-circle\",\n          message: intl.formatMessage({\n            id: intlKey,\n            defaultMessage: intlKey,\n          }),\n        });\n      }\n    } else {\n      accountContext.renderToast({\n        type: \"error\",\n        icon: \"fa fa-times-circle\",\n        message: intl.formatMessage({\n          id: \"unableToReachServer\",\n          defaultMessage: \"unableToReachServer\",\n        }),\n      });\n    }\n  };\n\n  const onReplanHandle = () => {\n    const relements = monthExpenditureConfig.rowElements.map((r, i) => {\n      if (i === 3) {\n        r = r === \"number\" ? \"label\" : \"number\";\n      }\n      return r;\n    });\n    setMonthExpenditureConfig({\n      ...monthExpenditureConfig,\n      ...{\n        rowElements: relements,\n      },\n    });\n    setRelements(relements);\n  };\n\n  const onChangeParams = obj => {\n    setApiParams(prev => ({\n      ...prev,\n      ...obj,\n    }));\n  };\n  /*\n   * Query params landing feature starts\n   */\n\n  const searchParams = useQuery();\n  const params = React.useMemo(\n    () => ({\n      fetch: searchParams.get(\"fetch\"),\n      search: searchParams.get(\"search\"),\n      date: searchParams.get(\"date\"),\n    }),\n    [searchParams],\n  );\n\n  useEffect(() => {\n    setSelMonthYear(monthYearSelected);\n    setTimeout(() => {\n      setApiParams(defApiParam);\n    }, 100);\n  }, [monthYearSelected]);\n\n  useEffect(() => {\n    if (\n      params.fetch &&\n      params.fetch === \"bankTransactions\" &&\n      params.search &&\n      params.date\n    ) {\n      const pMonth = moment(params.date).format(\"MMM-YYYY\");\n      setSelMonthYear(pMonth);\n      setTimeout(() => {\n        setApiParams({\n          start: 0,\n          limit: 10,\n          searchString: params.search,\n        });\n      }, 100);\n    } else {\n      setSelMonthYear(monthYearSelected);\n      setTimeout(() => {\n        setApiParams(defApiParam);\n      }, 100);\n    }\n  }, [params]);\n  /*\n   * Query params landing feature ends\n   */\n\n  useEffect(() => {\n    if (selMonthYear) {\n      calculatePlanning();\n    }\n  }, [selMonthYear]);\n\n  useEffect(() => {\n    getAllApi();\n  }, [apiParams]);\n\n  useEffect(() => {\n    if (Object.keys(dbData).length > 0) {\n      const totArray = [\n        dbData?.total?.inc_exp_amount[0]?.value,\n        dbData?.total?.inc_exp_amount[1]?.value,\n        dbData?.total?.inc_exp_amount[2]?.value,\n        dbData?.total?.inc_exp_plan_amount[0]?.value,\n      ];\n      const newTotals = totals.map((t, i) => ({\n        ...t,\n        amount: totArray[i],\n      }));\n      setTotals(newTotals);\n    }\n  }, [dbData]);\n\n  const onReFetchData = () => {\n    getAllApi();\n    calculatePlanning();\n  };\n\n  return (\n    <div className='settings'>\n      {openPlanModal && (\n        <PlanInfoModal\n          className='planInfoModal'\n          show={openPlanModal}\n          onHide={() => setOpenPlanModal(false)}\n          size='lg'\n          animation={false}\n          monthYearSelected={selMonthYear}\n          bankSelected={bankSelected}\n          selectedPlan={selectedPlan}\n        />\n      )}\n      {openTallyModal && (\n        <TallyModal\n          className='planInfoModal'\n          show={openTallyModal}\n          onHide={() => setOpenTallyModal(false)}\n          size='sm'\n          totals={totals}\n          animation={false}\n        />\n      )}\n      {fundTransferModal &&\n        monthExpenditureConfig.rowElements[7].fetch.dropDownList.length > 0 && (\n          <FundTransferModal\n            className=''\n            show={fundTransferModal}\n            onHide={() => setFundTransferModal(false)}\n            size='md'\n            animation={false}\n            srcArr={monthExpenditureConfig.rowElements[7].fetch.dropDownList}\n            incExpList={\n              monthExpenditureConfig.rowElements[6].fetch.dropDownList\n            }\n            centered\n          />\n        )}\n      <div className=''>\n        {!loader && dbData && Object.keys(dbData)?.length > 0 && (\n          <>\n            <div className='buttonGrid'>\n              {selMonthYear && dbData && (\n                <>\n                  <h6>\n                    {`${intl.formatMessage({\n                      id: selMonthYear.split(\"-\")[0].toLowerCase(),\n                      defaultMessage: selMonthYear.split(\"-\")[0].toLowerCase(),\n                    })} ${selMonthYear.split(\"-\")[1]}`}\n                  </h6>\n                  <div className='d-flex flex-row-reverse'>\n                    <div>\n                      <OverlayTrigger\n                        placement='left'\n                        delay={{ show: 250, hide: 400 }}\n                        overlay={renderCloneTooltip(\n                          props,\n                          intl.formatMessage({\n                            id: \"fundTransfer\",\n                            defaultMessage: \"fundTransfer\",\n                          }),\n                        )}\n                        triggerType='hover'\n                      >\n                        <i\n                          className={`fa fa-arrows-h roundedButton ${userContext.userData.theme} pull-right`}\n                          onClick={() => setFundTransferModal(true)}\n                        />\n                      </OverlayTrigger>\n                    </div>\n                    <div>\n                      <OverlayTrigger\n                        placement='top'\n                        delay={{ show: 250, hide: 400 }}\n                        overlay={renderCloneTooltip(\n                          props,\n                          intl.formatMessage(\n                            {\n                              id: \"exportToValue\",\n                              defaultMessage: \"exportToValue\",\n                            },\n                            { value: \"PDF\" },\n                          ),\n                        )}\n                        triggerType='hover'\n                      >\n                        <i\n                          onClick={() => exportToPdf()}\n                          className={`fa fa-file-pdf-o roundedButton ${userContext.userData.theme} pull-right`}\n                        />\n                      </OverlayTrigger>\n                    </div>\n                    <CsvDownloader\n                      datas={helpers.stripCommasInCSV(dbData?.table)}\n                      filename={`Income-Expense-${now}.csv`}\n                      columns={columns}\n                    >\n                      <OverlayTrigger\n                        placement='top'\n                        delay={{ show: 250, hide: 400 }}\n                        overlay={renderCloneTooltip(\n                          props,\n                          intl.formatMessage(\n                            {\n                              id: \"exportToValue\",\n                              defaultMessage: \"exportToValue\",\n                            },\n                            { value: \"CSV\" },\n                          ),\n                        )}\n                        triggerType='hover'\n                      >\n                        <i\n                          className={`fa fa-file-excel-o roundedButton ${userContext.userData.theme} pull-right`}\n                        />\n                      </OverlayTrigger>\n                    </CsvDownloader>\n                    <div>\n                      <OverlayTrigger\n                        placement='top'\n                        delay={{ show: 250, hide: 400 }}\n                        overlay={renderCloneTooltip(\n                          props,\n                          intl.formatMessage({\n                            id: \"replan\",\n                            defaultMessage: \"replan\",\n                          }),\n                        )}\n                        triggerType='hover'\n                      >\n                        <i\n                          onClick={() => onReplanHandle()}\n                          className={`fa fa-repeat roundedButton ${userContext.userData.theme} pull-right`}\n                        />\n                      </OverlayTrigger>\n                    </div>\n                    <div>\n                      <OverlayTrigger\n                        placement='top'\n                        delay={{ show: 250, hide: 400 }}\n                        overlay={renderCloneTooltip(\n                          props,\n                          intl.formatMessage({\n                            id: \"tally\",\n                            defaultMessage: \"tally\",\n                          }),\n                        )}\n                        triggerType='hover'\n                      >\n                        <i\n                          onClick={() => setOpenTallyModal(true)}\n                          className={`fa fa-text-width roundedButton ${userContext.userData.theme} pull-right`}\n                        />\n                      </OverlayTrigger>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n            <BackendCore\n              key={\"incExpTable\"}\n              id={\"incExpTable\"}\n              config={monthExpenditureConfig.config}\n              Table={monthExpenditureConfig.Table}\n              TableRows={monthExpenditureConfig.TableRows}\n              TableAliasRows={monthExpenditureConfig.TableAliasRows}\n              rowElements={rElements}\n              dbData={dbData}\n              postApiUrl='/account_planner/postAccountPlanner'\n              onPostApi={response => onPostApi(response)}\n              apiParams={apiParams}\n              onChangeParams={obj => onChangeParams(obj)}\n              showTooltipFor={monthExpenditureConfig.showTooltipFor}\n              defaultValues={monthExpenditureConfig.defaultValues}\n              onReFetchData={onReFetchData}\n              cellWidth={[4, 13, 8, 8, 13, 8, 13, 13, 13, 10, 5]}\n              ajaxButtonName={intl.formatMessage({\n                id: \"submit\",\n                defaultMessage: \"submit\",\n              })}\n              appIdKeyValue={{\n                key: \"inc_exp_appId\",\n                value: userContext.userConfig.appId,\n              }}\n              theme={userContext.userData.theme}\n            />\n            <div>\n              <div className='row'>\n                {totals.map(total => (\n                  <div key={total.label} className='col-md-3 col-6 py-4'>\n                    <div className=''>\n                      <div className=''>\n                        <div className={`p-6 text-center`}>\n                          <h5>\n                            <FormattedMessage\n                              id={total.label}\n                              defaultMessage={total.label}\n                            />\n                          </h5>\n                        </div>\n                      </div>\n                      <div className={``}>\n                        <div className={`text-center text-${total.flagString}`}>\n                          {helpers.countryCurrencyLacSeperator(\n                            bankDetails[0].bank_locale,\n                            bankDetails[0].bank_currency,\n                            total.amount,\n                            2,\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className='row'>\n                {planCards.map(plan => (\n                  <div key={plan.key} className='col-md-3 col-6 py-4'>\n                    <div className=''>\n                      <div className=''>\n                        <div className={`p-6 text-center`}>\n                          <h5>\n                            <FormattedMessage\n                              id={plan.planString}\n                              defaultMessage={plan.planString}\n                            />\n                            <sup\n                              className={`superScript text-${plan.flagString} border-${plan.flagString}`}\n                            >\n                              {plan.planCount}\n                            </sup>\n                          </h5>\n                        </div>\n                      </div>\n                      <div className={``}>\n                        <div className={`text-center text-${plan.flagString}`}>\n                          <button\n                            onClick={() => onPlanClick(plan.key)}\n                            className={`btn btn-sm btn-${plan.flagString}`}\n                          >\n                            {helpers.countryCurrencyLacSeperator(\n                              bankDetails[0].bank_locale,\n                              bankDetails[0].bank_currency,\n                              plan.planTotal,\n                              2,\n                            )}\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </>\n        )}\n        {!loader && !dbData && !dbData?.table.length && (\n          <div className='py-3 text-center'>\n            <FormattedMessage\n              id='noRecordsGenerated'\n              defaultMessage='noRecordsGenerated'\n            />\n          </div>\n        )}\n        {loader && (\n          <div className='relativeSpinner'>\n            <Loader />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default injectIntl(MonthExpenditureTable);\n","import React, { useContext } from \"react\";\nimport { AccountContext } from \"./AccountPlanner\";\nimport { injectIntl, useIntl } from \"react-intl\";\nimport FilterSelect from \"../configuration/backend/FormElements/FilterSelect\";\nimport { UserContext } from \"../../contexts/UserContext\";\n\nconst SetBank = props => {\n  const intl = useIntl();\n  const accountContext = useContext(AccountContext);\n  const userContext = useContext(UserContext);\n  const { bankList, bankSelected, setBankSelected } = accountContext;\n\n  return (\n    <FilterSelect\n      placeholder={intl.formatMessage({\n        id: \"select\",\n        defaultMessage: \"select\",\n      })}\n      onChange={(ind, value, pKey) => {\n        setBankSelected(value);\n      }}\n      element={{\n        fetch: {\n          dropDownList: bankList.map(row => ({\n            id: row.id,\n            value: row.value,\n          })),\n        },\n        searchable: true,\n      }}\n      value={bankSelected}\n      type={\"single\"}\n      searchable={true}\n      theme={userContext.userData.theme}\n    />\n  );\n};\n\nexport default injectIntl(SetBank);\n","import React, { useContext } from \"react\";\nimport { AccountContext } from \"./AccountPlanner\";\nimport { injectIntl, useIntl } from \"react-intl\";\nimport FilterSelect from \"../configuration/backend/FormElements/FilterSelect\";\nimport { UserContext } from \"../../contexts/UserContext\";\n\nconst SetYear = props => {\n  const intl = useIntl();\n  const accountContext = useContext(AccountContext);\n  const userContext = useContext(UserContext);\n  const { yearList, yearSelected, setYearSelected } = accountContext;\n\n  return (\n    <FilterSelect\n      placeholder={intl.formatMessage({\n        id: \"select\",\n        defaultMessage: \"select\",\n      })}\n      onChange={(ind, value, pKey) => {\n        setYearSelected(value);\n      }}\n      element={{\n        fetch: {\n          dropDownList: yearList.map(row => ({\n            id: row.id,\n            value: row.value,\n          })),\n        },\n        searchable: true,\n      }}\n      value={yearSelected}\n      type={\"single\"}\n      searchable={true}\n      theme={userContext.userData.theme}\n    />\n  );\n};\n\nexport default injectIntl(SetYear);\n","import React, { useContext } from \"react\";\nimport { AccountContext } from \"./AccountPlanner\";\nimport { injectIntl, useIntl } from \"react-intl\";\nimport FilterSelect from \"../configuration/backend/FormElements/FilterSelect\";\nimport { UserContext } from \"../../contexts/UserContext\";\n\nconst SetCcYear = props => {\n  const intl = useIntl();\n  const accountContext = useContext(AccountContext);\n  const userContext = useContext(UserContext);\n  const { ccYearList, ccYearSelected, setCcYearSelected } = accountContext;\n\n  return (\n    <FilterSelect\n      placeholder={intl.formatMessage({\n        id: \"select\",\n        defaultMessage: \"select\",\n      })}\n      onChange={(ind, value, pKey) => {\n        setCcYearSelected(value);\n      }}\n      element={{\n        fetch: {\n          dropDownList: ccYearList.map(row => ({\n            id: row.id,\n            value: row.value,\n          })),\n        },\n        searchable: true,\n      }}\n      value={ccYearSelected}\n      type={\"single\"}\n      searchable={true}\n      theme={userContext.userData.theme}\n    />\n  );\n};\n\nexport default injectIntl(SetCcYear);\n","import React, { useContext } from \"react\";\nimport { AccountContext } from \"./AccountPlanner\";\nimport { injectIntl, useIntl } from \"react-intl\";\nimport FilterSelect from \"../configuration/backend/FormElements/FilterSelect\";\nimport { UserContext } from \"../../contexts/UserContext\";\n\nconst SetCcBank = props => {\n  const intl = useIntl();\n  const accountContext = useContext(AccountContext);\n  const userContext = useContext(UserContext);\n  const { ccBankList, ccBankSelected, setCcBankSelected } = accountContext;\n\n  return (\n    <FilterSelect\n      placeholder={intl.formatMessage({\n        id: \"select\",\n        defaultMessage: \"select\",\n      })}\n      onChange={(ind, value, pKey) => {\n        setCcBankSelected(value);\n      }}\n      element={{\n        fetch: {\n          dropDownList: ccBankList.map(row => ({\n            id: row.id,\n            value: row.value,\n          })),\n        },\n        searchable: true,\n      }}\n      value={ccBankSelected}\n      type={\"single\"}\n      searchable={true}\n      theme={userContext.userData.theme}\n    />\n  );\n};\nexport default injectIntl(SetCcBank);\n","import React, { useEffect, useState, useRef, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nconst CreditCardModal = props => {\n  const intl = useIntl();\n  const { onImport } = props;\n  const userContext = useContext(UserContext);\n  const [lines, setLines] = useState([]);\n  const [rows, setRows] = useState([]);\n  const [source, setSource] = useState(-1);\n  const [dest, setDest] = useState(-1);\n  const [parent, setParent] = useState(-1);\n  const [separator, setSeparator] = useState(\" \");\n\n  const headings = [\n    {\n      label: intl.formatMessage({\n        id: \"transaction\",\n        defaultMessage: \"transaction\",\n      }),\n      type: \"text\",\n      key: \"cc_transaction\",\n    },\n    {\n      label: intl.formatMessage({ id: \"date\", defaultMessage: \"date\" }),\n      type: \"dated\",\n      key: \"cc_date\",\n    },\n    {\n      label: intl.formatMessage({\n        id: \"openingBalance\",\n        defaultMessage: \"openingBalance\",\n      }),\n      type: \"number\",\n      key: \"cc_opening_balance\",\n    },\n    {\n      label: intl.formatMessage({ id: \"credits\", defaultMessage: \"credits\" }),\n      type: \"number\",\n      key: \"cc_payment_credits\",\n    },\n    {\n      label: intl.formatMessage({\n        id: \"purchases\",\n        defaultMessage: \"purchases\",\n      }),\n      type: \"number\",\n      key: \"cc_purchases\",\n    },\n    {\n      label: intl.formatMessage({ id: \"interest\", defaultMessage: \"interest\" }),\n      type: \"number\",\n      key: \"cc_taxes_interest\",\n    },\n  ];\n  const textAreaRef = useRef(null);\n  const seperator = \"{--#newLine#--}\";\n\n  const makeTable = () => {\n    let value = textAreaRef.current.value;\n    value = value\n      .replace(/(\\r\\n|\\n|\\r)/gm, seperator)\n      .split(seperator)\n      .filter(n => n)\n      .map(v => v.split(separator));\n\n    const newRows = value.map(() => ({\n      cc_comments: \"\",\n      cc_date: \"\",\n      cc_expected_balance: \"\",\n      cc_for_card: \"\",\n      cc_id: \"\",\n      cc_opening_balance: \"\",\n      cc_payment_credits: \"\",\n      cc_purchases: \"\",\n      cc_taxes_interest: \"\",\n      cc_transaction: \"\",\n    }));\n    setRows(newRows);\n    setLines(value);\n  };\n\n  const deleteAll = index => {\n    let linesBackup = [...lines];\n    linesBackup = linesBackup.map((line, i) => {\n      if (i === index) {\n        line = [];\n      }\n      return line;\n    });\n    setLines(linesBackup);\n  };\n\n  const removeCell = (parrent, child) => {\n    let linesBackup = [...lines];\n    linesBackup = linesBackup.map((line, i) => {\n      if (i === parrent) {\n        return line.filter((c, j) => {\n          return j !== child;\n        });\n      }\n      return line;\n    });\n    setLines(linesBackup);\n  };\n  useEffect(() => {\n    if (source > -1 && dest > -1 && parent > -1 && source !== dest) {\n      let linesBackup = [...lines];\n      linesBackup = linesBackup\n        .map((line, i) => {\n          if (i === parent && line.length > 1) {\n            line[source] =\n              line[source] &&\n              line[dest] &&\n              [...line[source], ...line[dest]].join(\"\");\n            line[dest] = line[dest] && null;\n          }\n          return line;\n        })\n        .map(parent => parent.filter(child => child !== null));\n      setLines(linesBackup);\n      setDest(-1);\n      setParent(-1);\n      setSource(-1);\n    }\n  }, [source, dest, parent]);\n\n  const concatenateValues = (e, object) => {\n    const { i } = object;\n    setParent(Number(i));\n    setDest(Number(e.target.id));\n  };\n  const onDragStart = (e, object) => {\n    setSource(Number(e.target.id));\n    e.dataTransfer.setData(\"drag-item\", object);\n  };\n\n  const onDragOver = e => {\n    e.preventDefault();\n  };\n\n  const isGoodDate = dt => {\n    const possibleType = [\n      moment(dt, \"YYYY/MMM/DD\", true).isValid() &&\n        moment(dt, \"YYYY/MMM/DD\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"YYYY.MMM.DD\", true).isValid() &&\n        moment(dt, \"YYYY.MMM.DD\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"YYYY-MMM-DD\", true).isValid() &&\n        moment(dt, \"YYYY-MMM-DD\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"YYYY MMM DD\", true).isValid() &&\n        moment(dt, \"YYYY MMM DD\").format(\"YYYY-MM-DD\"),\n\n      moment(dt, \"YYYY/MM/DD\", true).isValid() &&\n        moment(dt, \"YYYY/MM/DD\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"YYYY.MM.DD\", true).isValid() &&\n        moment(dt, \"YYYY.MM.DD\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"YYYY-MM-DD\", true).isValid() &&\n        moment(dt, \"YYYY-MM-DD\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"YYYY MM DD\", true).isValid() &&\n        moment(dt, \"YYYY MM DD\").format(\"YYYY-MM-DD\"),\n\n      moment(dt, \"DD/MM/YYYY\", true).isValid() &&\n        moment(dt, \"DD/MM/YYYY\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"DD-MM-YYYY\", true).isValid() &&\n        moment(dt, \"DD-MM-YYYY\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"DD.MM.YYYY\", true).isValid() &&\n        moment(dt, \"DD.MM.YYYY\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"DD MM YYYY\", true).isValid() &&\n        moment(dt, \"DD MM YYYY\").format(\"YYYY-MM-DD\"),\n\n      moment(dt, \"DD/MMM/YYYY\", true).isValid() &&\n        moment(dt, \"DD/MMM/YYYY\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"DD-MMM-YYYY\", true).isValid() &&\n        moment(dt, \"DD-MMM-YYYY\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"DD.MMM.YYYY\", true).isValid() &&\n        moment(dt, \"DD.MMM.YYYY\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"DD MMM YYYY\", true).isValid() &&\n        moment(dt, \"DD MMM YYYY\").format(\"YYYY-MM-DD\"),\n\n      moment(dt, \"DD/MMMM/YYYY\", true).isValid() &&\n        moment(dt, \"DD/MMMM/YYYY\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"DD-MMMM-YYYY\", true).isValid() &&\n        moment(dt, \"DD-MMMM-YYYY\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"DD.MMMM.YYYY\", true).isValid() &&\n        moment(dt, \"DD.MMMM.YYYY\").format(\"YYYY-MM-DD\"),\n      moment(dt, \"DD MMMM YYYY\", true).isValid() &&\n        moment(dt, \"DD MMMM YYYY\").format(\"YYYY-MM-DD\"),\n    ].filter(date => date !== false)[0];\n    return possibleType ? possibleType : \"Invalid Date\";\n  };\n\n  const onDrop = (e, type, headKey) => {\n    const droppedItem = JSON.parse(e.dataTransfer.getData(\"drag-item\"));\n    let { cell, i } = droppedItem;\n    let appendValue = \"\";\n    if (type === \"dated\") {\n      appendValue = isGoodDate(cell);\n    } else if (type === \"text\") {\n      appendValue = cell;\n    } else if (type === \"number\") {\n      cell = cell.replace(\",\", \"\");\n      appendValue = Number(cell) || 0;\n    }\n    e.target.value = appendValue;\n    updateRows(i, headKey, appendValue);\n  };\n\n  const updateRows = (index, headKey, value) => {\n    let rowsBackup = [...rows];\n    rowsBackup = rowsBackup.map((row, i) => {\n      if (index === i) {\n        row[headKey] = value;\n      }\n      return row;\n    });\n    setRows(rowsBackup);\n  };\n\n  return (\n    <Modal {...props} style={{ zIndex: 10000 }}>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <FormattedMessage\n            id='importYourCreditCardStatement'\n            defaultMessage='importYourCreditCardStatement'\n          />\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body\n        className={`rounded-bottom ${\n          userContext.userData.theme === \"dark\"\n            ? \"bg-dark text-white\"\n            : \"bg-white text-dark\"\n        }`}\n      >\n        <div className='creditCardModal'>\n          {!lines.length ? (\n            <div>\n              <div className='row separatorWrapper py-2'>\n                <div className='col-md-9 col-7 pl-0'>\n                  <label htmlFor='paste'>\n                    <FormattedMessage\n                      id='pasteYourCreditCardStatementHere'\n                      defaultMessage='pasteYourCreditCardStatementHere'\n                    />{\" \"}\n                    <i className='fa fa-level-down' />\n                  </label>\n                </div>\n                <div className='col-md-3 col-5 pr-0'>\n                  <div className='input-group input-group-sm'>\n                    <span className='input-group-text bni-bg'>\n                      <FormattedMessage\n                        id='textSeperated'\n                        defaultMessage='textSeperated'\n                      />\n                    </span>\n                    <input\n                      type='text'\n                      defaultValue={separator}\n                      onChange={e => setSeparator(e.target.value)}\n                      className='form-control'\n                    />\n                  </div>\n                </div>\n              </div>\n              <textarea id='paste' ref={textAreaRef} className='textArea' />\n            </div>\n          ) : (\n            <div className='table-responsive pb-3'>\n              <div className='tableGrid'>\n                {headings.map((head, i) => (\n                  <div key={i} className='heading'>\n                    {head.label}\n                  </div>\n                ))}\n                {lines.map((line, i) => (\n                  <React.Fragment key={i}>\n                    {line.length > 0 && (\n                      <div className={`singleLines`}>\n                        {line.map((cell, j) => (\n                          <span\n                            key={j}\n                            id={j}\n                            draggable='true'\n                            onDragStart={e =>\n                              onDragStart(e, JSON.stringify({ cell, i, j }))\n                            }\n                            onDrop={e => concatenateValues(e, { i, j })}\n                            onDragOver={e => onDragOver(e)}\n                            className='cell'\n                          >\n                            {cell}\n                            <i\n                              onClick={() => removeCell(i, j)}\n                              className='fa fa-times-circle'\n                            />\n                          </span>\n                        ))}\n                        {line.length > 0 && (\n                          <span\n                            onClick={() => deleteAll(i)}\n                            className='cell danger'\n                            title='Delete all?'\n                          >\n                            <i className='fa fa-times' />\n                          </span>\n                        )}\n                      </div>\n                    )}\n                    {headings.map((head, k) => (\n                      <div key={k}>\n                        <input\n                          type={head.type}\n                          onChange={e =>\n                            updateRows(i, head.key, e.target.value)\n                          }\n                          onDragOver={e => onDragOver(e)}\n                          onDrop={e => onDrop(e, head.type, head.key)}\n                          className='input'\n                        />\n                      </div>\n                    ))}\n                  </React.Fragment>\n                ))}\n              </div>\n            </div>\n          )}\n          <div className='text-end py-2'>\n            {lines.length > 0 && (\n              <button onClick={() => setLines([])} className='btn btn-bni me-3'>\n                <i className='fa fa-angle-double-left' />{\" \"}\n                <FormattedMessage id='back' defaultMessage='back' />\n              </button>\n            )}\n            {!lines.length ? (\n              <button onClick={() => makeTable()} className='btn btn-bni'>\n                <FormattedMessage id='process' defaultMessage='process' />\n              </button>\n            ) : (\n              <button onClick={() => onImport(rows)} className='btn btn-bni'>\n                <FormattedMessage id='generate' defaultMessage='generate' />\n              </button>\n            )}\n          </div>\n        </div>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nCreditCardModal.propTypes = {\n  property: PropTypes.string,\n};\n\nexport default CreditCardModal;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { creditCardConfig } from \"../configuration/backendTableConfig\";\nimport BackendCore from \"../../components/configuration/backend/BackendCore\";\nimport helpers from \"../../helpers\";\nimport apiInstance from \"../../services/apiServices\";\nimport Loader from \"../resuable/Loader\";\nimport { AccountContext } from \"./AccountPlanner\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport CreditCardModal from \"./CreditCardModal\";\nimport { Tooltip, OverlayTrigger } from \"react-bootstrap\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport { MyAlertContext } from \"../../contexts/AlertContext\";\nimport { UpgradeHeading, UpgradeContent } from \"../payment/Upgrade\";\nimport { useQuery } from \"../GlobalHeader/queryParamHook\";\n\nconst TypeCreditCardExpenditure = props => {\n  const accountContext = useContext(AccountContext);\n  const userContext = useContext(UserContext);\n  const myAlertContext = useContext(MyAlertContext);\n  const { intl } = props;\n  const {\n    ccMonthYearSelected,\n    ccBankSelected,\n    ccDetails,\n    incExpList,\n    ccBankList,\n  } = accountContext;\n  const [openCreditCardModal, setOpenCreditCardModal] = useState(false); // change to false\n  const [dbData, setDbData] = useState({});\n  const [loader, setLoader] = useState(false);\n  const [insertCloneData, setInsertCloneData] = useState([]);\n  const defApiParam = {\n    start: 0,\n    limit: 10,\n    searchString: \"\",\n  };\n  const [apiParams, setApiParams] = useState(defApiParam);\n\n  const getAllApi = () => {\n    const [smonth, year] = ccMonthYearSelected.split(\"-\");\n    const month = helpers.strToNumMonth[smonth];\n    const ccStartDay = Number(ccDetails.credit_card_start_date);\n    const ccEndDay = Number(ccDetails.credit_card_end_date);\n\n    const eDate = new Date(\n      `${Number(year)}-${Number(month)}-${ccEndDay}`.replace(/-/g, \"/\"),\n    );\n    const eDateStr = `${eDate.getFullYear()}-${helpers.leadingZeros(\n      eDate.getMonth() + 1,\n    )}-${helpers.leadingZeros(eDate.getDate())}`;\n\n    const dateOffset = 24 * 60 * 60 * 1000 * 30; // 30 days\n    let sDate = eDate.setTime(eDate.getTime() - dateOffset);\n    sDate = new Date(sDate);\n    sDate = new Date(sDate.setDate(ccStartDay));\n    const sDateStr = `${sDate.getFullYear()}-${helpers.leadingZeros(\n      sDate.getMonth() + 1,\n    )}-${helpers.leadingZeros(sDate.getDate())}`;\n\n    const wClause = `cc_date between \"${sDateStr}\" and \"${eDateStr}\" and cc_for_card = ${ccBankSelected}`;\n\n    setDbData({});\n    setLoader(true);\n    const a = getBackendAjax(wClause);\n    Promise.all([a]).then(async r => {\n      setInsertCloneData([]);\n      setDbData(r[0].data.response);\n      setLoader(false);\n      creditCardConfig[0].rowElements[8] = {\n        fetch: {\n          dropDownList: ccBankList,\n        },\n        searchable: true,\n      };\n      creditCardConfig[0].rowElements[9] = {\n        fetch: {\n          dropDownList: incExpList,\n        },\n        searchable: true,\n      };\n      creditCardConfig[0].rowElements[8].searchable = true;\n    });\n  };\n\n  const onReFetchData = () => {\n    getAllApi();\n  };\n\n  const getBackendAjax = wClause => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    formdata.append(\"TableRows\", creditCardConfig[0].TableRows);\n    formdata.append(\"Table\", creditCardConfig[0].Table);\n    formdata.append(\"limit\", apiParams.limit);\n    formdata.append(\"start\", apiParams.start);\n    formdata.append(\"searchString\", apiParams.searchString);\n    if (wClause) {\n      formdata.append(\"WhereClause\", wClause);\n    }\n    return apiInstance.post(\"/account_planner/getAccountPlanner\", formdata);\n  };\n\n  const onPostApi = response => {\n    const { status, data } = response;\n    if (status === 200) {\n      if (\n        response &&\n        data &&\n        typeof data.response === \"boolean\" &&\n        data.response !== null &&\n        data.response\n      ) {\n        accountContext.renderToast({\n          message: intl.formatMessage({\n            id: \"transactionSavedSuccessfully\",\n            defaultMessage: \"transactionSavedSuccessfully\",\n          }),\n        });\n      }\n      if (\n        response &&\n        data &&\n        typeof data.response === \"boolean\" &&\n        data.response !== null &&\n        data.response === false\n      ) {\n        accountContext.renderToast({\n          type: \"error\",\n          icon: \"fa fa-times-circle\",\n          message: intl.formatMessage({\n            id: \"noFormChangeFound\",\n            defaultMessage: \"noFormChangeFound\",\n          }),\n        });\n      }\n      if (response && data && data.response === null) {\n        myAlertContext.setConfig({\n          show: true,\n          className: \"alert-danger border-0 text-dark\",\n          type: \"danger\",\n          dismissible: true,\n          heading: <UpgradeHeading />,\n          content: <UpgradeContent />,\n        });\n      }\n      if (\n        response &&\n        data &&\n        typeof data.response === \"object\" &&\n        data.response !== null\n      ) {\n        let intlKey;\n        switch (data.response.number) {\n          case 1451:\n            intlKey = \"foreignKeyDeleteMessage\";\n            break;\n          default:\n            intlKey = \"\";\n        }\n        userContext.renderToast({\n          type: \"error\",\n          icon: \"fa fa-times-circle\",\n          message: intl.formatMessage({\n            id: intlKey,\n            defaultMessage: intlKey,\n          }),\n        });\n      }\n    } else {\n      accountContext.renderToast({\n        type: \"error\",\n        icon: \"fa fa-times-circle\",\n        message: intl.formatMessage({\n          id: \"unableToReachServer\",\n          defaultMessage: \"unableToReachServer\",\n        }),\n      });\n    }\n  };\n  const creditCardMassageConfig = creditCardConfig.map(crud => {\n    const obj = {\n      header: {\n        searchPlaceholder: intl.formatMessage({\n          id: \"searchHere\",\n          defaultMessage: \"searchHere\",\n        }),\n        searchable: true,\n      },\n      footer: {\n        total: {\n          title: intl.formatMessage({ id: \"total\", defaultMessage: \"total\" }),\n          locale: ccDetails.credit_card_locale,\n          currency: ccDetails.credit_card_currency,\n          maxDecimal: 2,\n        },\n        pagination: {\n          currentPage: \"first\",\n          maxPagesToShow: 5,\n        },\n      },\n    };\n    crud.config = obj;\n    crud.TableAliasRows = [\n      \"id\",\n      \"transaction\",\n      \"date\",\n      \"openingBalance\",\n      \"credits\",\n      \"purchases\",\n      \"taxesAndInterest\",\n      \"balance\",\n      \"creditCard\",\n      \"category\",\n      \"status\",\n      \"comments\",\n      \"recorded\",\n    ].map(al => intl.formatMessage({ id: al, defaultMessage: al }));\n    return crud;\n  });\n\n  const renderCloneTooltip = (props, content) => (\n    <Tooltip id='button-tooltip-1' className='in show' {...props}>\n      {content}\n    </Tooltip>\n  );\n\n  const onChangeParams = obj => {\n    setApiParams(prev => ({\n      ...prev,\n      ...obj,\n    }));\n  };\n\n  const searchParams = useQuery();\n  const params = React.useMemo(\n    () => ({\n      fetch: searchParams.get(\"fetch\"),\n      search: searchParams.get(\"search\"),\n    }),\n    [searchParams],\n  );\n\n  useEffect(() => {\n    if (params.fetch && params.fetch === \"ccTransactions\" && params.search) {\n      setApiParams({\n        start: 0,\n        limit: 10,\n        searchString: params.search,\n      });\n    }\n  }, [params]);\n\n  useEffect(() => {\n    setApiParams(params => ({\n      ...params,\n      ...{ start: 0, limit: 10, searchString: \"\" },\n    }));\n  }, [ccMonthYearSelected]);\n\n  useEffect(() => {\n    getAllApi();\n  }, [apiParams]);\n\n  return (\n    <div className='settings'>\n      {openCreditCardModal && (\n        <CreditCardModal\n          className='creditCardModal'\n          show={openCreditCardModal}\n          onHide={() => setOpenCreditCardModal(false)}\n          size='xl'\n          animation={false}\n          onImport={data => {\n            setInsertCloneData(data);\n            setOpenCreditCardModal(false);\n          }}\n        />\n      )}\n      <div className=''>\n        <div className='row py-2'>\n          <div className='col-md-12'>\n            <OverlayTrigger\n              placement='left'\n              delay={{ show: 250, hide: 400 }}\n              overlay={renderCloneTooltip(\n                props,\n                intl.formatMessage({\n                  id: \"importYourCreditCardStatement\",\n                  defaultMessage: \"importYourCreditCardStatement\",\n                }),\n              )}\n              triggerType='hover'\n            >\n              <i\n                onClick={() => setOpenCreditCardModal(!openCreditCardModal)}\n                className='fa fa-upload roundedButton pull-right'\n              />\n            </OverlayTrigger>\n          </div>\n        </div>\n        {loader && (\n          <div className='relativeSpinner'>\n            <Loader />\n          </div>\n        )}\n        {dbData &&\n        Object.keys(dbData)?.length > 0 &&\n        dbData?.table?.length > 0 ? (\n          creditCardMassageConfig\n            .sort((a, b) => a.id > b.id)\n            .map((t, i) => (\n              <BackendCore\n                key={i}\n                id={\"ccTable\"}\n                Table={t.Table}\n                config={t.config}\n                TableRows={t.TableRows}\n                TableAliasRows={t.TableAliasRows}\n                dbData={dbData}\n                rowElements={t.rowElements}\n                postApiUrl='/account_planner/postAccountPlanner'\n                onPostApi={response => onPostApi(response)}\n                apiParams={apiParams}\n                onChangeParams={obj => onChangeParams(obj)}\n                showTooltipFor={t.showTooltipFor}\n                defaultValues={t.defaultValues}\n                onReFetchData={onReFetchData}\n                insertCloneData={insertCloneData}\n                cellWidth={[4, 13, 8, 8, 8, 8, 8, 8, 13, 13, 13, 13, 10]}\n                ajaxButtonName={intl.formatMessage({\n                  id: \"submit\",\n                  defaultMessage: \"submit\",\n                })}\n                appIdKeyValue={{\n                  key: \"cc_appId\",\n                  value: userContext.userConfig.appId,\n                }}\n                theme={userContext.userData.theme}\n              />\n            ))\n        ) : (\n          <div className='py-3 text-center'>\n            <FormattedMessage\n              id='noRecordsGenerated'\n              defaultMessage='noRecordsGenerated'\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default injectIntl(TypeCreditCardExpenditure);\n","import React, { useEffect, useState, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal } from \"react-bootstrap\";\nimport DateTimePicker from \"react-datetime-picker\";\nimport Switch from \"react-switch\";\nimport apiInstance from \"../../services/apiServices\";\nimport Loader from \"../resuable/Loader\";\nimport { AccountContext } from \"./AccountPlanner\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport FilterSelect from \"../configuration/backend/FormElements/FilterSelect\";\nimport { UpgradeHeading, UpgradeContent } from \"../payment/Upgrade\";\nimport { MyAlertContext } from \"../../contexts/AlertContext\";\n\nconst FastShopping = props => {\n  const intl = useIntl();\n  const accountContext = useContext(AccountContext);\n  const userContext = useContext(UserContext);\n  const myAlertContext = useContext(MyAlertContext);\n  const [date, setDate] = useState(new Date());\n  const [transaction, setTransaction] = useState(\"\");\n  const [comments, setComments] = useState(\"\");\n  const [amount, setAmount] = useState(\"0\");\n  const [type, setType] = useState(true);\n  const [cardType, setCardType] = useState(true);\n  const [bankList, setBankList] = useState([]);\n  const [ccBankList, setCcBankList] = useState([]);\n  const [bank, setBank] = useState(\"\");\n\n  const [incExpList, setIncExpList] = useState([]);\n  const [incExp, setIncExp] = useState(\"\");\n  const [ccBank, setCcBank] = useState(\"\");\n  const [isDecimal, setIsDecimal] = useState(false);\n  const [btnLoader, setBtnLoader] = useState(false);\n  const delIcon = \"&Lang;\";\n  const numPads = [\n    { 1: intl.formatMessage({ id: \"1\", id: \"1\" }) },\n    { 2: intl.formatMessage({ id: \"2\", id: \"2\" }) },\n    { 3: intl.formatMessage({ id: \"3\", id: \"3\" }) },\n    { 4: intl.formatMessage({ id: \"4\", id: \"4\" }) },\n    { 5: intl.formatMessage({ id: \"5\", id: \"5\" }) },\n    { 6: intl.formatMessage({ id: \"6\", id: \"6\" }) },\n    { 7: intl.formatMessage({ id: \"7\", id: \"7\" }) },\n    { 8: intl.formatMessage({ id: \"8\", id: \"8\" }) },\n    { 9: intl.formatMessage({ id: \"9\", id: \"9\" }) },\n    { \"&Lang;\": delIcon },\n    { 0: intl.formatMessage({ id: \"0\", id: \"0\" }) },\n    { \".\": \".\" },\n    { C: \"C\" },\n  ];\n\n  const loaderComp = () => {\n    return (\n      <div className='relativeSpinner'>\n        <Loader />\n      </div>\n    );\n  };\n\n  const getBankList = () => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance\n      .post(\"/account_planner/bank_list\", formdata)\n      .then(res => res.data.response)\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const getIncExpList = () => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance\n      .post(\"/account_planner/inc_exp_list\", formdata)\n      .then(res => res.data.response)\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const getCcBankList = () => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance\n      .post(\"/account_planner/credit_card_list\", formdata)\n      .then(res => res.data.response)\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    const a = getBankList();\n    const b = getIncExpList();\n    const c = getCcBankList();\n    Promise.all([a, b, c]).then(r => {\n      r[0].length > 0\n        ? setBankList(r[0])\n        : setBankList([{ id: null, value: \"NULL\" }]);\n      r[0].length > 0 && r[0][0].id ? setBank(r[0][0].id) : setBank(\"\");\n      r[1].length > 0\n        ? setIncExpList(r[1])\n        : setIncExpList([{ id: null, value: \"NULL\" }]);\n      r[1].length > 0 && r[1][0].id ? setIncExp(r[1][0].id) : setIncExp(\"\");\n      r[2].length > 0\n        ? setCcBankList(r[2])\n        : setCcBankList([{ id: null, value: \"NULL\" }]);\n      r[2].length > 0 && r[2][0].id ? setCcBank(r[2][0].id) : setCcBank(\"\");\n    });\n  }, []);\n\n  const objectToDate = date => {\n    const [YYYY, MM, DD] = [\n      date.getFullYear(),\n      date.getMonth() + 1 > 9 ? date.getMonth() + 1 : `0${date.getMonth() + 1}`,\n      date.getDate() > 9 ? date.getDate() : `0${date.getDate()}`,\n    ];\n    const dateString = `${YYYY}-${MM}-${DD}`;\n    return dateString;\n  };\n  const onNumPadClick = digit => {\n    let newDigit = amount;\n    if (typeof digit === \"number\") {\n      newDigit = !isDecimal ? `${amount}${digit}` : `${newDigit}.${digit}`;\n      setIsDecimal(false);\n    }\n    if (digit === \".\") {\n      setIsDecimal(true);\n      if (newDigit.substring(0, 1) === \"0\") {\n        newDigit = \"0\" + newDigit;\n      }\n    }\n    if (\n      newDigit.length > 0 &&\n      newDigit.substring(0, 1) === \"0\" &&\n      !newDigit.includes(\".\")\n    ) {\n      newDigit = newDigit.substring(1, newDigit.length);\n    }\n    if (newDigit.length > 0 && newDigit.substring(0, 1) === \".\") {\n      newDigit = `0${newDigit}`;\n    }\n    if (digit === \"C\") {\n      newDigit = \"0\";\n      setIsDecimal(false);\n    }\n    if (digit === delIcon) {\n      newDigit = newDigit.length > 1 ? newDigit.slice(0, -1) : \"0\";\n      if (newDigit.length > 0 && newDigit.slice(newDigit.length - 1) === \".\") {\n        newDigit = newDigit.slice(0, -1);\n        setIsDecimal(false);\n      }\n    }\n    setAmount(newDigit);\n  };\n  const saveExpense = () => {\n    setBtnLoader(true);\n    const postData = {\n      Table: cardType ? \"income_expense\" : \"credit_card_transactions\",\n      insertData: cardType\n        ? [\n            {\n              inc_exp_id: null,\n              inc_exp_appId: userContext.userConfig.appId,\n              inc_exp_name: transaction,\n              inc_exp_amount: amount,\n              inc_exp_plan_amount: 0,\n              inc_exp_type: type ? \"Dr\" : \"Cr\",\n              inc_exp_date: objectToDate(date),\n              inc_exp_category: incExp,\n              inc_exp_bank: bank,\n              inc_exp_comments: comments,\n            },\n          ]\n        : [\n            {\n              cc_id: null,\n              cc_appId: userContext.userConfig.appId,\n              cc_transaction: transaction,\n              cc_date: objectToDate(date),\n              cc_opening_balance: 0,\n              cc_payment_credits: 0,\n              cc_purchases: amount,\n              cc_taxes_interest: 0,\n              cc_for_card: ccBank,\n              cc_inc_exp_cat: incExp,\n              cc_comments: comments,\n              cc_transaction_status: 0,\n            },\n          ],\n    };\n    const formdata = new FormData();\n    document.getElementById(\"transactForm\").reset();\n    formdata.append(\"postData\", JSON.stringify(postData));\n    apiInstance\n      .post(\"/account_planner/postAccountPlanner\", formdata)\n      .then(response => {\n        const { data } = response;\n        if (\n          response &&\n          data &&\n          typeof data.response === \"boolean\" &&\n          data.response !== null &&\n          data.response\n        ) {\n          accountContext.renderToast({\n            message: intl.formatMessage({\n              id: \"transactionSavedSuccessfully\",\n              defaultMessage: \"transactionSavedSuccessfully\",\n            }),\n          });\n        }\n        if (\n          response &&\n          data &&\n          typeof data.response === \"boolean\" &&\n          data.response !== null &&\n          data.response === false\n        ) {\n          accountContext.renderToast({\n            type: \"error\",\n            icon: \"fa fa-times-circle\",\n            message: intl.formatMessage({\n              id: \"noFormChangeFound\",\n              defaultMessage: \"noFormChangeFound\",\n            }),\n          });\n        }\n        if (response && data && data.response === null) {\n          myAlertContext.setConfig({\n            show: true,\n            className: \"alert-danger border-0 text-dark\",\n            type: \"danger\",\n            dismissible: true,\n            heading: <UpgradeHeading />,\n            content: <UpgradeContent />,\n          });\n          props.onHide(false);\n        }\n        setAmount(\"0\");\n        setTransaction(\"\");\n        setComments(\"\");\n        if (document.getElementById(\"transactForm\") != null) {\n          document.getElementById(\"transactForm\").reset();\n        }\n      })\n      .catch(error => {\n        accountContext.renderToast({\n          type: \"error\",\n          icon: \"fa fa-times-circle\",\n          message: intl.formatMessage({\n            id: \"unableToReachServer\",\n            defaultMessage: \"unableToReachServer\",\n          }),\n        });\n        console.log(error);\n      })\n      .finally(() => setBtnLoader(false));\n  };\n\n  return (\n    <Modal {...props} style={{ zIndex: 10000 }} enforceFocus={false}>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <FormattedMessage id='fastShopping' defaultMessage='fastShopping' />\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body\n        className={`react-responsive-ajax-data-table rounded-bottom ${\n          userContext.userData.theme === \"dark\"\n            ? \"bg-dark text-white\"\n            : \"bg-white text-dark\"\n        }`}\n      >\n        <form id='transactForm' onSubmit={e => e.preventDefault()}>\n          <div className=''>\n            <input\n              type='text'\n              className='form-control'\n              placeholder={intl.formatMessage({\n                id: \"transaction\",\n                defaultMessage: \"transaction\",\n              })}\n              onChange={e => setTransaction(e.target.value)}\n            />\n          </div>\n          <div className='overflow text-end'>{amount}</div>\n          <div className=''>\n            <div className='numPads pb-2'>\n              {numPads.map((digit, i) => {\n                const m = !isNaN(Number(Object.keys(digit)[0]))\n                  ? Number(Object.keys(digit)[0])\n                  : Object.keys(digit)[0];\n                const val = Object.values(digit)[0];\n                return (\n                  <div key={i} className='text-center buttonContainer'>\n                    <button\n                      disabled={amount.toString().includes(\".\") && m === \".\"}\n                      onClick={() => onNumPadClick(m)}\n                      dangerouslySetInnerHTML={{ __html: val }}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          <div className='row py-2'>\n            <div className='col-6 py-2 react-responsive-ajax-data-table'>\n              <DateTimePicker\n                onChange={value => {\n                  setDate(value);\n                }}\n                value={date}\n                format={`y-MM-dd`}\n                required\n                clearIcon={null}\n                className='fastShoppingDatePicker'\n              />\n            </div>\n            <div className='col-6 py-2'>\n              <div className='d-flex align-items-center'>\n                <div onClick={() => setCardType(!cardType)} className=''>\n                  {cardType\n                    ? intl.formatMessage({\n                        id: \"debitCard\",\n                        defaultMessage: \"debitCard\",\n                      })\n                    : intl.formatMessage({\n                        id: \"creditCard\",\n                        defaultMessage: \"creditCard\",\n                      })}\n                </div>\n                <i\n                  onClick={() => setCardType(!cardType)}\n                  className={`fa fa-circle ps-2 ${\n                    cardType ? \"debit\" : \"credit\"\n                  }`}\n                />\n              </div>\n            </div>\n          </div>\n          <div className='py-2'>\n            <input\n              type='text'\n              className='form-control'\n              placeholder='Comments'\n              onChange={e => setComments(e.target.value)}\n            />\n          </div>\n          <div>\n            {bankList.length > 0 &&\n            incExpList.length > 0 &&\n            ccBankList.length > 0 ? (\n              <>\n                {cardType ? (\n                  <>\n                    <div className='py-2'>\n                      <div className='d-flex align-items-center justify-content-evenly'>\n                        <div onClick={() => setType(true)} className=''>\n                          <FormattedMessage\n                            id='expense'\n                            defaultMessage='expense'\n                          />\n                        </div>\n                        <Switch\n                          onColor={document.documentElement.style.getPropertyValue(\n                            \"--app-theme-bg-color\",\n                          )}\n                          offColor='#333'\n                          checkedIcon={false}\n                          uncheckedIcon={false}\n                          height={20}\n                          width={45}\n                          onChange={() => setType(!type)}\n                          checked={type === true}\n                        />\n                        <div onClick={() => setType(false)} className=''>\n                          <FormattedMessage\n                            id='income'\n                            defaultMessage='income'\n                          />\n                        </div>\n                        <Switch\n                          onColor={document.documentElement.style.getPropertyValue(\n                            \"--app-theme-bg-color\",\n                          )}\n                          offColor='#333'\n                          checkedIcon={false}\n                          uncheckedIcon={false}\n                          height={20}\n                          width={45}\n                          onChange={() => setType(!type)}\n                          checked={type === false}\n                        />\n                      </div>\n                    </div>\n                    <div className='py-2'>\n                      <FilterSelect\n                        key={1}\n                        placeholder={intl.formatMessage({\n                          id: \"select\",\n                          defaultMessage: \"select\",\n                        })}\n                        onChange={(ind, value, pKey) => {\n                          setBank(value);\n                        }}\n                        element={{\n                          fetch: {\n                            dropDownList: bankList.map(row => ({\n                              id: row.id,\n                              value: row.value,\n                            })),\n                          },\n                          searchable: true,\n                        }}\n                        value={bank}\n                        type={\"single\"}\n                        searchable={true}\n                        theme={userContext.userData.theme}\n                      />\n                    </div>\n                  </>\n                ) : (\n                  <div className='py-2'>\n                    <FilterSelect\n                      key={1}\n                      placeholder={intl.formatMessage({\n                        id: \"select\",\n                        defaultMessage: \"select\",\n                      })}\n                      onChange={(ind, value, pKey) => {\n                        setCcBank(value);\n                      }}\n                      element={{\n                        fetch: {\n                          dropDownList: ccBankList.map(row => ({\n                            id: row.id,\n                            value: row.value,\n                          })),\n                        },\n                        searchable: true,\n                      }}\n                      value={ccBank}\n                      type={\"single\"}\n                      searchable={true}\n                      theme={userContext.userData.theme}\n                    />\n                  </div>\n                )}\n                <div className='py-2'>\n                  <FilterSelect\n                    key={1}\n                    placeholder={intl.formatMessage({\n                      id: \"select\",\n                      defaultMessage: \"select\",\n                    })}\n                    onChange={(ind, value, pKey) => {\n                      setIncExp(value);\n                    }}\n                    element={{\n                      fetch: {\n                        dropDownList: incExpList.map(row => ({\n                          id: row.id,\n                          value: row.value,\n                        })),\n                      },\n                      searchable: true,\n                    }}\n                    value={incExp}\n                    type={\"single\"}\n                    searchable={true}\n                    theme={userContext.userData.theme}\n                  />\n                </div>\n              </>\n            ) : (\n              loaderComp()\n            )}\n          </div>\n          <div className='py-2'>\n            <button\n              disabled={!(Number(amount) > 0 && transaction && !btnLoader)}\n              onClick={() => saveExpense()}\n              className='btn btn-bni border-0'\n            >\n              {btnLoader ? (\n                <i className='fa fa-circle-o-notch fa-spin fa-fw' />\n              ) : (\n                <FormattedMessage id='submit' defaultMessage='submit' />\n              )}\n            </button>\n          </div>\n        </form>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nFastShopping.propTypes = {\n  property: PropTypes.string,\n};\n\nexport default FastShopping;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CountDown = props => {\n  const { ccDetails } = props;\n  const [mSec, setMsec] = useState(0);\n  const days = Number(ccDetails.remDays);\n  let seconds = days * 24 * 3600;\n\n  useEffect(() => {\n    if (Number(ccDetails.remDays) > 0) {\n      startClock();\n    }\n  }, [ccDetails.remDays]);\n\n  const startClock = () => {\n    const days = Math.floor(seconds / 24 / 60 / 60);\n    const hoursLeft = Math.floor(seconds - days * 86400);\n    const hours = Math.floor(hoursLeft / 3600);\n    const minutesLeft = Math.floor(hoursLeft - hours * 3600);\n    const minutes = Math.floor(minutesLeft / 60);\n    const remainingSeconds = seconds % 60;\n    const timer =\n      pad(days) +\n      \":\" +\n      pad(hours) +\n      \":\" +\n      pad(minutes) +\n      \":\" +\n      pad(remainingSeconds);\n    if (seconds === 0) {\n      myStopFunction(startClock);\n    } else {\n      seconds--;\n    }\n    setMsec(timer);\n    setTimeout(startClock, 1000);\n  };\n\n  const myStopFunction = () => {\n    clearTimeout(startClock);\n  };\n\n  const pad = n => {\n    return n < 10 ? \"0\" + n : n;\n  };\n\n  return <span>{mSec}</span>;\n};\n\nCountDown.propTypes = {\n  property: PropTypes.string,\n};\n\nexport default CountDown;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal } from \"react-bootstrap\";\nimport apiInstance from \"../../services/apiServices\";\nimport helpers from \"../../helpers\";\nimport CountDown from \"./CountDown\";\nimport Loader from \"../resuable/Loader\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { FormattedMessage } from \"react-intl\";\n\nconst CheckCardCycleDate = props => {\n  const userContext = useContext(UserContext);\n  const [loader, setLoader] = useState(false);\n  const [childLoader, setChildLoader] = useState(false);\n  const [selectedBank, setSelectedBank] = useState(false);\n  const [ccDetails, setCcDetails] = useState({});\n  const [cardList, setCardList] = useState([]);\n  const now = new Date();\n  useEffect(() => {\n    setLoader(true);\n    const a = getCcBankList();\n    Promise.all([a]).then(r => {\n      const data = r[0];\n      setCardList(data);\n      setLoader(false);\n    });\n  }, []);\n\n  const loaderComp = () => {\n    return (\n      <div className='relativeSpinner'>\n        <Loader />\n      </div>\n    );\n  };\n\n  const getCreditCardDetails = bank => {\n    const formdata = new FormData();\n    formdata.append(\"bank\", bank);\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    setCcDetails({});\n    setChildLoader(true);\n    setSelectedBank(bank);\n    return apiInstance\n      .post(\"/account_planner/credit_card_details\", formdata)\n      .then(res => {\n        const obj = res.data.response[0];\n\n        let startDate = obj.credit_card_start_date;\n        startDate = helpers.addMonths(\n          new Date(\n            `${now.getFullYear()}-${now.getMonth() + 1}-${startDate}`.replace(\n              /-/g,\n              \"/\",\n            ),\n          ),\n          -1,\n        );\n        let [sYYYY, sMM, sDD] = [\n          startDate.getFullYear(),\n          startDate.getMonth() + 1,\n          startDate.getDate(),\n        ];\n        [sMM, sDD] = [sMM < 10 ? `0${sMM}` : sMM, sDD < 10 ? `0${sDD}` : sDD];\n        startDate = `${sYYYY}-${sMM}-${sDD}`;\n\n        let endDate = obj.credit_card_end_date;\n        endDate = new Date(\n          `${now.getFullYear()}-${now.getMonth() + 1}-${endDate}`.replace(\n            /-/g,\n            \"/\",\n          ),\n        );\n        let [eYYYY, eMM, eDD] = [\n          endDate.getFullYear(),\n          endDate.getMonth() + 1,\n          endDate.getDate(),\n        ];\n        [eMM, eDD] = [eMM < 10 ? `0${eMM}` : eMM, eDD < 10 ? `0${eDD}` : eDD];\n        endDate = `${eYYYY}-${eMM}-${eDD}`;\n\n        let payDate = obj.credit_card_payment_date;\n        payDate = helpers.addMonths(\n          new Date(\n            `${now.getFullYear()}-${now.getMonth() + 1}-${payDate}`.replace(\n              /-/g,\n              \"/\",\n            ),\n          ),\n          1,\n        );\n        let [pYYYY, pMM, pDD] = [\n          payDate.getFullYear(),\n          payDate.getMonth() + 1,\n          payDate.getDate(),\n        ];\n        [pMM, pDD] = [pMM < 10 ? `0${pMM}` : pMM, pDD < 10 ? `0${pDD}` : pDD];\n        payDate = `${pYYYY}-${pMM}-${pDD}`;\n\n        let remDays = new Date(payDate) - new Date();\n        remDays = Math.abs(remDays);\n        remDays = Math.ceil(remDays / (1000 * 60 * 60 * 24));\n        const data = {\n          cardNumber: obj.credit_card_number,\n          cardName: obj.credit_card_name,\n          startDate,\n          endDate,\n          payDate,\n          remDays,\n        };\n        setCcDetails(data);\n        setChildLoader(false);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const getCcBankList = () => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance\n      .post(\"/account_planner/credit_card_list\", formdata)\n      .then(res => res.data.response)\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  return (\n    <Modal {...props} style={{ zIndex: 10000 }}>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <FormattedMessage\n            id='checkCreditCardCycleDate'\n            defaultMessage='checkCreditCardCycleDate'\n          />\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body\n        className={`rounded-bottom ${\n          userContext.userData.theme === \"dark\"\n            ? \"bg-dark text-white\"\n            : \"bg-white text-dark\"\n        }`}\n      >\n        {loader ? (\n          loaderComp()\n        ) : (\n          <div className='row'>\n            {cardList &&\n              cardList.length > 0 &&\n              cardList.map((card, i) => (\n                <div\n                  key={i}\n                  onClick={() => getCreditCardDetails(card.id)}\n                  className={`col-6 text-center cardWrapper ${\n                    selectedBank === card.id ? \"active\" : \"\"\n                  }`}\n                >\n                  <i className='fa fa-credit-card-alt' />\n                  {card.value}\n                </div>\n              ))}\n          </div>\n        )}\n        {childLoader\n          ? loaderComp()\n          : Object.keys(ccDetails).length > 0 && (\n              <>\n                <div className='py-3 text-center'>{ccDetails.cardName}</div>\n                <div className='container mt-10 text-center'>\n                  <div className='contactLabel'>\n                    <FormattedMessage\n                      id='cardNumber'\n                      defaultMessage='cardNumber'\n                    />\n                  </div>\n                  <div>{ccDetails.cardNumber}</div>\n                  <div className='row pb-3 pt-3'>\n                    <div className='col-6'>\n                      <label>\n                        <FormattedMessage\n                          id='startDate'\n                          defaultMessage='startDate'\n                        />\n                      </label>\n                      <div>{ccDetails.startDate}</div>\n                    </div>\n                    <div className='col-6'>\n                      <label>\n                        <FormattedMessage\n                          id='endDate'\n                          defaultMessage='endDate'\n                        />\n                      </label>\n                      <div>{ccDetails.endDate}</div>\n                    </div>\n                  </div>\n                  <div className='row text-center'>\n                    <div className='col-6'>\n                      <label>\n                        <FormattedMessage\n                          id='payDate'\n                          defaultMessage='payDate'\n                        />\n                      </label>\n                      <div>{ccDetails.payDate}</div>\n                    </div>\n                    <div className='col-6'>\n                      <label>\n                        <FormattedMessage\n                          id='remainingDays'\n                          defaultMessage='remainingDays'\n                        />\n                      </label>\n                      <div>\n                        <CountDown ccDetails={ccDetails} />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </>\n            )}\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nCheckCardCycleDate.propTypes = {\n  property: PropTypes.string,\n};\n\nexport default CheckCardCycleDate;\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal } from \"react-bootstrap\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { FormattedMessage } from \"react-intl\";\n\nconst ConfirmQBModal = props => {\n  const { onHide, onYes } = props;\n  const userContext = useContext(UserContext);\n  return (\n    <Modal {...props} style={{ zIndex: 10000 }}>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <FormattedMessage\n            id='sureAbtSqlQueries'\n            defaultMessage='sureAbtSqlQueries'\n          />\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body\n        className={`rounded-bottom ${\n          userContext.userData.theme === \"dark\"\n            ? \"bg-dark text-white\"\n            : \"bg-white text-dark\"\n        }`}\n      >\n        <div className='d-flex justify-content-between'>\n          <div>\n            <button onClick={() => onYes()} className='btn btn-bni'>\n              <FormattedMessage id='allow' defaultMessage='allow' />\n            </button>\n          </div>\n          <div>\n            <button onClick={() => onHide()} className='btn btn-secondary'>\n              <FormattedMessage id='restrict' defaultMessage='restrict' />\n            </button>\n          </div>\n        </div>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nConfirmQBModal.propTypes = {\n  onYes: PropTypes.string,\n  onHide: PropTypes.func,\n};\n\nexport default ConfirmQBModal;\n","import React, { useContext, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal } from \"react-bootstrap\";\nimport apiInstance from \"../../services/apiServices\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport Dropzone from \"react-dropzone\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport CsvDownloader from \"react-csv-downloader\";\nimport moment from \"moment\";\nimport { UpgradeHeading, UpgradeContent } from \"../payment/Upgrade\";\n\nconst BulkImportIncExp = props => {\n  const intl = useIntl();\n  const userContext = useContext(UserContext);\n  const fileSize = 5 * 1024 * 1024;\n  const maxRowsInsert = 1000;\n  const [fileSelected, setFileSelected] = useState({});\n  const [data, setData] = useState([]);\n  const sampleDownload = [\n    {\n      inc_exp_id: \"null\",\n      inc_exp_name: \"Gross profit\",\n      inc_exp_amount: 1000000,\n      inc_exp_plan_amount: 0,\n      inc_exp_type: \"Cr\",\n      inc_exp_date: moment(new Date()).format(\"YYYY-MM-DD\").toString(),\n      inc_exp_category: \"Category name\",\n      inc_exp_bank: \"Bank name\",\n      inc_exp_comments: \"your profit comments\",\n    },\n    {\n      inc_exp_id: \"null\",\n      inc_exp_name: \"Gross expense\",\n      inc_exp_amount: 500000,\n      inc_exp_plan_amount: 0,\n      inc_exp_type: \"Dr\",\n      inc_exp_date: moment(new Date()).format(\"YYYY-MM-DD\").toString(),\n      inc_exp_category: \"Category name\",\n      inc_exp_bank: \"Bank name\",\n      inc_exp_comments: \"your expense comments\",\n    },\n  ];\n\n  const processData = file => {\n    return new Promise((resolve, reject) => {\n      const input = file;\n      const reader = new FileReader();\n      reader.readAsText(input);\n      reader.onload = e => {\n        const lines = [];\n        const allText = e.target.result;\n\n        const allTextLines = allText.split(/\\r\\n|\\n/).filter(n => n !== \"\");\n        const headers = allTextLines[0].split(\",\");\n        const dataLines = allTextLines\n          .filter((_, i) => i !== 0)\n          .filter(row => row.split(\",\")[0] === \"null\");\n\n        if (input.size <= fileSize) {\n          if (dataLines.length <= maxRowsInsert) {\n            for (let i = 0; i < dataLines.length; i++) {\n              const data = dataLines[i].split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n              if (data.length === headers.length) {\n                const tarr = [];\n                for (let j = 0; j < headers.length; j++) {\n                  tarr.push({\n                    [headers[j]]: data[j]\n                      .replace(/\\\\/g, \"\")\n                      .replaceAll('\"', \"\"),\n                  });\n                }\n                const joined = Object.assign({}, ...tarr);\n                lines.push(joined);\n              }\n            }\n            resolve(lines);\n          } else {\n            reject(\n              new Error(\n                `${intl.formatMessage({\n                  id: \"maxAllowedRowLimitIs\",\n                  defaultMessage: \"maxAllowedRowLimitIs\",\n                })} ${maxRowsInsert}`,\n              ),\n            );\n          }\n        } else {\n          reject(\n            new Error(\n              `${intl.formatMessage({\n                id: \"maxFileSizeLimitIs\",\n                defaultMessage: \"maxFileSizeLimitIs\",\n              })} ${fileSize} MB`,\n            ),\n          );\n        }\n      };\n      reader.onerror = e => {\n        reject(e);\n      };\n    });\n  };\n\n  const onDrop = (acceptedFiles, rejectedFiles, event) => {\n    if (acceptedFiles.length > 0) {\n      setFileSelected(acceptedFiles[0]);\n      processData(acceptedFiles[0])\n        .then(res => {\n          userContext.renderToast({\n            message: `${res.length} ${intl.formatMessage({\n              id: \"rowsAddedSuccessfully\",\n              defaultMessage: \"rowsAddedSuccessfully\",\n            })}`,\n            autoClose: 10000,\n          });\n          setData(res);\n        })\n        .catch(e => {\n          setData([]);\n          userContext.renderToast({\n            type: \"error\",\n            icon: \"fa fa-times-circle\",\n            message: e,\n          });\n        });\n    }\n  };\n\n  const getFileSize = bytes => {\n    const mb = (bytes / 1024 / 1024).toFixed(2);\n    if (mb > 0) {\n      return `${mb} MB`;\n    } else {\n      const kb = (bytes / 1024).toFixed(2);\n      return `${kb} KB`;\n    }\n  };\n\n  const onsubmit = () => {\n    const formdata = new FormData();\n    formdata.append(\"data\", JSON.stringify(data));\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    apiInstance\n      .post(\"/account_planner/bulkImport\", formdata)\n      .then(response => {\n        if (response.data.response) {\n          userContext.renderToast({\n            message: intl.formatMessage({\n              id: \"bulkImportSuccess\",\n              defaultMessage: \"bulkImportSuccess\",\n            }),\n          });\n        }\n        if (!response.data.response) {\n          userContext.renderToast({\n            type: \"error\",\n            icon: \"fa fa-times-circle\",\n            message: intl.formatMessage({\n              id: \"bulkImportFailed\",\n              defaultMessage: \"bulkImportFailed\",\n            }),\n          });\n        }\n\n        if (response.data.response === null) {\n          myAlertContext.setConfig({\n            show: true,\n            className: \"alert-danger border-0 text-dark\",\n            type: \"danger\",\n            dismissible: true,\n            heading: <UpgradeHeading />,\n            content: <UpgradeContent />,\n          });\n        }\n      })\n      .catch(e => {\n        userContext.renderToast({\n          type: \"error\",\n          icon: \"fa fa-times-circle\",\n          message: intl.formatMessage({\n            id: \"bulkImportFailed\",\n            defaultMessage: \"bulkImportFailed\",\n          }),\n        });\n      })\n      .finally(() => setData([]));\n  };\n\n  return (\n    <Modal {...props} style={{ zIndex: 10000 }}>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <FormattedMessage id='bulkImport' defaultMessage='bulkImport' />\n          <em className='ps-1'>\n            (\n            <small className='pe-1'>\n              <FormattedMessage id='limit' defaultMessage='limit' />:{\" \"}\n              {`${fileSize / 1024 / 1024} MB,`}\n            </small>\n            <small className='pe-1'>\n              <FormattedMessage id='maxRows' defaultMessage='maxRows' />:{\" \"}\n              {`${maxRowsInsert},`}\n            </small>\n            <small>\n              <FormattedMessage id='type' defaultMessage='type' />: CSV,{\" \"}\n            </small>\n            <small className='pe-1'>\n              <FormattedMessage id='date' defaultMessage='date' />{\" \"}\n              <FormattedMessage id='type' defaultMessage='type' />:\n              {` YYYY-MM-DD`}\n            </small>\n            )\n          </em>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body\n        className={`rounded-bottom p-0 ${\n          userContext.userData.theme === \"dark\"\n            ? \"bg-dark text-white\"\n            : \"bg-white text-dark\"\n        }`}\n      >\n        <div className='dropZone'>\n          <Dropzone\n            accept='text/csv,text/comma-separated-values,application/csv'\n            maxSize={fileSize}\n            onDrop={onDrop}\n            className='text-center'\n          >\n            {({ getRootProps, getInputProps, isDragAccept, isDragReject }) => {\n              let classes = `dropZoneWrapper`;\n              let placeholder = (\n                <div>\n                  <FormattedMessage\n                    id='dragFilesHere'\n                    defaultMessage='dragFilesHere'\n                  />\n                </div>\n              );\n              if (isDragAccept) {\n                classes = `${classes} bg-success`;\n                placeholder = (\n                  <div className='upload-success'>\n                    <FormattedMessage\n                      id='dropFileOrfilesHere'\n                      defaultMessage='dropFileOrfilesHere'\n                    />\n                  </div>\n                );\n              }\n              if (isDragReject) {\n                classes = `${classes} bg-danger`;\n                placeholder = (\n                  <div className='upload-error'>\n                    <FormattedMessage\n                      id='fileTypeNotAllowed'\n                      defaultMessage='fileTypeNotAllowed'\n                    />\n                  </div>\n                );\n              }\n              return (\n                <div {...getRootProps()} className={`${classes} title`}>\n                  <input {...getInputProps()} />\n                  {placeholder}\n                </div>\n              );\n            }}\n          </Dropzone>\n          {Object.keys(fileSelected).length > 0 && (\n            <div className='p-1 text-center'>\n              <small className='icon-bni'>\n                <i className='fa fa-file-excel-o pe-1' />\n                {fileSelected.name}\n                <small className='ps-1'>\n                  <em>({getFileSize(fileSelected.size)})</em>\n                </small>\n              </small>\n            </div>\n          )}\n          <div className='d-flex justify-content-evenly'>\n            <button className='btn btn-bni w-50 rounded-0 rounded-start border-end'>\n              <CsvDownloader\n                datas={sampleDownload}\n                filename={`inc-exp-csv-sample-import.csv`}\n              >\n                <i className='fa fa-file-downoad pe-1' />\n                <FormattedMessage\n                  id='downloadCsvTemplate'\n                  defaultMessage='downloadCsvTemplate'\n                />\n              </CsvDownloader>\n            </button>\n            {\n              <button\n                disabled={!data.length}\n                onClick={() => onsubmit()}\n                className='btn-bni w-50 rounded-0 rounded-end'\n              >\n                <FormattedMessage id='submit' defaultMessage='submit' />\n              </button>\n            }\n          </div>\n        </div>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nBulkImportIncExp.propTypes = {\n  property: PropTypes.string,\n};\n\nexport default BulkImportIncExp;\n","/* eslint-disable camelcase */\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { monthExpenditureConfig } from \"../configuration/backendTableConfig\";\nimport BackendCore from \"../../components/configuration/backend/BackendCore\";\nimport { AccountContext } from \"./AccountPlanner\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport moment from \"moment\";\nimport apiInstance from \"../../services/apiServices\";\nimport Loader from \"../resuable/Loader\";\nimport { MyAlertContext } from \"../../contexts/AlertContext\";\nimport { UpgradeHeading, UpgradeContent } from \"../payment/Upgrade\";\n\nconst TemplateClone = props => {\n  const { intl } = props;\n  const accountContext = useContext(AccountContext);\n  const userContext = useContext(UserContext);\n  const myAlertContext = useContext(MyAlertContext);\n  const { incExpList, bankList, insertData } = accountContext;\n  const [dbData, setDbData] = useState([]);\n  const [loader, setLoader] = useState(false);\n\n  const getTemplate = () => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance\n      .post(\"/account_planner/getIncExpTemplate\", formdata)\n      .then(res => res.data.response)\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const cloneFromTemplate = () => {\n    setLoader(true);\n    accountContext.setInsertData([]);\n    const a = getTemplate();\n    Promise.all([a])\n      .then(r => {\n        const data = r[0];\n        const ins = data\n          .map(\n            ({\n              temp_inc_exp_name,\n              temp_amount,\n              temp_inc_exp_type,\n              temp_inc_exp_date,\n              temp_category,\n              temp_bank,\n            }) => {\n              return {\n                inc_exp_id: \"\",\n                inc_exp_name: temp_inc_exp_name,\n                inc_exp_amount: 0,\n                inc_exp_plan_amount: temp_amount,\n                inc_exp_type: temp_inc_exp_type,\n                inc_exp_date: moment()\n                  .date(temp_inc_exp_date)\n                  .add(1, \"months\")\n                  .format(\"YYYY-MM-DD\"),\n                inc_exp_category: temp_category,\n                inc_exp_bank: temp_bank,\n                inc_exp_comments: \"\",\n              };\n            },\n          )\n          .sort(\n            (a, b) =>\n              new Date(a.inc_exp_date.replace(/-/g, \"/\")) -\n              new Date(b.inc_exp_date.replace(/-/g, \"/\")),\n          );\n        accountContext.setInsertData(ins);\n      })\n      .finally(() => {\n        setLoader(false);\n      });\n  };\n  useEffect(() => {\n    cloneFromTemplate();\n  }, [intl]);\n\n  useEffect(() => {\n    const incExpListDropDownObject = {\n      fetch: {\n        dropDownList: incExpList.map(({ id, value }, i) => ({\n          id,\n          value,\n        })),\n      },\n    };\n\n    const bankListArray = {\n      fetch: {\n        dropDownList: bankList,\n      },\n    };\n    monthExpenditureConfig[0].rowElements[3] = \"number\";\n    monthExpenditureConfig[0].rowElements[6] = incExpListDropDownObject;\n    monthExpenditureConfig[0].rowElements[7] = bankListArray;\n    monthExpenditureConfig[0].rowElements[4] = {\n      radio: {\n        radioList: [\n          {\n            label: intl.formatMessage({\n              id: \"credit\",\n              defaultMessage: \"credit\",\n            }),\n            value: \"Cr\",\n            checked: false,\n          },\n          {\n            label: intl.formatMessage({\n              id: \"debit\",\n              defaultMessage: \"debit\",\n            }),\n            value: \"Dr\",\n            checked: true,\n          },\n        ],\n      },\n    };\n    const searchFor = (array, key) => {\n      const row =\n        key &&\n        array.filter(f => f.value?.toLowerCase().includes(key?.toLowerCase()));\n      const id = row.length > 0 ? row[0].id : \"\";\n      return id;\n    };\n\n    const backIns = [...insertData].map(o => {\n      o.inc_exp_category = searchFor(incExpList, o.inc_exp_category);\n      o.inc_exp_bank = searchFor(bankList, o.inc_exp_bank);\n      return o;\n    });\n    setDbData([]);\n    setTimeout(() => {\n      const credit = backIns\n        .filter(f => f.inc_exp_type === \"Cr\")\n        .reduce((a, c) => Number(a) + Number(c.inc_exp_plan_amount), 0);\n      const debit = backIns\n        .filter(f => f.inc_exp_type === \"Dr\")\n        .reduce((a, c) => Number(a) + Number(c.inc_exp_plan_amount), 0);\n      const balance = credit - debit;\n      const obj = {\n        table: backIns,\n        total: {\n          inc_exp_plan_amount: [\n            {\n              value: credit,\n              prefix: \"\",\n              suffix: \"(+)\",\n            },\n            {\n              value: debit,\n              prefix: \"\",\n              suffix: \"(-)\",\n            },\n            {\n              value: balance,\n              prefix: \"\",\n              suffix: \"(=)\",\n              className: \"rounded bni-bg text-dark p-1\",\n            },\n          ],\n        },\n      };\n      setDbData(obj);\n    }, 100);\n  }, [insertData, intl]);\n\n  const config = monthExpenditureConfig.map(crud => {\n    const obj = {\n      header: {\n        searchPlaceholder: intl.formatMessage({\n          id: \"searchHere\",\n          defaultMessage: \"searchHere\",\n        }),\n        searchable: false,\n      },\n      footer: {\n        total: {\n          title: intl.formatMessage({ id: \"total\", defaultMessage: \"total\" }),\n          locale: \"en\",\n          currency: \"\",\n          maxDecimal: 2,\n        },\n        pagination: {\n          currentPage: \"last\",\n          maxPagesToShow: 5,\n        },\n      },\n    };\n    crud.config = obj;\n    crud.TableAliasRows = [\n      \"id\",\n      \"transaction\",\n      \"amount\",\n      \"plan\",\n      \"type\",\n      \"date\",\n      \"category\",\n      \"bank\",\n      \"comments\",\n    ].map(al => intl.formatMessage({ id: al, defaultMessage: al }));\n    return crud;\n  });\n\n  const onPostApi = response => {\n    const { status, data } = response;\n    if (status === 200) {\n      if (\n        response &&\n        data &&\n        typeof data.response === \"boolean\" &&\n        data.response !== null &&\n        data.response\n      ) {\n        accountContext.renderToast({\n          message: intl.formatMessage({\n            id: \"transactionSavedSuccessfully\",\n            defaultMessage: \"transactionSavedSuccessfully\",\n          }),\n        });\n      }\n      if (\n        response &&\n        data &&\n        typeof data.response === \"boolean\" &&\n        data.response !== null &&\n        data.response === false\n      ) {\n        accountContext.renderToast({\n          type: \"error\",\n          icon: \"fa fa-times-circle\",\n          message: intl.formatMessage({\n            id: \"noFormChangeFound\",\n            defaultMessage: \"noFormChangeFound\",\n          }),\n        });\n      }\n      if (response && data && data.response === null) {\n        myAlertContext.setConfig({\n          show: true,\n          className: \"alert-danger border-0 text-dark\",\n          type: \"danger\",\n          dismissible: true,\n          heading: <UpgradeHeading />,\n          content: <UpgradeContent />,\n        });\n      }\n    } else {\n      accountContext.renderToast({\n        type: \"error\",\n        icon: \"fa fa-times-circle\",\n        message: intl.formatMessage({\n          id: \"unableToReachServer\",\n          defaultMessage: \"unableToReachServer\",\n        }),\n      });\n    }\n  };\n\n  const onReFetchData = () => {\n    setDbData([]);\n  };\n\n  const onChangeParams = obj => {};\n\n  return (\n    <div>\n      {dbData?.table?.length > 0 && (\n        <div>\n          <h6>\n            <FormattedMessage\n              id='planFromTemplate'\n              defaultMessage='planFromTemplate'\n            />\n          </h6>\n          {config\n            .sort((a, b) => a.id > b.id)\n            .map((t, i) => (\n              <BackendCore\n                key={i}\n                config={t.config}\n                Table={t.Table}\n                TableRows={t.TableRows}\n                TableAliasRows={t.TableAliasRows}\n                rowElements={t.rowElements}\n                dbData={dbData}\n                postApiUrl='/account_planner/postAccountPlanner'\n                onPostApi={response => onPostApi(response)}\n                onChangeParams={obj => onChangeParams(obj)}\n                showTooltipFor={t.showTooltipFor}\n                defaultValues={t.defaultValues}\n                onReFetchData={onReFetchData}\n                cellWidth={[4, 13, 10, 10, 13, 10, 13, 13, 13]}\n                ajaxButtonName={intl.formatMessage({\n                  id: \"submit\",\n                  defaultMessage: \"submit\",\n                })}\n                appIdKeyValue={{\n                  key: \"inc_exp_appId\",\n                  value: userContext.userConfig.appId,\n                }}\n                theme={userContext.userData.theme}\n              />\n            ))}\n        </div>\n      )}\n      {loader && (\n        <div className='relativeSpinner'>\n          <Loader />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default injectIntl(TemplateClone);\n","import React, { useState, useEffect, useContext } from \"react\";\nimport Loader from \"../resuable/Loader\";\nimport IncExpChart from \"./IncExpChart\";\nimport CreditCardChart from \"./CreditCardChart\";\nimport MonthExpenditureTable from \"./MonthExpenditureTable\";\nimport SetBank from \"./SetBank\";\nimport SetYear from \"./SetYear\";\nimport SetCcYear from \"./SetCcYear\";\nimport SetCcBank from \"./SetCcBank\";\nimport TypeCreditCardExpenditure from \"./TypeCreditCardExpenditure\";\nimport FastShopping from \"./FastShopping\";\nimport apiInstance from \"../../services/apiServices\";\nimport CheckCardCycleDate from \"./CheckCardCycleDate\";\nimport ConfirmQBModal from \"./ConfirmQBModal\";\nimport { GlobalContext } from \"../../contexts/GlobalContext\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport BulkImportIncExp from \"./BulkImportIncExp\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport TemplateClone from \"./TemplateClone\";\nimport { useQuery } from \"../GlobalHeader/queryParamHook\";\nimport moment from \"moment\";\nimport PageHeader from \"../shared/PageHeader\";\n\nexport const AccountContext = React.createContext();\n\nconst AccountPlanner = props => {\n  const intl = useIntl();\n  const globalContext = useContext(GlobalContext);\n  document.title = `${globalContext.appName} - ${intl.formatMessage({\n    id: \"moneyPlanner\",\n    defaultMessage: \"moneyPlanner\",\n  })}`;\n  const userContext = useContext(UserContext);\n\n  const renderToast = ({\n    autoClose = 5000,\n    type = \"success\",\n    position = \"top-right\",\n    message,\n    theme = \"colored\",\n    hideProgressBar = false,\n    closeOnClick = false,\n    pauseOnHover = true,\n    draggable = true,\n  }) =>\n    toast[type](message, {\n      autoClose,\n      position,\n      theme,\n      hideProgressBar,\n      closeOnClick,\n      pauseOnHover,\n      draggable,\n    });\n\n  const [yearList, setYearList] = useState([]);\n  const [ccYearList, setCcYearList] = useState([]);\n  const [bankList, setBankList] = useState([]);\n  const [chartData, setChartData] = useState([]);\n  const [ccChartData, setCcChartData] = useState([]);\n  const [incExpList, setIncExpList] = useState([]);\n  const [bankDetails, setBankDetails] = useState([]);\n  const [insertData, setInsertData] = useState([]);\n\n  const [ccYearSelected, setCcYearSelected] = useState(\"\");\n  const [ccBankList, setCcBankList] = useState([]);\n  const [ccBankSelected, setCcBankSelected] = useState(\"\");\n\n  const [yearSelected, setYearSelected] = useState(\"\");\n  const [bankSelected, setBankSelected] = useState(\"\");\n  const [monthYearSelected, setMonthYearSelected] = useState(\"\");\n  const [ccMonthYearSelected, setCcMonthYearSelected] = useState(\"\");\n\n  const [ccDetails, setCcDetails] = useState({});\n\n  const [chartLoader, setChartLoader] = useState(false);\n  const [ccChartLoader, setCcChartLoader] = useState(false);\n\n  const [openModal, setOpenModal] = useState(false); // change to false\n  const [openFastShopModal, setOpenFastShopModal] = useState(false); // change to false\n  const [openBulkImportModal, setOpenBulkImportModal] = useState(false); // change to false\n  const [openQBModal, setOpenQBModal] = useState(false); // change to false\n  const [templateClone, setTemplateClone] = useState(false);\n  const searchParams = useQuery();\n  const params = {\n    fetch: searchParams.get(\"fetch\"),\n    date: searchParams.get(\"date\"),\n    bank: searchParams.get(\"bank\"),\n    card: searchParams.get(\"card\"),\n  };\n  const [paramBankFetch, setParamBankFetch] = useState(false);\n  const [paramCcFetch, setParamCcFetch] = useState(false);\n\n  const getCreditCardDetails = bank => {\n    const formdata = new FormData();\n    formdata.append(\"bank\", bank);\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance.post(\"/account_planner/credit_card_details\", formdata);\n  };\n\n  const getIncExpChartData = (sDate, eDate, bank) => {\n    const formdata = new FormData();\n    formdata.append(\"startDate\", sDate);\n    formdata.append(\"endDate\", eDate);\n    formdata.append(\"bank\", bank);\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance.post(\"/account_planner/getIncExpChartData\", formdata);\n  };\n\n  const getCreditCardChartData = (sDate, eDate, card) => {\n    const formdata = new FormData();\n    formdata.append(\"startDate\", sDate);\n    formdata.append(\"endDate\", eDate);\n    formdata.append(\"card\", card);\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance.post(\n      \"/account_planner/getCreditCardChartData\",\n      formdata,\n    );\n  };\n  const getYearList = () => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    0;\n    return apiInstance\n      .post(\"/account_planner/year_list\", formdata)\n      .then(res => res.data.response)\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const getCcYearList = () => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance\n      .post(\"/account_planner/cc_year_list\", formdata)\n      .then(res => res.data.response)\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const getBankList = () => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance\n      .post(\"/account_planner/bank_list\", formdata)\n      .then(res => res.data.response)\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  const getCcBankList = () => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance\n      .post(\"/account_planner/credit_card_list\", formdata)\n      .then(res => res.data.response)\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  const getIncExpList = () => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance\n      .post(\"/account_planner/inc_exp_list\", formdata)\n      .then(res => res.data.response)\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  const getBankDetails = bankId => {\n    const formdata = new FormData();\n    formdata.append(\"bank\", bankId);\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance.post(\"/account_planner/getBankDetails\", formdata);\n  };\n\n  useEffect(() => {\n    const a = getYearList();\n    const b = getBankList();\n    const c = getCcYearList();\n    const d = getCcBankList();\n    const e = getIncExpList();\n    Promise.all([a, b, c, d, e]).then(r => {\n      r[0]?.length > 0\n        ? setYearList(r[0])\n        : setYearList([\n            {\n              id: moment(new Date()).format(\"YYYY\").toString(),\n              value: moment(new Date()).format(\"YYYY\").toString(),\n            },\n          ]);\n      r[0]?.length > 0 && r[0][0].id\n        ? setYearSelected(r[0][0].id)\n        : setYearSelected(\"Null\");\n      r[1]?.length > 0\n        ? setBankList(r[1])\n        : setBankList([\n            {\n              id: intl.formatMessage({ id: \"null\", defaultMessage: \"null\" }),\n              value: intl.formatMessage({ id: \"null\", defaultMessage: \"null\" }),\n            },\n          ]);\n      r[1]?.length > 0 && r[1][0].id\n        ? setBankSelected(r[1][0].id)\n        : setBankSelected(\"Null\");\n      r[2]?.length > 0\n        ? setCcYearList(r[2])\n        : setCcYearList([\n            {\n              id: moment(new Date()).format(\"YYYY\").toString(),\n              value: moment(new Date()).format(\"YYYY\").toString(),\n            },\n          ]);\n      r[2]?.length > 0 && r[2][0].id\n        ? setCcYearSelected(moment(new Date()).format(\"YYYY\").toString())\n        : setCcYearSelected(\"Null\");\n      r[3]?.length > 0\n        ? setCcBankList(r[3])\n        : setCcBankList([\n            {\n              id: intl.formatMessage({ id: \"null\", defaultMessage: \"null\" }),\n              value: intl.formatMessage({ id: \"null\", defaultMessage: \"null\" }),\n            },\n          ]);\n\n      r[3]?.length > 0 && r[3][0].id\n        ? setCcBankSelected(params?.card ? params?.card : r[3][0].id)\n        : setCcBankSelected(\"Null\");\n      r[4]?.length > 0\n        ? setIncExpList(r[4])\n        : setIncExpList([{ id: null, value: null, isIncomeMetric: null }]);\n    });\n    setCcChartData([]);\n  }, []);\n\n  const generateExpenses = async (isGeneratedOnClick, cb) => {\n    setChartLoader(true);\n    setChartData([]);\n    setInsertData([]);\n    const sDate = `${yearSelected}-01-01`;\n    const eDate = `${yearSelected}-12-31`;\n    await getIncExpChartData(sDate, eDate, bankSelected)\n      .then(async res => {\n        const cData = res.data.response;\n        setChartData(cData);\n        await getBankDetails(bankSelected)\n          .then(async res => {\n            setBankDetails(res.data.response);\n            typeof cb === \"function\" && isGeneratedOnClick\n              ? await cb(cData?.category[0]?.month)\n              : await cb();\n          })\n          .catch(error => {\n            setBankDetails([]);\n          });\n      })\n      .catch(error => {\n        setChartData([]);\n        console.log(error);\n      })\n      .finally(() => {\n        setChartLoader(false);\n      });\n  };\n\n  const onMonthYearSelected = monthYear => {\n    setMonthYearSelected(monthYear);\n  };\n\n  const onCcMonthYearSelected = monthYear => {\n    setCcMonthYearSelected(monthYear);\n  };\n\n  const generateCreditCards = async (isGeneratedOnClick, cb) => {\n    setCcChartLoader(true);\n    setCcChartData([]);\n    setCcDetails([]);\n    setCcMonthYearSelected(null);\n    await getCreditCardDetails(ccBankSelected)\n      .then(async res => {\n        const data = res.data.response[0];\n        setCcDetails(data);\n        const sDate = `${ccYearSelected}-01-01`;\n        const eDate = `${ccYearSelected}-12-31`;\n        await getCreditCardChartData(sDate, eDate, ccBankSelected)\n          .then(async res => {\n            const cdata = res.data.response;\n            const months = cdata.map(cm => cm.month);\n            const currentMonthIndex = months.findIndex(\n              f => f === moment().format(\"MMM-YYYY\").toString(),\n            );\n            const selMonth =\n              currentMonthIndex > -1\n                ? months[currentMonthIndex]\n                : cdata[11].month;\n            setCcChartData(cdata);\n            typeof cb === \"function\" && isGeneratedOnClick\n              ? await cb(selMonth)\n              : await cb(data);\n          })\n          .catch(error => {\n            console.log(error);\n          })\n          .finally(() => {\n            setCcChartLoader(false);\n          });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const loaderComp = () => {\n    return (\n      <div className='relativeSpinner'>\n        <Loader />\n      </div>\n    );\n  };\n  /*\n   * Query params landing feature starts\n   */\n  useEffect(() => {\n    const paramYear = moment(params.date).format(\"YYYY\").toString();\n    if (\n      yearList.length > 0 &&\n      bankList.length > 0 &&\n      params.fetch === \"bankTransactions\"\n    ) {\n      setYearSelected(paramYear);\n      setBankSelected(params.bank);\n      setParamBankFetch(true);\n    }\n  }, [JSON.stringify(params), yearList, bankList]);\n\n  useEffect(() => {\n    if (\n      ccBankList.length > 0 &&\n      ccYearList.length > 0 &&\n      params.fetch === \"ccTransactions\"\n    ) {\n      const paramYear = moment(params.date).format(\"YYYY\").toString();\n      setCcYearSelected(paramYear);\n      setCcBankSelected(params.card);\n      setParamCcFetch(true);\n    }\n  }, [JSON.stringify(params), ccBankList, ccYearList]);\n\n  useEffect(() => {\n    if (yearSelected && bankSelected && paramBankFetch) {\n      const paramMonthYear = moment(params.date).format(\"MMM-YYYY\").toString();\n      generateExpenses(false, () => {\n        setMonthYearSelected(paramMonthYear);\n        setParamBankFetch(false);\n        setTimeout(() => {\n          document.getElementById(\"incExpTable\")?.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"center\",\n            inline: \"start\",\n          });\n        }, 200);\n      });\n    }\n  }, [JSON.stringify(params), paramBankFetch, yearSelected, bankSelected]);\n\n  useEffect(() => {\n    if (ccYearSelected && ccBankSelected && paramCcFetch) {\n      generateCreditCards(false, ccDet => {\n        const paramMonthYear =\n          Number(ccDet.credit_card_start_date) >=\n          Number(moment(params.date).format(\"D\").toString())\n            ? moment(params.date).format(\"MMM-YYYY\").toString()\n            : moment(params.date).add(1, \"M\").format(\"MMM-YYYY\").toString();\n\n        setCcMonthYearSelected(paramMonthYear);\n        setParamCcFetch(false);\n        setTimeout(() => {\n          document.getElementById(\"ccTable\")?.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"center\",\n            inline: \"start\",\n          });\n        }, 200);\n      });\n    }\n  }, [JSON.stringify(params), paramCcFetch, ccYearSelected, ccBankSelected]);\n\n  /*\n   * Query params landing feature ends\n   */\n\n  return (\n    <AccountContext.Provider\n      value={{\n        renderToast,\n        bankSelected,\n        setBankSelected,\n        bankDetails,\n        bankList,\n        setBankList,\n        yearSelected,\n        setYearSelected,\n        yearList,\n        monthYearSelected,\n        onMonthYearSelected,\n        incExpList,\n        setIncExpList,\n        ccBankList,\n        ccBankSelected,\n        setCcBankSelected,\n        ccYearSelected,\n        setCcYearSelected,\n        ccYearList,\n        setCcBankList,\n        chartData,\n        ccChartData,\n        ccDetails,\n        setCcDetails,\n        ccMonthYearSelected,\n        onCcMonthYearSelected,\n        insertData,\n        setInsertData,\n      }}\n    >\n      <ToastContainer className='bniToaster' />\n      <section className=''>\n        {openModal && (\n          <CheckCardCycleDate\n            show={openModal}\n            onHide={() => setOpenModal(false)}\n            size='sm'\n            animation={false}\n          />\n        )}\n        {openFastShopModal && (\n          <FastShopping\n            className='accountPlanner fastShopping'\n            show={openFastShopModal}\n            onHide={() => setOpenFastShopModal(false)}\n            size='sm'\n            animation={false}\n          />\n        )}\n        {openBulkImportModal && (\n          <BulkImportIncExp\n            className='accountPlanner'\n            show={openBulkImportModal}\n            onHide={() => setOpenBulkImportModal(false)}\n            centered\n            size='lg'\n            backdrop='static'\n          />\n        )}\n        {openQBModal && (\n          <ConfirmQBModal\n            className='confirmQBModal'\n            show={openQBModal}\n            onHide={() => {\n              setOpenQBModal(false);\n              setToggleQueryBuilder(false);\n            }}\n            onYes={() => {\n              setOpenQBModal(false);\n              setToggleQueryBuilder(true);\n            }}\n            size='md'\n            animation={false}\n          />\n        )}\n        <div className='m-2'>\n          <PageHeader icon='fa fa-cubes' intlId='moneyPlanner' />\n          <div className='pt-2'>\n            <div className={`accountPlanner ${userContext.userData.theme}`}>\n              {bankList.length > 0 &&\n              yearList.length &&\n              ccYearList.length > 0 &&\n              ccBankList.length > 0 > 0 ? (\n                <>\n                  <div\n                    className={`badge ${\n                      userContext.userData.theme === \"dark\"\n                        ? \"bg-secondary text-white\"\n                        : \"bg-light text-dark\"\n                    }`}\n                  >\n                    <FormattedMessage\n                      id='bankTransactions'\n                      defaultMessage='bankTransactions'\n                    />\n                  </div>\n                  <div className='row mt-10'>\n                    <div className='col-lg-3 col-sm-4 py-2'>\n                      <SetBank />\n                    </div>\n                    <div className='col-lg-3 col-sm-4 py-2'>\n                      <SetYear />\n                    </div>\n                    <div className='col-lg-3 col-sm-4 py-2'>\n                      <div className='d-grid gap-2'>\n                        <button\n                          onClick={() =>\n                            generateExpenses(true, val => {\n                              setMonthYearSelected(val);\n                            })\n                          }\n                          className='btn icon-bni bni-border bni-border-all bni-border-all-1'\n                        >\n                          <FormattedMessage\n                            id='generate'\n                            defaultMessage='generate'\n                          />\n                        </button>\n                      </div>\n                    </div>\n                    <div className='col-lg-1 col-4 py-2 mb-2'>\n                      <button\n                        onClick={() => setOpenFastShopModal(true)}\n                        className='btn btn-bni w-100'\n                        title={intl.formatMessage({\n                          id: \"fastShopping\",\n                          defaultMessage: \"fastShopping\",\n                        })}\n                      >\n                        <i className='fa fa-cart-plus' />\n                      </button>\n                    </div>\n                    <div className='col-lg-1 col-4 py-2 mb-2'>\n                      <button\n                        onClick={() => setOpenBulkImportModal(true)}\n                        className='btn btn-bni w-100'\n                        title={intl.formatMessage({\n                          id: \"bulkImport\",\n                          defaultMessage: \"bulkImport\",\n                        })}\n                        disabled={\n                          userContext?.userConfig?.planIsBulkImport !== \"1\"\n                        }\n                      >\n                        <i className='fa fa-cloud-upload' />\n                      </button>\n                    </div>\n                    <div className='col-lg-1 col-4 py-2 mb-2'>\n                      <button\n                        onClick={() => setTemplateClone(!templateClone)}\n                        className='btn btn-bni w-100'\n                        title={intl.formatMessage({\n                          id: \"planFromTemplate\",\n                          defaultMessage: \"planFromTemplate\",\n                        })}\n                      >\n                        <i className='fa fa-clone' />\n                      </button>\n                    </div>\n                  </div>\n                  {bankList.length > 0 && templateClone && <TemplateClone />}\n                  {chartLoader ? (\n                    loaderComp()\n                  ) : (\n                    <>\n                      {incExpList.length > 0 && bankDetails.length > 0 && (\n                        <IncExpChart />\n                      )}\n                    </>\n                  )}\n                  <div className='row'>\n                    <div className='col-md-12 b-0 mb-10 pr-0 pl-0'>\n                      {\n                        // bankSelected &&\n                        //   incExpList.length > 0 &&\n                        //   bankList.length > 0 &&\n                        // monthYearSelected &&\n                        bankDetails.length > 0 && <MonthExpenditureTable />\n                      }\n                    </div>\n                  </div>\n                  <div className='row'>\n                    <div className='col-md-12'>\n                      <div\n                        className={`badge ${\n                          userContext.userData.theme === \"dark\"\n                            ? \"bg-secondary text-white\"\n                            : \"bg-light text-dark\"\n                        }`}\n                      >\n                        <FormattedMessage\n                          id='creditCardTransactions'\n                          defaultMessage='creditCardTransactions'\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <div className='row'>\n                    <div className='col-md-4 py-2'>\n                      <SetCcBank />\n                    </div>\n                    <div className='col-md-4 py-2'>\n                      <SetCcYear />\n                    </div>\n                    <div className='col-md-3 py-2'>\n                      <div className='d-grid gap-2'>\n                        <button\n                          onClick={() =>\n                            generateCreditCards(true, val => {\n                              setCcMonthYearSelected(val);\n                            })\n                          }\n                          className='btn icon-bni bni-border bni-border-all bni-border-all-1'\n                        >\n                          <FormattedMessage\n                            id='generate'\n                            defaultMessage='generate'\n                          />\n                        </button>\n                      </div>\n                    </div>\n                    <div className='col-md-1 py-2'>\n                      <button\n                        onClick={() => setOpenModal(true)}\n                        className='btn btn-bni w-100'\n                      >\n                        <i className='fa fa-calendar-o mt-20' />\n                      </button>\n                    </div>\n                  </div>\n                  {ccChartLoader ? (\n                    loaderComp()\n                  ) : ccChartData && ccChartData.length > 0 ? (\n                    <CreditCardChart />\n                  ) : (\n                    <div className='py-3 text-center'>\n                      <FormattedMessage\n                        id='noRecordsGenerated'\n                        defaultMessage='noRecordsGenerated'\n                      />\n                    </div>\n                  )}\n                  <div className='row'>\n                    <div className='col-md-12 pt-2'>\n                      {ccMonthYearSelected &&\n                        ccBankSelected &&\n                        incExpList.length &&\n                        ccBankList.length &&\n                        ccDetails && <TypeCreditCardExpenditure />}\n                    </div>\n                  </div>\n                </>\n              ) : (\n                loaderComp()\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n    </AccountContext.Provider>\n  );\n};\n\nexport default AccountPlanner;\n"],"names":["useQuery","search","useLocation","useMemo","URLSearchParams","injectIntl","props","intl","accountContext","useContext","AccountContext","chartData","bankDetails","onMonthYearSelected","monthYearSelected","localeContext","LocaleContext","userContext","UserContext","ref","useRef","data","setData","useState","lineChartData","setLineChartData","width","setWidth","metrics","setMetrics","creditLineColor","getComputedStyle","document","documentElement","getPropertyValue","incomeLineColor","svgWrapperId","useEffect","current","clientWidth","_filt","_filt$","massageData","_ref","category","total","dated","month","label","helpers","shorten","value","Number","isEmpty","Ddata","map","cd","_cd$data","_cd$data$expense","_cd$data2","_cd$data2$income","cData","expense","length","ex","creditData","income","lChart","color","points","_ref2","measureDate","monthStart","monthEnd","totalIncome","metricIncome","x","z","y","metricTotal","Date","_ref3","filt","filter","f","start","end","weekNumber","getWeekNumber","setTimeout","_ref$current","_ref$current$childNod","reduce","a","b","hourly","countryCurrencyLacSeperator","bank_locale","bank_currency","daily","weekly","childNodes","style","height","_ref$current2","_ref$current2$querySe","_Array$from","onXClick","e","target","id","xAxisElement","querySelector","getElementsByClassName","children","ticks","Array","from","t","classList","contains","reverse","i","_points$i","remove","setAttribute","addEventListener","_Array$from2","g","getElementsByTagName","add","removeEventListener","days","Math","floor","ceil","colors","donutChartColors","getMinMax","type","isFinite","Metric","_ref4","i18Key","_jsxs","className","formatMessage","defaultMessage","_jsx","title","_Fragment","FormattedMessage","Row","Col","lg","sm","xs","getTotalIncome","v","LineChart","margins","top","right","bottom","left","isDate","xLabel","yLabel","onPointHover","d","tooltipClass","xDisplay","r","date","moment","format","first","toLocaleString","toLowerCase","last","getFullYear","getMonthString","onPointClick","c","String","onClick","split","DonutChart","strokeColor","userData","theme","innerRadius","outerRadius","clickToggle","legend","formatValues","values","genId","_data$","ccMonthYearSelected","ccDetails","setCcDetails","onCcMonthYearSelected","setChartData","toggleChart","setToggleChart","interestLineColor","purchasesLineColor","paidLineColor","openingLineColor","dateRanges","setDateRanges","smonth","year","strToNumMonth","ccStartDay","credit_card_start_date","ccEndDay","credit_card_end_date","eDate","replace","eDateStr","leadingZeros","getMonth","getDate","sDate","setTime","getTime","setDate","sDateStr","payDate","credit_card_payment_date","addMonths","yyyy","mmm","dd","prev","creditCardCycleStartDate","creditCardCycleEndDate","_ref$current$querySel","where","fill","_","mm","monthToStr","row","includes","yy","getTotal","num","toFixed","credit_card_locale","credit_card_currency","_ref$current2$childNo","getMonthLocale","position","localeLanguage","localeCurrency","credit_card_number","ccChartData","ccYearSelected","l","ob","paid","purchases","taxesInterest","balance","CreditCardUsage","useIntl","bankSelected","selectedPlan","rest","table","setTable","allLoader","setAllLoader","getPlanDetails","Promise","all","then","formdata","FormData","append","startDate","endDate","criteria","userConfig","appId","apiInstance","post","res","response","catch","error","console","log","doDifference","plan","actual","array","commitTotal","plannedTotal","diffTotal","Modal","zIndex","Header","closeButton","Title","Body","Loader","diff","inc_exp_plan_amount","inc_exp_amount","push","dArr","inc_exp_name","colSpan","totals","appplicationBalance","setApplicationBalance","bankBalance","setBankBalance","unAccounted","setUnAccounted","walletBalance","setWalletBalance","grandTotal","setGrandTotal","progressPercent","setProgressPercent","live","flagString","amount","GrandTotal","round","percent","isNaN","getStatus","netValue","class","onChange","placeholder","readOnly","htmlFor","srcArr","incExpList","sources","setSources","dest","setDest","formData","setFormData","source","description","availableFunds","postData","ev","err","FilterSelect","ind","pKey","srcId","des","onSourceChange","element","fetch","dropDownList","searchable","disabled","onsubmit","renderToast","message","icon","MonthExpenditureTable","context","_Object$keys","myAlertContext","MyAlertContext","bankList","incExpListDropDownObject","bankListArray","rElements","setRelements","planCards","setPlanCards","key","planString","planCount","planTotal","dbData","setDbData","setTotals","openPlanModal","setOpenPlanModal","openTallyModal","setOpenTallyModal","fundTransferModal","setFundTransferModal","setSelectedPlan","loader","setLoader","now","getNow","monthExpenditureConfig","setMonthExpenditureConfig","defApiParam","limit","searchString","apiParams","setApiParams","selMonthYear","setSelMonthYear","config","header","searchPlaceholder","footer","locale","currency","maxDecimal","pagination","currentPage","maxPagesToShow","rowElements","Table","TableRows","TableAliasRows","al","defaultValues","inc_exp_type","inc_exp_date","showTooltipFor","getAllApi","cb","wClause","getBackendAjax","async","_data$table$","rEle","isAfter","radio","radioList","checked","finally","renderCloneTooltip","content","Tooltip","calculatePlanning","getPlanSum","calDays","planData","goodPlans","goodPlanCount","badPlans","badPlanCount","noPlans","noPlanCount","achievedPlans","achievedPlanCount","totCards","newCards","p","searchParams","params","React","get","pMonth","Object","keys","_dbData$total","_dbData$total$inc_exp","_dbData$total2","_dbData$total2$inc_ex","_dbData$total3","_dbData$total3$inc_ex","_dbData$total4","_dbData$total4$inc_ex","totArray","newTotals","PlanInfoModal","show","onHide","size","animation","TallyModal","FundTransferModal","centered","OverlayTrigger","placement","delay","hide","overlay","triggerType","exportToPdf","body","inc_exp_comments","doc","jsPDF","text","stringToCapitalize","autoTable","styles","overflow","head","mTotal","lacSeperator","halign","pTotal","_monthExpenditureConf","_monthExpenditureConf2","_monthExpenditureConf3","save","CsvDownloader","datas","stripCommasInCSV","filename","columns","displayName","onReplanHandle","relements","BackendCore","postApiUrl","onPostApi","status","setConfig","dismissible","heading","UpgradeHeading","UpgradeContent","intlKey","number","onChangeParams","obj","onReFetchData","cellWidth","ajaxButtonName","appIdKeyValue","clause","onPlanClick","setBankSelected","yearList","yearSelected","setYearSelected","ccYearList","setCcYearSelected","ccBankList","ccBankSelected","setCcBankSelected","onImport","lines","setLines","rows","setRows","setSource","parent","setParent","separator","setSeparator","headings","textAreaRef","seperator","linesBackup","line","join","child","onDragOver","preventDefault","onDrop","headKey","droppedItem","JSON","parse","dataTransfer","getData","cell","appendValue","dt","isValid","updateRows","index","rowsBackup","j","draggable","onDragStart","object","stringify","concatenateValues","removeCell","parrent","deleteAll","k","defaultValue","makeTable","n","newRows","cc_comments","cc_date","cc_expected_balance","cc_for_card","cc_id","cc_opening_balance","cc_payment_credits","cc_purchases","cc_taxes_interest","cc_transaction","_dbData$table","openCreditCardModal","setOpenCreditCardModal","insertCloneData","setInsertCloneData","creditCardConfig","creditCardMassageConfig","crud","CreditCardModal","sort","transaction","setTransaction","comments","setComments","setAmount","setType","cardType","setCardType","setBankList","setCcBankList","bank","setBank","setIncExpList","incExp","setIncExp","ccBank","setCcBank","isDecimal","setIsDecimal","btnLoader","setBtnLoader","delIcon","numPads","C","getBankList","getIncExpList","getCcBankList","objectToDate","YYYY","MM","DD","enforceFocus","onSubmit","digit","m","val","toString","newDigit","substring","slice","onNumPadClick","dangerouslySetInnerHTML","__html","DateTimePicker","required","clearIcon","Switch","onColor","offColor","checkedIcon","uncheckedIcon","saveExpense","insertData","inc_exp_id","inc_exp_appId","inc_exp_category","inc_exp_bank","cc_appId","cc_inc_exp_cat","cc_transaction_status","getElementById","reset","mSec","setMsec","seconds","remDays","startClock","hoursLeft","hours","minutesLeft","minutes","remainingSeconds","timer","pad","myStopFunction","clearTimeout","childLoader","setChildLoader","selectedBank","setSelectedBank","cardList","setCardList","loaderComp","card","sYYYY","sMM","sDD","eYYYY","eMM","eDD","pYYYY","pMM","pDD","abs","cardNumber","cardName","credit_card_name","getCreditCardDetails","CountDown","onYes","fileSize","maxRowsInsert","fileSelected","setFileSelected","sampleDownload","Dropzone","accept","maxSize","acceptedFiles","rejectedFiles","event","file","resolve","reject","input","reader","FileReader","readAsText","onload","allTextLines","result","headers","dataLines","tarr","replaceAll","joined","assign","Error","onerror","autoClose","getRootProps","getInputProps","isDragAccept","isDragReject","classes","name","bytes","mb","getFileSize","cloneFromTemplate","setInsertData","getTemplate","ins","temp_inc_exp_name","temp_amount","temp_inc_exp_type","temp_inc_exp_date","temp_category","temp_bank","searchFor","_f$value","backIns","o","credit","debit","prefix","suffix","_userContext$userConf","globalContext","GlobalContext","appName","setYearList","setCcYearList","setCcChartData","setBankDetails","setMonthYearSelected","setCcMonthYearSelected","chartLoader","setChartLoader","ccChartLoader","setCcChartLoader","openModal","setOpenModal","openFastShopModal","setOpenFastShopModal","openBulkImportModal","setOpenBulkImportModal","openQBModal","setOpenQBModal","templateClone","setTemplateClone","paramBankFetch","setParamBankFetch","paramCcFetch","setParamCcFetch","getYearList","getCcYearList","_r$","_r$2","_r$3","_r$4","_r$5","_r$6","_r$7","_r$8","_r$9","isIncomeMetric","generateExpenses","isGeneratedOnClick","getIncExpChartData","bankId","getBankDetails","_cData$category$","generateCreditCards","getCreditCardChartData","cdata","months","cm","currentMonthIndex","findIndex","selMonth","paramYear","paramMonthYear","_document$getElementB","scrollIntoView","behavior","block","inline","ccDet","_document$getElementB2","Provider","hideProgressBar","closeOnClick","pauseOnHover","toast","monthYear","ToastContainer","CheckCardCycleDate","FastShopping","BulkImportIncExp","backdrop","ConfirmQBModal","setToggleQueryBuilder","PageHeader","intlId","SetBank","SetYear","planIsBulkImport","TemplateClone","IncExpChart","SetCcBank","SetCcYear","CreditCardChart","TypeCreditCardExpenditure"],"sourceRoot":""}