{"version":3,"sources":["components/shared/D3/BoxPlotChart/AxisLeft.js","components/shared/D3/BoxPlotChart/AxisBottomCategoric.js","components/shared/D3/BoxPlotChart/VerticalBox.js","components/shared/D3/BoxPlotChart/index.js","components/shared/D3/BoxPlotChart/summary-stats.js"],"names":["AxisLeft","_ref","yScale","pixelsPerTick","lineColor","fontColor","fontSize","showYaxisLine","range","ticks","useMemo","height","numberOfTicksTarget","Math","floor","map","value","yOffset","_jsxs","_Fragment","children","_jsx","d","join","fill","stroke","_ref2","transform","concat","x2","style","textAnchor","AxisBottom","xScale","showXaxisLine","xAxisTicksOrientation","_xScale$range","_xScale$range2","_slicedToArray","min","max","domain","xOffset","bandwidth","y2","_objectSpread","VerticalBox","q1","median","q3","width","strokeWidth","animationClass","showAnimation","x1","y1","className","x","y","BoxPlotChart","data","marginTop","marginRight","marginBottom","marginLeft","fillColor","padding","markerSize","showXaxis","showYaxis","showYaxisLabel","showXaxisLabel","yAxisLabel","xAxisLabel","boundsWidth","boundsHeight","_useMemo","_d3$extent","d3","_d3$extent2","chartMin","chartMax","groups","_toConsumableArray","Set","name","allShapes","group","i","sumStats","getSummaryStats","sortedData","sort","a","b","interQuantileRange","filter","defaultProps","boxPlotChartProps"],"mappings":"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","file":"static/js/7.2fa7568a.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\n\n// tick length\nconst TICK_LENGTH = 5;\n\nexport const AxisLeft = ({\n  yScale,\n  pixelsPerTick,\n  lineColor,\n  fontColor,\n  fontSize,\n  showYaxisLine,\n}) => {\n  const range = yScale.range();\n\n  const ticks = useMemo(() => {\n    const height = range[0] - range[1];\n    const numberOfTicksTarget = Math.floor(height / pixelsPerTick);\n\n    return yScale.ticks(numberOfTicksTarget).map(value => ({\n      value,\n      yOffset: yScale(value),\n    }));\n  }, [yScale]);\n\n  return (\n    <>\n      {showYaxisLine && (\n        <path\n          d={[\"M\", 0, range[0], \"L\", 0, range[1]].join(\" \")}\n          fill='none'\n          stroke={lineColor}\n        />\n      )}\n      {ticks.map(({ value, yOffset }) => (\n        <g key={value} transform={`translate(0, ${yOffset})`}>\n          {showYaxisLine && <line x2={-TICK_LENGTH} stroke={lineColor} />}\n          <text\n            key={value}\n            fill={fontColor}\n            style={{\n              fontSize: fontSize,\n              textAnchor: \"middle\",\n              transform: \"translateX(-20px)\",\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n","import React, { useMemo } from \"react\";\n\nconst TICK_LENGTH = 6;\n\nexport const AxisBottom = ({\n  xScale,\n  lineColor,\n  fontColor,\n  fontSize,\n  showXaxisLine,\n  xAxisTicksOrientation,\n}) => {\n  const [min, max] = xScale.range();\n\n  const ticks = useMemo(() => {\n    return xScale.domain().map(value => ({\n      value,\n      xOffset: xScale(value) + xScale.bandwidth() / 2,\n    }));\n  }, [xScale]);\n\n  return (\n    <>\n      {showXaxisLine && (\n        <path\n          d={[\"M\", min + 20, 0, \"L\", max - 20, 0].join(\" \")}\n          fill='none'\n          stroke={lineColor}\n        />\n      )}\n      {ticks.map(({ value, xOffset }) => (\n        <g key={value} transform={`translate(${xOffset}, 0)`}>\n          {showXaxisLine && <line y2={TICK_LENGTH} stroke={lineColor} />}\n          <text\n            key={value}\n            fill={fontColor}\n            style={{\n              fontSize: fontSize,\n              ...(xAxisTicksOrientation === \"vertical\"\n                ? {\n                    textAnchor: \"end\",\n                    transform: \"translate(0.5em, 1em) rotate(270deg)\",\n                  }\n                : { textAnchor: \"middle\", transform: \"translateY(20px)\" }),\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n","import React from \"react\";\n\nexport const VerticalBox = ({\n  min,\n  q1,\n  median,\n  q3,\n  max,\n  width,\n  stroke,\n  strokeWidth,\n  fill,\n  animationClass,\n  showAnimation,\n}) => {\n  return (\n    <>\n      <line\n        x1={width / 2}\n        x2={width / 2}\n        y1={min}\n        y2={max}\n        stroke={stroke}\n        strokeWidth={strokeWidth}\n        className={showAnimation ? animationClass : \"\"}\n      />\n      <rect\n        x={0}\n        y={q3}\n        width={width}\n        height={q1 - q3}\n        stroke={stroke}\n        fill={fill}\n        className={showAnimation ? animationClass : \"\"}\n      />\n      <line\n        x1={0}\n        x2={width}\n        y1={median}\n        y2={median}\n        stroke={stroke}\n        strokeWidth={strokeWidth}\n        className={showAnimation ? animationClass : \"\"}\n      />\n    </>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport { getSummaryStats } from \"./summary-stats\";\nimport { AxisLeft } from \"./AxisLeft\";\nimport { AxisBottom } from \"./AxisBottomCategoric\";\nimport { VerticalBox } from \"./VerticalBox\";\nimport { boxPlotChartProps } from \"../propsData\";\nimport PropTypes from \"prop-types\";\n\nconst BoxPlotChart = ({\n  width,\n  height,\n  data,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  fillColor,\n  fontColor,\n  lineColor,\n  padding,\n  markerSize,\n  fontSize,\n  showXaxis,\n  showYaxis,\n  showYaxisLabel,\n  showXaxisLabel,\n  yAxisLabel,\n  xAxisLabel,\n  animationClass,\n  showYaxisLine,\n  showXaxisLine,\n  showAnimation,\n  xAxisTicksOrientation,\n}) => {\n  const boundsWidth = width - marginRight - marginLeft;\n  const boundsHeight = height - marginTop - marginBottom;\n\n  // Compute everything derived from the dataset:\n  const { chartMin, chartMax, groups } = useMemo(() => {\n    const [chartMin, chartMax] = d3.extent(data.map(d => d.value));\n    const groups = [...new Set(data.map(d => d.name))];\n    return { chartMin, chartMax, groups };\n  }, [data]);\n\n  // Compute scales\n  const yScale = d3\n    .scaleLinear()\n    .domain([chartMin, chartMax])\n    .range([boundsHeight, 0]);\n  const xScale = d3\n    .scaleBand()\n    .range([0, boundsWidth])\n    .domain(groups)\n    .padding(padding);\n\n  // Build the box shapes\n  const allShapes = groups.map((group, i) => {\n    const groupData = data.filter(d => d.name === group).map(d => d.value);\n    const sumStats = getSummaryStats(groupData);\n\n    if (!sumStats) {\n      return null;\n    }\n\n    const { min, q1, median, q3, max } = sumStats;\n\n    return (\n      <g key={i} transform={`translate(${xScale(group)},0)`}>\n        <VerticalBox\n          width={xScale.bandwidth()}\n          q1={yScale(q1)}\n          median={yScale(median)}\n          q3={yScale(q3)}\n          min={yScale(min)}\n          max={yScale(max)}\n          stroke={lineColor}\n          strokeWidth={markerSize}\n          fill={fillColor}\n          showAnimation={showAnimation}\n          animationClass={animationClass}\n        />\n      </g>\n    );\n  });\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        {showYaxisLabel && (\n          <text\n            fontSize={fontSize}\n            x={-height / 2}\n            y='20'\n            fill={fontColor}\n            transform='rotate(270)'\n            style={{ textAnchor: \"middle\" }}\n          >\n            {yAxisLabel}\n          </text>\n        )}\n        <g\n          width={boundsWidth}\n          height={boundsHeight}\n          transform={`translate(${[marginLeft, marginTop].join(\",\")})`}\n        >\n          {allShapes}\n          {showYaxis && (\n            <AxisLeft\n              yScale={yScale}\n              pixelsPerTick={30}\n              lineColor={lineColor}\n              fontColor={fontColor}\n              fontSize={fontSize}\n              showYaxisLine={showYaxisLine}\n            />\n          )}\n          {showXaxis && (\n            <g transform={`translate(0, ${boundsHeight})`}>\n              <AxisBottom\n                xScale={xScale}\n                lineColor={lineColor}\n                fontColor={fontColor}\n                fontSize={fontSize}\n                showXaxisLine={showXaxisLine}\n                xAxisTicksOrientation={xAxisTicksOrientation}\n              />\n            </g>\n          )}\n        </g>\n        {showXaxisLabel && (\n          <text\n            fontSize={fontSize}\n            x={width / 2}\n            y={height - 10}\n            fill={fontColor}\n            style={{ textAnchor: \"middle\" }}\n          >\n            {xAxisLabel}\n          </text>\n        )}\n      </svg>\n    </div>\n  );\n};\n\nBoxPlotChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  data: PropTypes.array,\n  markerSize: PropTypes.number,\n  padding: PropTypes.number,\n  fontSize: PropTypes.number,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  showXaxis: PropTypes.bool,\n  showYaxis: PropTypes.bool,\n  yAxisLabel: PropTypes.string,\n  xAxisLabel: PropTypes.string,\n  showYaxisLabel: PropTypes.bool,\n  showXaxisLabel: PropTypes.bool,\n  showYaxisLine: PropTypes.bool,\n  showXaxisLine: PropTypes.bool,\n  showAnimation: PropTypes.bool,\n  animationClass: PropTypes.string,\n  xAxisTicksOrientation: PropTypes.string,\n};\n\nBoxPlotChart.defaultProps = boxPlotChartProps;\n\nexport default BoxPlotChart;\n","import * as d3 from \"d3\";\n\n// Takes an array of numbers and compute some summary statistics from it like quantiles, median..\n// Those summary statistics are the info needed to draw a boxplot\nexport const getSummaryStats = data => {\n  const sortedData = data.sort(function (a, b) {\n    return a - b;\n  });\n\n  const q1 = d3.quantile(sortedData, 0.25);\n  const median = d3.quantile(sortedData, 0.5);\n  const q3 = d3.quantile(sortedData, 0.75);\n\n  if (!q3 || !q1 || !median) {\n    return;\n  }\n\n  const interQuantileRange = q3 - q1;\n  const min = q1 - 1 * interQuantileRange;\n  const max = q3 + 1 * interQuantileRange;\n\n  return { min, q1, median, q3, max };\n};\n"],"sourceRoot":""}