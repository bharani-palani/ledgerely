{"version":3,"sources":["components/shared/D3/CircularBarChart.js"],"names":["CircularBarChart","props","width","height","data","marginTop","marginRight","marginBottom","marginLeft","fontSize","fillColor","fontColor","lineColor","innerRadius","padding","opacity","showTooltip","tooltipPrefix","tooltipSuffix","sortClause","showLegend","showAnimation","animationClass","outerRadius","Math","min","groups","sortBy","arguments","length","undefined","d3","_ref","_slicedToArray","value","d","name","_ref3","map","xScale","useMemo","domain","range","PI","yScale","_d3$extent","max","arcPathGenerator","allShapes","group","i","path","startAngle","endAngle","bandwidth","barAngle","turnLabelUpsideDown","labelTransform","_jsxs","className","onMouseOver","e","tooltip","style","html","concat","pageX","pageY","onMouseLeave","children","_jsx","stroke","fill","fillOpacity","strokeWidth","rx","transform","textAnchor","alignmentBaseline","defaultProps","circularBarChartProps"],"mappings":"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","file":"static/js/8.c200de90.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport { circularBarChartProps } from \"./propsData\";\nimport PropTypes from \"prop-types\";\nimport { tooltip } from \"./constants\";\n\nconst CircularBarChart = props => {\n  const {\n    width,\n    height,\n    data,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft,\n    fontSize,\n    fillColor,\n    fontColor,\n    lineColor,\n    innerRadius,\n    padding,\n    opacity,\n    showTooltip,\n    tooltipPrefix,\n    tooltipSuffix,\n    sortClause,\n    showLegend,\n    showAnimation,\n    animationClass,\n  } = props;\n\n  const sortBy = (clause = null) => {\n    switch (clause) {\n      case \"desc\":\n        return d3.groupSort(\n          data,\n          ([d]) => -d.value,\n          d => d.name,\n        );\n      case \"asc\":\n        return d3.groupSort(\n          data,\n          ([d]) => d.value,\n          d => d.name,\n        );\n      default:\n        return data.map(d => d.name);\n    }\n  };\n\n  const outerRadius =\n    Math.min(\n      width - marginLeft - marginRight,\n      height - marginTop - marginBottom,\n    ) / 2;\n\n  const groups = sortBy(sortClause);\n  const xScale = useMemo(() => {\n    return d3\n      .scaleBand()\n      .domain(groups)\n      .range([0, 2 * Math.PI])\n      .padding(padding);\n  }, [data, height, width, padding, groups]);\n\n  const yScale = useMemo(() => {\n    const [, max] = d3.extent(data.map(d => d.value));\n    return d3\n      .scaleRadial()\n      .domain([0, max || 10])\n      .range([innerRadius, outerRadius]);\n  }, [data, width, height, innerRadius, outerRadius]);\n\n  // Build the shapes\n  const arcPathGenerator = d3.arc();\n  const allShapes = data.map((group, i) => {\n    const path = arcPathGenerator({\n      innerRadius: innerRadius,\n      outerRadius: yScale(group.value),\n      startAngle: xScale(group.name),\n      endAngle: xScale(group.name) + xScale.bandwidth(),\n    });\n\n    const barAngle = xScale(group.name) + xScale.bandwidth() / 2; // (in Radian)\n    const turnLabelUpsideDown = (barAngle + Math.PI) % (2 * Math.PI) < Math.PI;\n    const labelRotation = (barAngle * 180) / Math.PI - 90; // (convert radian to degree)\n    const labelXTranslation = yScale(group.value) + 5;\n    const labelTransform =\n      \"rotate(\" +\n      labelRotation +\n      \")\" +\n      \",translate(\" +\n      labelXTranslation +\n      \",0)\";\n\n    return (\n      <g\n        key={i}\n        className={showAnimation ? animationClass : \"\"}\n        onMouseOver={e => {\n          if (showTooltip) {\n            tooltip.style(\"padding\", \"5px\");\n            tooltip.style(\"opacity\", 0.9);\n            tooltip\n              .html(\n                `${tooltipPrefix} ${group.name} â†’ ${group.value} ${tooltipSuffix}`,\n              )\n              .style(\"left\", e.pageX + 5 + \"px\")\n              .style(\"top\", e.pageY - 30 + \"px\");\n          }\n        }}\n        onMouseLeave={() => {\n          tooltip.style(\"padding\", 0);\n          tooltip.style(\"opacity\", 0);\n        }}\n      >\n        <path\n          d={path}\n          opacity={opacity}\n          stroke={lineColor}\n          fill={fillColor}\n          fillOpacity={opacity}\n          strokeWidth={1}\n          rx={1}\n        />\n        {showLegend && (\n          <g transform={labelTransform}>\n            <text\n              textAnchor={turnLabelUpsideDown ? \"end\" : \"start\"}\n              alignmentBaseline='middle'\n              fontSize={fontSize}\n              transform={turnLabelUpsideDown ? \"rotate(180)\" : \"rotate(0)\"}\n              fill={fontColor}\n            >\n              {group.name}\n            </text>\n          </g>\n        )}\n      </g>\n    );\n  });\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        <g transform={\"translate(\" + width / 2 + \",\" + height / 2 + \")\"}>\n          {allShapes}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nCircularBarChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  data: PropTypes.array,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  fontSize: PropTypes.number,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  innerRadius: PropTypes.number,\n  padding: PropTypes.number,\n  opacity: PropTypes.number,\n  showTooltip: PropTypes.bool,\n  tooltipPrefix: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  sortClause: PropTypes.string,\n  showLegend: PropTypes.bool,\n  showAnimation: PropTypes.bool,\n  onClick: PropTypes.func,\n  padding: PropTypes.number,\n  animationClass: PropTypes.string,\n};\n\nCircularBarChart.defaultProps = circularBarChartProps;\n\nexport default CircularBarChart;\n"],"sourceRoot":""}