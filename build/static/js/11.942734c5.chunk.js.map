{"version":3,"sources":["components/shared/D3/StackedVerticalBarChart.js"],"names":["StackedVerticalBarChart","props","svgRef","useRef","width","height","marginTop","marginRight","marginBottom","marginLeft","fillColor","padding","style","showTooltip","data","showYaxis","showYaxisLine","showYaxisLabel","showXaxis","showXaxisLabel","showXaxisLine","sortClause","showAnimation","animationDuration","onClick","fontSize","yTicks","useEffect","series","d3","keys","map","d","where","value","_ref","key","_slicedToArray","get","label","order","arguments","length","undefined","D","_toConsumableArray","Set","sortBy","x","domain","range","y","rangeRound","color","interpolate","svg","current","attr","append","selectAll","join","i","on","e","tooltip","html","concat","isNaN","formatValue","pageX","pageY","transition","duration","bandwidth","call","tickSizeOuter","g","remove","ticks","_jsx","ref","defaultProps","stackedVerticalBarChartProps"],"mappings":"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","file":"static/js/11.942734c5.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { tooltip } from \"./constants\";\nimport PropTypes from \"prop-types\";\nimport { stackedVerticalBarChartProps } from \"./propsData\";\n\nconst StackedVerticalBarChart = props => {\n  const svgRef = useRef(null);\n  const {\n    width,\n    height,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft,\n    fillColor,\n    padding,\n    style,\n    showTooltip,\n    data,\n    showYaxis,\n    showYaxisLine,\n    showYaxisLabel,\n    showXaxis,\n    showXaxisLabel,\n    showXaxisLine,\n    sortClause,\n    showAnimation,\n    animationDuration,\n    onClick,\n    fontSize,\n    yTicks,\n  } = props;\n\n  const sortBy = (clause = null) => {\n    switch (clause) {\n      case \"desc\":\n        return d3.groupSort(\n          data,\n          D => -d3.sum(D, d => d.value),\n          d => d.label,\n        );\n      case \"asc\":\n        return d3.groupSort(\n          data,\n          D => d3.sum(D, d => d.value),\n          d => d.label,\n        );\n      default:\n        return [...new Set(data.map(d => d.label))];\n    }\n  };\n\n  useEffect(() => {\n    // Determine the series that need to be stacked.\n    const series = d3\n      .stack()\n      .keys(d3.union(data.map(d => d.where))) // distinct series keys, in input order\n      .value(([, D], key) => D.get(key).value)(\n      // get value for each series key and stack\n      d3.index(\n        data,\n        d => d.label,\n        d => d.where,\n      ),\n    ); // group by stack then series key\n\n    // Prepare the scales for positional and color encodings.\n    const order = sortBy(sortClause);\n    const x = d3\n      .scaleBand()\n      .domain(order)\n      .range([marginLeft, width - marginRight])\n      .padding(padding);\n\n    const y = d3\n      .scaleLinear()\n      .domain([\n        0,\n        d3.max(series, d => {\n          return d3.max(d, d => d[1]);\n        }),\n      ])\n      .rangeRound([height - marginBottom, marginTop]);\n\n    const color = d3\n      .scaleLinear()\n      .domain([0, series.map(d => d.key).length])\n      .range(fillColor)\n      .interpolate(d3.interpolateHcl);\n\n    // const color = () => fillColor;\n\n    // A function to format the value in the tooltip.\n    const formatValue = x => (isNaN(x) ? \"N/A\" : x);\n\n    // Create the SVG container.\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height + 30)\n      .attr(\"viewBox\", [0, 0, width, height]);\n\n    // Append a group for each series, and a rect for each element in the series.\n    svg\n      .append(\"g\")\n      .selectAll()\n      .data(series)\n      .join(\"g\")\n      .attr(\"fill\", (d, i) => {\n        return color(i);\n      })\n      .selectAll(\"rect\")\n      .data(D => D.map(d => ((d.key = D.key), d)))\n      .join(\"rect\")\n      .on(\"click\", (d, i) => {\n        onClick(d, i);\n      })\n      .on(\"mousemove\", (e, d) => {\n        if (showTooltip) {\n          tooltip.style(\"padding\", \"5px\");\n          tooltip.style(\"opacity\", 1);\n          tooltip\n            .html(() => {\n              return `${d.data[0]} <br /> ${d.key} <br /> ${formatValue(\n                d.data[1].get(d.key).value,\n              )}`;\n            })\n            .style(\"left\", e.pageX + 10 + \"px\")\n            .style(\"top\", e.pageY - 30 + \"px\");\n        }\n      })\n      .on(\"mouseout\", d => {\n        tooltip.style(\"padding\", 0);\n        tooltip.style(\"opacity\", 0);\n      })\n      .transition()\n      .duration((d, i) => (showAnimation ? animationDuration + i * 50 : i))\n      .attr(\"x\", d => x(d.data[0]))\n      .attr(\"y\", d => y(d[1]))\n      .attr(\"height\", d => y(d[0]) - y(d[1]))\n      .attr(\"width\", x.bandwidth());\n\n    // Append the horizontal axis.\n    if (showXaxis) {\n      svg\n        .append(\"g\")\n        .attr(\"transform\", `translate(0,${height - marginBottom})`)\n        .call(showXaxisLabel ? d3.axisBottom(x).tickSizeOuter(0) : () => {})\n        .call(g => (showXaxisLine ? g : g.selectAll(\".domain\").remove()))\n        .selectAll(\"text\")\n        .attr(\"font-size\", fontSize);\n    }\n\n    // Append the vertical axis.\n    if (showYaxis) {\n      svg\n        .append(\"g\")\n        .attr(\"transform\", `translate(${marginLeft},0)`)\n        .call(showYaxisLabel ? d3.axisLeft(y).ticks(yTicks) : () => {})\n        .call(g => (showYaxisLine ? g : g.selectAll(\".domain\").remove()))\n        .selectAll(\"text\")\n        .attr(\"font-size\", fontSize);\n    }\n  }, []);\n  return <svg style={style} ref={svgRef} />;\n};\n\nStackedVerticalBarChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  showTooltip: PropTypes.bool,\n  style: PropTypes.object,\n  padding: PropTypes.number,\n  data: PropTypes.array,\n  yTicks: PropTypes.number,\n  showAnimation: PropTypes.bool,\n  animationDuration: PropTypes.number,\n  sortClause: PropTypes.string,\n  fillColor: PropTypes.array,\n  showYaxis: PropTypes.bool,\n  showXaxis: PropTypes.bool,\n  showXaxisLabel: PropTypes.bool,\n  showXaxisLine: PropTypes.bool,\n  showYaxisLine: PropTypes.bool,\n  showYaxisLabel: PropTypes.bool,\n  onClick: PropTypes.func,\n  fontSize: PropTypes.number,\n};\nStackedVerticalBarChart.defaultProps = stackedVerticalBarChartProps;\n\nexport default StackedVerticalBarChart;\n"],"sourceRoot":""}