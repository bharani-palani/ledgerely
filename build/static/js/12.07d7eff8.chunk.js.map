{"version":3,"sources":["components/shared/D3/PieChart.js","components/shared/D3/constants.js"],"names":["PieChart","props","svgRef","useRef","width","height","tooltipPrefix","tooltipSuffix","fillColor","showTooltip","data","style","fontSize","showXaxisLabel","showYaxisLabel","sortClause","onClick","lineColor","useEffect","orderByData","arguments","length","undefined","sort","a","b","value","sortBy","pie","d3","d","arc","innerRadius","outerRadius","Math","min","labelRadius","arcLabel","arcs","svg","current","attr","append","selectAll","join","on","i","label","e","tooltip","html","concat","toLocaleString","pageX","pageY","centroid","call","text","filter","endAngle","startAngle","JSON","stringify","_jsx","ref","defaultProps","appThemeBgColor","appThemeColor"],"mappings":"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","file":"static/js/12.07d7eff8.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { appThemeBgColor, tooltip } from \"./constants\";\nimport PropTypes from \"prop-types\";\n\nconst PieChart = props => {\n  const svgRef = useRef(null);\n  const {\n    width,\n    height,\n    tooltipPrefix,\n    tooltipSuffix,\n    fillColor,\n    showTooltip,\n    data,\n    style,\n    fontSize,\n    showXaxisLabel,\n    showYaxisLabel,\n    sortClause,\n    onClick,\n    lineColor,\n  } = props;\n\n  const sortBy = (clause = null) => {\n    switch (clause) {\n      case \"desc\":\n        return data.sort((a, b) => b.value - a.value);\n      case \"asc\":\n        return data.sort((a, b) => a.value - b.value);\n      default:\n        return data;\n    }\n  };\n\n  useEffect(() => {\n    const orderByData = sortBy(sortClause);\n\n    // Create the color scale.\n    // const color = d3\n    //   .scaleOrdinal()\n    //   .domain(data.map(d => d.label))\n    //   .range(\n    //     d3\n    //       .quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), data.length)\n    //       .reverse(),\n    //   );\n    const color = () => fillColor;\n\n    // Create the pie layout and arc generator.\n    const pie = d3\n      .pie()\n      .sort(null)\n      .value(d => d.value);\n\n    const arc = d3\n      .arc()\n      .innerRadius(0)\n      .outerRadius(Math.min(width, height) / 2 - 1);\n\n    const labelRadius = arc.outerRadius()() * 0.8;\n\n    // A separate arc generator for labels.\n    const arcLabel = d3.arc().innerRadius(labelRadius).outerRadius(labelRadius);\n\n    const arcs = pie(orderByData);\n\n    // Create the SVG container.\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      .attr(\"style\", style);\n\n    // Add a sector path for each value.\n    svg\n      .append(\"g\")\n      .attr(\"stroke\", lineColor)\n      .selectAll()\n      .data(arcs)\n      .join(\"path\")\n      .on(\"click\", (d, i) => {\n        onClick(d, i);\n      })\n      .attr(\"fill\", d => color(d.data.label))\n      .attr(\"d\", arc)\n      .on(\"mousemove\", (e, d) => {\n        if (showTooltip) {\n          tooltip.style(\"opacity\", 1);\n          tooltip\n            .html(\n              `${tooltipPrefix} ${d.data.label}: ${d.data.value.toLocaleString(\n                \"en-US\",\n              )} ${tooltipSuffix}`,\n            )\n            .style(\"left\", e.pageX + 5 + \"px\")\n            .style(\"top\", e.pageY - 30 + \"px\");\n        }\n      })\n      .on(\"mouseout\", d => {\n        tooltip.style(\"opacity\", 0);\n      });\n\n    // Create a new arc generator to place a label close to the edge.\n    // The label shows the value if there is enough room.\n    svg\n      .append(\"g\")\n      .attr(\"text-anchor\", \"middle\")\n      .selectAll()\n      .data(arcs)\n      .join(\"text\")\n      .attr(\"transform\", d => `translate(${arcLabel.centroid(d)})`)\n      .call(text =>\n        text\n          .append(\"tspan\")\n          .attr(\"y\", \"-0.4em\")\n          .attr(\"font-weight\", \"bold\")\n          .text(d => (showXaxisLabel ? d.data.label : \"\"))\n          .attr(\"font-size\", fontSize),\n      )\n      .call(text =>\n        text\n          .filter(d => d.endAngle - d.startAngle > 0.25)\n          .append(\"tspan\")\n          .attr(\"x\", 0)\n          .attr(\"y\", \"0.7em\")\n          .attr(\"fill-opacity\", 0.7)\n          .text(d =>\n            showYaxisLabel ? d.data.value.toLocaleString(\"en-US\") : \"\",\n          )\n          .attr(\"font-size\", fontSize),\n      );\n  }, [JSON.stringify(props)]);\n\n  return <svg ref={svgRef}></svg>;\n};\n\nPieChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  tooltipPrefix: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  showTooltip: PropTypes.bool,\n  fillColor: PropTypes.string,\n  data: PropTypes.array,\n  style: PropTypes.string,\n  fontSize: PropTypes.number,\n  showXaxisLabel: PropTypes.bool,\n  showYaxisLabel: PropTypes.bool,\n  sortClause: PropTypes.string,\n  onClick: PropTypes.func,\n  lineColor: PropTypes.string, // new\n};\nPieChart.defaultProps = {\n  width: 250,\n  height: 250,\n  tooltipPrefix: \"\",\n  tooltipSuffix: \"\",\n  showTooltip: true,\n  fillColor: appThemeBgColor,\n  data: [\n    { label: \"<5\", value: 45000 },\n    { label: \"5-9\", value: 30000 },\n    { label: \"10-14\", value: 40000 },\n    { label: \"15-19\", value: 50000 },\n    { label: \"20-24\", value: 60000 },\n    { label: \"25-29\", value: 70000 },\n    { label: \"30-34\", value: 80000 },\n  ],\n  style: \"max-width: 100%; height: auto;\",\n  fontSize: 12,\n  showXaxisLabel: true,\n  showYaxisLabel: true,\n  sortClause: \"\",\n  onClick: () => {},\n  lineColor: \"#555\",\n};\n\nexport default PieChart;\n","import * as d3 from \"d3\";\n\nconst appThemeBgColor = \"#c2d82e\";\nconst appThemeColor = \"#000000\";\nconst successColor = \"#198754\";\nconst dangerColor = \"#dc3545\";\nconst warningColor = \"#ffc107\";\nconst infoColor = \"#0dcaf0\";\nconst tooltip = d3\n  .select(\"body\")\n  .append(\"div\")\n  .attr(\"class\", \"tooltip\")\n  .attr(\"role\", \"tooltip\")\n  .style(\"position\", \"absolute\")\n  .style(\"background\", \"#222222\")\n  .style(\"padding\", \"5px\")\n  .style(\"border-radius\", \"5px\")\n  .style(\"color\", \"#ffffff\");\n\nexport {\n  tooltip,\n  appThemeBgColor,\n  appThemeColor,\n  successColor,\n  dangerColor,\n  warningColor,\n  infoColor,\n};\n"],"sourceRoot":""}