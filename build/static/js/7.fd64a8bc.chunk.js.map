{"version":3,"sources":["components/shared/D3/DonutChart.js"],"names":["DonutChart","props","svgRef","useRef","width","height","outerRadius","innerRadius","data","fillColor","style","fontSize","showTooltip","tooltipPrefix","tooltipSuffix","onClick","fontColor","showAnimation","animationDuration","showLegend","showXaxisLabel","xAxisLabel","useEffect","valueLabels","nameLabels","textOffset","pieData","oldPieData","filteredPieData","donut","d3","value","d","color","domain","length","range","interpolate","arc","startAngle","endAngle","vis","current","attr","selectAll","remove","arcGroup","append","labelGroup","centerGroup","pieTween","i","s0","e0","ii","t","b","removePieTween","Math","PI","textTween","a","fn","val","cos","sin","html","sliceProportion","filter","element","index","array","name","label","paths","enter","on","e","tooltip","concat","toLocaleString","minimumFractionDigits","maximumFractionDigits","toFixed","pageX","pageY","transition","duration","attrTween","exit","lines","text","update","JSON","stringify","_jsx","ref","defaultProps","donutChartProps"],"mappings":"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","file":"static/js/7.fd64a8bc.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { tooltip } from \"./constants\";\nimport * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\nimport { donutChartProps } from \"./propsData\";\n\nconst DonutChart = props => {\n  const svgRef = useRef(null);\n  const {\n    width,\n    height,\n    outerRadius,\n    innerRadius,\n    data,\n    fillColor,\n    style,\n    fontSize,\n    showTooltip,\n    tooltipPrefix,\n    tooltipSuffix,\n    onClick,\n    fontColor,\n    showAnimation,\n    animationDuration,\n    showLegend,\n    showXaxisLabel,\n    xAxisLabel,\n  } = props;\n  useEffect(() => {\n    const textOffset = 24;\n\n    // OBJECTS TO BE POPULATED WITH DATA LATER\n    let valueLabels;\n    let nameLabels;\n    let pieData = [];\n    let oldPieData = [];\n    let filteredPieData = [];\n\n    // D3 helper function to populate pie slice parameters from array data\n    const donut = d3.pie().value(function (d) {\n      return d.value;\n    });\n\n    // D3 helper function to create colors from an ordinal scale\n    // const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n    const color = d3\n      .scaleLinear()\n      .domain([0, data.length])\n      .range(fillColor)\n      .interpolate(d3.interpolateHcl);\n\n    // D3 helper function to draw arcs, populates parameter \"d\" in path object\n    const arc = d3\n      .arc()\n      .startAngle(function (d) {\n        return d.startAngle;\n      })\n      .endAngle(function (d) {\n        return d.endAngle;\n      })\n      .innerRadius(innerRadius)\n      .outerRadius(outerRadius);\n\n    const vis = d3\n      .select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    // GROUP FOR ARCS/PATHS\n    vis.selectAll(`g`).remove();\n\n    const arcGroup = vis\n      .append(\"svg:g\")\n      .attr(\"class\", \"arc\")\n      .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n    // GROUP FOR LABELS\n    const labelGroup = vis\n      .append(\"svg:g\")\n      .attr(\"class\", \"labelGroup\")\n      .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n    // GROUP FOR CENTER TEXT\n    const centerGroup = vis\n      .append(\"svg:g\")\n      .attr(\"class\", \"centerGroup\")\n      .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n    // // PLACEHOLDER GRAY CIRCLE\n    if (showXaxisLabel) {\n      centerGroup\n        .append(\"text\")\n        .html(xAxisLabel)\n        .attr(\"fill\", fontColor)\n        .attr(\"font-size\", fontSize)\n        .attr(\"text-anchor\", \"middle\");\n    }\n\n    // to run each time data is generated\n    function update(data) {\n      oldPieData = filteredPieData;\n      pieData = donut(data);\n\n      let sliceProportion = 0; // size of this slice\n      filteredPieData = pieData.filter(filterData);\n\n      function filterData(element, index, array) {\n        element.name = data[index].label;\n        element.value = data[index].value;\n        sliceProportion += element.value;\n        return element.value > 0;\n      }\n\n      // DRAW ARC PATHS\n      const paths = arcGroup.selectAll(\"path\").data(filteredPieData);\n      paths\n        .enter()\n        .append(\"svg:path\")\n        .on(\"click\", (d, i) => {\n          onClick(d, i);\n        })\n        .on(\"mousemove\", (e, d) => {\n          if (showTooltip) {\n            tooltip.style(\"padding\", \"5px\");\n            tooltip.style(\"opacity\", 1);\n            tooltip\n              .html(\n                `<div>${tooltipPrefix} ${\n                  d.name\n                }</div><div>${d.value.toLocaleString(\"en-US\", {\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })}</div><div>${((d.value / sliceProportion) * 100).toFixed(\n                  2,\n                )}%</div><div>${tooltipSuffix}</div>`,\n              )\n              .style(\"left\", e.pageX + 15 + \"px\")\n              .style(\"top\", e.pageY - 30 + \"px\");\n          }\n        })\n        .on(\"mouseout\", d => {\n          tooltip.style(\"padding\", 0);\n          tooltip.style(\"opacity\", 0);\n        })\n        .attr(\"fill\", function (d, i) {\n          return color(i);\n        });\n\n      paths\n        .enter()\n        .selectAll(\"path\")\n        .transition()\n        .duration(animationDuration)\n        .attrTween(\n          \"d\",\n          showAnimation\n            ? pieTween\n            : d => {\n                const ii = d3.interpolate(\n                  { startAngle: d.startAngle, endAngle: d.endAngle },\n                  { startAngle: d.startAngle, endAngle: d.endAngle },\n                );\n                return function (t) {\n                  const b = ii(t);\n                  return arc(b);\n                };\n              },\n        );\n\n      paths\n        .exit()\n        .transition()\n        .duration(animationDuration)\n        .attrTween(\"d\", removePieTween)\n        .remove();\n\n      if (showLegend) {\n        // DRAW TICK MARK LINES FOR LABELS\n        const lines = labelGroup.selectAll(\"line\").data(filteredPieData);\n        lines\n          .enter()\n          .append(\"svg:line\")\n          .attr(\"x1\", 0)\n          .attr(\"x2\", 0)\n          .attr(\"y1\", -outerRadius - 3)\n          .attr(\"y2\", -outerRadius - 15)\n          .attr(\"stroke\", \"gray\")\n          .attr(\"transform\", function (d) {\n            return (\n              \"rotate(\" +\n              ((d.startAngle + d.endAngle) / 2) * (180 / Math.PI) +\n              \")\"\n            );\n          });\n        lines\n          .transition()\n          .duration(animationDuration)\n          .attr(\"transform\", function (d) {\n            return (\n              \"rotate(\" +\n              ((d.startAngle + d.endAngle) / 2) * (180 / Math.PI) +\n              \")\"\n            );\n          });\n        lines.exit().remove();\n\n        // DRAW LABELS WITH PERCENTAGE VALUES\n        valueLabels = labelGroup\n          .selectAll(\"text.value\")\n          .data(filteredPieData)\n          .attr(\"dy\", function (d) {\n            if (\n              (d.startAngle + d.endAngle) / 2 > Math.PI / 2 &&\n              (d.startAngle + d.endAngle) / 2 < Math.PI * 1.5\n            ) {\n              return 5;\n            } else {\n              return -7;\n            }\n          })\n          .attr(\"text-anchor\", function (d) {\n            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n              return \"beginning\";\n            } else {\n              return \"end\";\n            }\n          })\n          .text(function (d) {\n            const percentage = (d.value / sliceProportion) * 100;\n            return percentage.toFixed(1) + \"%\";\n          });\n\n        valueLabels\n          .enter()\n          .append(\"svg:text\")\n          .attr(\"class\", \"value\")\n          .attr(\"fill\", \"currentColor\")\n          .attr(\"font-size\", fontSize)\n          .attr(\"transform\", function (d) {\n            return (\n              \"translate(\" +\n              Math.cos((d.startAngle + d.endAngle - Math.PI) / 2) *\n                (outerRadius + textOffset) +\n              \",\" +\n              Math.sin((d.startAngle + d.endAngle - Math.PI) / 2) *\n                (outerRadius + textOffset) +\n              \")\"\n            );\n          })\n          .attr(\"dy\", function (d) {\n            if (\n              (d.startAngle + d.endAngle) / 2 > Math.PI / 2 &&\n              (d.startAngle + d.endAngle) / 2 < Math.PI * 1.5\n            ) {\n              return 5;\n            } else {\n              return -7;\n            }\n          })\n          .attr(\"text-anchor\", function (d) {\n            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n              return \"beginning\";\n            } else {\n              return \"end\";\n            }\n          })\n          .attr(\"fill\", fontColor)\n          .text(function (d) {\n            const percentage = (d.value / sliceProportion) * 100;\n            return percentage.toFixed(2) + \"%\";\n          });\n\n        valueLabels\n          .transition()\n          .duration(animationDuration)\n          .attrTween(\"transform\", textTween);\n\n        valueLabels.exit().remove();\n\n        // DRAW LABELS WITH ENTITY NAMES\n        nameLabels = labelGroup\n          .selectAll(\"text.units\")\n          .data(filteredPieData)\n          .attr(\"dy\", function (d) {\n            if (\n              (d.startAngle + d.endAngle) / 2 > Math.PI / 2 &&\n              (d.startAngle + d.endAngle) / 2 < Math.PI * 1.5\n            ) {\n              return 17;\n            } else {\n              return 5;\n            }\n          })\n          .attr(\"text-anchor\", function (d) {\n            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n              return \"beginning\";\n            } else {\n              return \"end\";\n            }\n          })\n          .text(function (d) {\n            return d.name;\n          });\n\n        nameLabels\n          .enter()\n          .append(\"svg:text\")\n          .attr(\"class\", \"units\")\n          .attr(\"font-size\", fontSize)\n          .attr(\"transform\", function (d) {\n            return (\n              \"translate(\" +\n              Math.cos((d.startAngle + d.endAngle - Math.PI) / 2) *\n                (outerRadius + textOffset) +\n              \",\" +\n              Math.sin((d.startAngle + d.endAngle - Math.PI) / 2) *\n                (outerRadius + textOffset) +\n              \")\"\n            );\n          })\n          .attr(\"dy\", function (d) {\n            if (\n              (d.startAngle + d.endAngle) / 2 > Math.PI / 2 &&\n              (d.startAngle + d.endAngle) / 2 < Math.PI * 1.5\n            ) {\n              return 25;\n            } else {\n              return 10;\n            }\n          })\n          .attr(\"text-anchor\", function (d) {\n            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n              return \"beginning\";\n            } else {\n              return \"end\";\n            }\n          })\n          .attr(\"fill\", fontColor)\n          .text(function (d) {\n            return d.name;\n          });\n\n        nameLabels\n          .transition()\n          .duration(animationDuration)\n          .attrTween(\"transform\", textTween);\n\n        nameLabels.exit().remove();\n      }\n    }\n\n    // Interpolate the arcs in data space.\n    function pieTween(d, i) {\n      let s0;\n      let e0;\n      if (oldPieData[i]) {\n        s0 = oldPieData[i].startAngle;\n        e0 = oldPieData[i].endAngle;\n      } else if (!oldPieData[i] && oldPieData[i - 1]) {\n        s0 = oldPieData[i - 1].endAngle;\n        e0 = oldPieData[i - 1].endAngle;\n      } else if (!oldPieData[i - 1] && oldPieData.length > 0) {\n        s0 = oldPieData[oldPieData.length - 1].endAngle;\n        e0 = oldPieData[oldPieData.length - 1].endAngle;\n      } else {\n        s0 = 0;\n        e0 = 0;\n      }\n      const ii = d3.interpolate(\n        { startAngle: s0, endAngle: e0 },\n        { startAngle: d.startAngle, endAngle: d.endAngle },\n      );\n      return function (t) {\n        const b = ii(t);\n        return arc(b);\n      };\n    }\n\n    function removePieTween(d, i) {\n      s0 = 2 * Math.PI;\n      e0 = 2 * Math.PI;\n      const ii = d3.interpolate(\n        { startAngle: d.startAngle, endAngle: d.endAngle },\n        { startAngle: s0, endAngle: e0 },\n      );\n      return function (t) {\n        const b = ii(t);\n        return arc(b);\n      };\n    }\n\n    function textTween(d, i) {\n      let a;\n      if (oldPieData[i]) {\n        a = (oldPieData[i].startAngle + oldPieData[i].endAngle - Math.PI) / 2;\n      } else if (!oldPieData[i] && oldPieData[i - 1]) {\n        a =\n          (oldPieData[i - 1].startAngle +\n            oldPieData[i - 1].endAngle -\n            Math.PI) /\n          2;\n      } else if (!oldPieData[i - 1] && oldPieData.length > 0) {\n        a =\n          (oldPieData[oldPieData.length - 1].startAngle +\n            oldPieData[oldPieData.length - 1].endAngle -\n            Math.PI) /\n          2;\n      } else {\n        a = 0;\n      }\n      const b = (d.startAngle + d.endAngle - Math.PI) / 2;\n\n      const fn = d3.interpolateNumber(a, b);\n      return function (t) {\n        const val = fn(t);\n        return (\n          \"translate(\" +\n          Math.cos(val) * (outerRadius + textOffset) +\n          \",\" +\n          Math.sin(val) * (outerRadius + textOffset) +\n          \")\"\n        );\n      };\n    }\n\n    update(data);\n  }, [JSON.stringify(props)]);\n\n  return <svg style={style} ref={svgRef}></svg>;\n};\n\nDonutChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  outerRadius: PropTypes.number,\n  innerRadius: PropTypes.number,\n  data: PropTypes.array,\n  style: PropTypes.object,\n  fontSize: PropTypes.number,\n  showTooltip: PropTypes.bool,\n  tooltipPrefix: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  onClick: PropTypes.func,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  showAnimation: PropTypes.bool,\n  animationDuration: PropTypes.number,\n  showLegend: PropTypes.bool,\n  showXaxisLabel: PropTypes.bool,\n  xAxisLabel: PropTypes.string,\n};\n\nDonutChart.defaultProps = donutChartProps;\n\nexport default DonutChart;\n"],"sourceRoot":""}