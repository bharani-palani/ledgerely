{"version":3,"sources":["components/shared/D3/PannableChart.js"],"names":["PannableChart","props","svgRef","useRef","width","height","marginTop","marginRight","marginBottom","marginLeft","fillColor","fontColor","lineColor","yAxisLabel","style","data","showYaxisLine","showXaxis","showYaxis","showYaxisLabel","yTicks","showAnimation","animationClass","useEffect","length","parent","d3","current","totalWidth","x","domain","d","Date","label","range","y","value","nice","area","curve","y0","y1","selectAll","remove","append","attr","concat","call","ticks","g","select","clone","text","svg","every","tickSizeOuter","datum","JSON","stringify","_jsx","ref","defaultProps","pannableChartProps"],"mappings":"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","file":"static/js/14.dbe75d8c.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\nimport { pannableChartProps } from \"./propsData\";\n\nconst PannableChart = props => {\n  const svgRef = useRef(null);\n  const {\n    width,\n    height,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft,\n    fillColor,\n    fontColor,\n    lineColor,\n    yAxisLabel,\n    style,\n    data,\n    showYaxisLine,\n    showXaxis,\n    showYaxis,\n    showYaxisLabel,\n    yTicks,\n    showAnimation,\n    animationClass,\n  } = props;\n\n  useEffect(() => {\n    if (data.length > 0) {\n      const parent = d3.select(svgRef.current);\n      const totalWidth = width;\n      // Create the horizontal (x) scale over the total width.\n      const x = d3\n        .scaleUtc()\n        .domain(d3.extent(data, d => new Date(d.label)))\n        .range([marginLeft, totalWidth - marginRight]);\n      // Create the vertical (x) scale.\n      const y = d3\n        .scaleLinear()\n        .domain([0, d3.max(data, d => d.value)])\n        .nice(6)\n        .range([height - marginBottom, marginTop]);\n\n      // Define an area shape generator.\n      const area = d3\n        .area()\n        .curve(d3.curveStep)\n        .x(d => x(new Date(d.label)))\n        .y0(y(0))\n        .y1(d => y(d.value));\n      parent.selectAll(`svg`).remove();\n      parent.selectAll(`div`).remove();\n\n      parent\n        .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .style(\"position\", \"absolute\")\n        .style(\"pointer-events\", \"none\")\n        .append(\"g\")\n        .attr(\"transform\", `translate(${marginLeft},0)`)\n        .attr(\"stroke\", fontColor)\n        .call(showYaxis ? d3.axisLeft(y).ticks(yTicks) : () => {})\n        .call(g => g.selectAll(\".tick line\").attr(\"stroke\", lineColor))\n        .call(g =>\n          !showYaxisLine\n            ? g.select(\".domain\").remove()\n            : g.select(\".domain\").attr(\"stroke\", lineColor),\n        )\n        .call(g =>\n          showYaxisLabel\n            ? g\n                .select(\".tick:last-of-type text\")\n                .clone()\n                .attr(\"x\", 3)\n                .attr(\"text-anchor\", \"start\")\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"fill\", fontColor)\n                .text(yAxisLabel)\n            : g,\n        );\n\n      // Create the svg with the vertical axis.\n      const svg = parent\n        .append(\"svg\")\n        .attr(\"width\", totalWidth)\n        .attr(\"height\", height)\n        .style(\"display\", \"block\");\n\n      if (showXaxis) {\n        svg\n          .append(\"g\")\n          .attr(\"transform\", `translate(0,${height - marginBottom})`)\n          .call(\n            d3\n              .axisBottom(x)\n              .ticks(d3.utcMonth.every(data.length / width))\n              .tickSizeOuter(0),\n          )\n          .call(g =>\n            g\n              .selectAll(\".tick line\")\n              .attr(\"stroke\", lineColor)\n              .attr(\"class\", showAnimation ? animationClass : \"\"),\n          )\n          .call(g =>\n            g\n              .selectAll(\".tick text\")\n              .attr(\"stroke\", fontColor)\n              .attr(\"class\", showAnimation ? animationClass : \"\"),\n          );\n      }\n      svg\n        .append(\"path\")\n        .attr(\"class\", `path ${showAnimation ? animationClass : \"\"}`)\n        .datum(data)\n        .attr(\"fill\", fillColor)\n        .attr(\"d\", area);\n\n      svg.select(\".domain\").attr(\"stroke\", lineColor);\n    }\n  }, [JSON.stringify(props)]);\n\n  return <div style={style} ref={svgRef} />;\n};\n\nPannableChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  yAxisLabel: PropTypes.string,\n  style: PropTypes.object,\n  data: PropTypes.array,\n  showYaxisLine: PropTypes.bool,\n  showXaxis: PropTypes.bool,\n  showYaxis: PropTypes.bool,\n  showYaxisLabel: PropTypes.bool,\n  yTicks: PropTypes.number,\n  showAnimation: PropTypes.bool,\n  animationClass: PropTypes.string,\n};\nPannableChart.defaultProps = pannableChartProps;\n\nexport default PannableChart;\n"],"sourceRoot":""}