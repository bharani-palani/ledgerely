{"version":3,"file":"static/js/9156.5bd73fea.chunk.js","mappings":"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","sources":["components/shared/D3/DensityChart/AxisBottom.js","components/shared/D3/DensityChart/index.js"],"sourcesContent":["import * as d3 from \"d3\";\nimport React, { useMemo } from \"react\";\nconst TICK_LENGTH = 6;\n\nconst AxisBottom = ({ xScale, pixelsPerTick, fontColor, lineColor }) => {\n  const range = xScale.range();\n\n  const ticks = useMemo(() => {\n    const width = range[1] - range[0];\n    const numberOfTicksTarget = Math.floor(width / pixelsPerTick);\n\n    return xScale.ticks(numberOfTicksTarget).map(value => ({\n      value: d3.format(\".3s\")(value),\n      xOffset: xScale(value),\n    }));\n  }, [xScale]);\n\n  return (\n    <>\n      <path\n        d={[\"M\", range[0], 0, \"L\", range[1], 0].join(\" \")}\n        fill='none'\n        stroke={lineColor}\n      />\n      {ticks.map(({ value, xOffset }) => (\n        <g key={value} transform={`translate(${xOffset}, 0)`}>\n          <line y2={TICK_LENGTH} stroke={lineColor} />\n          <text\n            key={value}\n            fill={fontColor}\n            style={{\n              fontSize: \"10px\",\n              textAnchor: \"middle\",\n              transform: \"translateY(20px)\",\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n\nexport default AxisBottom;\n","import React, { useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport AxisBottom from \"./AxisBottom\";\nimport { DensityChartData } from \"../mockData\";\nimport PropTypes from \"prop-types\";\n\nfunction kernelDensityEstimator(kernel, X) {\n  return function (V) {\n    return X.map(x => [x, d3.mean(V, v => kernel(x - v))]);\n  };\n}\n\nfunction kernelEpanechnikov(k) {\n  return function (v) {\n    return Math.abs((v /= k)) <= 1 ? (0.75 * (1 - v * v)) / k : 0;\n  };\n}\n\nconst DensityChart = ({\n  width,\n  height,\n  data,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  fillColor,\n  fontColor,\n  lineColor,\n  showXaxisLabel,\n  fontSize,\n  xAxisLabel,\n  showXaxis,\n  animationClass,\n  showAnimation,\n}) => {\n  const boundsWidth = width - marginRight - marginLeft;\n  const boundsHeight = height - marginTop - marginBottom;\n\n  const xScale = useMemo(() => {\n    const max = Math.max(...data.map(v => v.x));\n    return d3\n      .scaleLinear()\n      .domain([0, max])\n      .range([10, boundsWidth - 10]);\n  }, [data, boundsWidth]);\n\n  // Compute kernel density estimation\n  const density = useMemo(() => {\n    const kde = kernelDensityEstimator(kernelEpanechnikov(7), xScale.ticks(40));\n    return kde(data.map(v => v.x));\n  }, [xScale]);\n\n  const yScale = useMemo(() => {\n    const max = Math.max(...density.map(d => d[1]));\n    return d3.scaleLinear().range([boundsHeight, 0]).domain([0, max]);\n  }, [data, boundsHeight]);\n\n  const path = useMemo(() => {\n    const lineGenerator = d3\n      .line()\n      .x(d => xScale(d[0]))\n      .y(d => yScale(d[1]))\n      .curve(d3.curveBasis);\n    return lineGenerator(density);\n  }, [density, xScale, yScale]);\n\n  return (\n    <svg\n      width={width}\n      height={height}\n      className={`${showAnimation ? animationClass : \"\"}`}\n    >\n      <g\n        width={boundsWidth}\n        height={boundsHeight}\n        transform={`translate(${[marginLeft, marginTop].join(\",\")})`}\n      >\n        <path\n          d={path}\n          fill={fillColor}\n          stroke={fillColor}\n          strokeWidth={1}\n          strokeLinejoin='round'\n        />\n        {showXaxis && (\n          <g transform={`translate(0, ${boundsHeight})`}>\n            <AxisBottom\n              xScale={xScale}\n              pixelsPerTick={40}\n              fontColor={fontColor}\n              lineColor={lineColor}\n            />\n          </g>\n        )}\n      </g>\n      {showXaxisLabel && (\n        <text\n          fontSize={fontSize}\n          x={width / 2}\n          y={height - 10}\n          fill={fontColor}\n          style={{ textAnchor: \"middle\" }}\n        >\n          {xAxisLabel}\n        </text>\n      )}\n    </svg>\n  );\n};\n\nDensityChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  data: PropTypes.array,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  showXaxisLabel: PropTypes.bool,\n  fontSize: PropTypes.number,\n  xAxisLabel: PropTypes.string,\n  showXaxis: PropTypes.bool,\n  animationClass: PropTypes.string,\n  showAnimation: PropTypes.bool,\n};\nDensityChart.defaultProps = DensityChartData;\n\nexport default DensityChart;\n"],"names":["_ref","xScale","pixelsPerTick","fontColor","lineColor","range","ticks","useMemo","width","numberOfTicksTarget","Math","floor","map","value","d3","xOffset","_jsxs","_Fragment","children","_jsx","d","join","fill","stroke","_ref2","transform","y2","style","fontSize","textAnchor","DensityChart","height","data","marginTop","marginRight","marginBottom","marginLeft","fillColor","showXaxisLabel","xAxisLabel","showXaxis","animationClass","showAnimation","boundsWidth","boundsHeight","max","v","x","domain","density","kernel","X","k","abs","V","yScale","path","y","curve","lineGenerator","className","strokeWidth","strokeLinejoin","AxisBottom","defaultProps","DensityChartData"],"sourceRoot":""}