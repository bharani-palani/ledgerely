{"version":3,"file":"static/js/6.49f66db4.chunk.js","mappings":"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","sources":["components/GlobalHeader/queryParamHook.js","components/bank/bankIndex.js"],"sourcesContent":["import { useMemo } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst useQuery = () => {\n  const { search } = useLocation();\n  return useMemo(() => new URLSearchParams(search), [search]);\n};\n\nexport { useQuery };\n","import React, { useContext, useEffect, useState } from \"react\";\nimport PageHeader from \"../shared/PageHeader\";\nimport { Col, Row, Container } from \"react-bootstrap\";\nimport apiInstance from \"../../services/apiServices\";\nimport { GlobalContext } from \"../../contexts/GlobalContext\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport FilterSelect from \"../configuration/backend/FormElements/FilterSelect\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport DateTimePicker from \"react-datetime-picker\";\nimport moment from \"moment\";\nimport Loader from \"../resuable/Loader\";\nimport BackendCore from \"../configuration/backend/BackendCore\";\nimport { useQuery } from \"../GlobalHeader/queryParamHook\";\nimport { crudFormArray } from \"../configuration/backendTableConfig\";\nimport { LocaleContext } from \"../../contexts/LocaleContext\";\nimport { UpgradeHeading, UpgradeContent } from \"../payment/Upgrade\";\nimport { MyAlertContext } from \"../../contexts/AlertContext\";\nimport { currencyList, localeTagList, countryList } from \"../../helpers/static\";\n\nconst BankContext = React.createContext(undefined);\n\nconst Bank = () => {\n  const intl = useIntl();\n  const globalContext = useContext(GlobalContext);\n  document.title = `${globalContext.appName} - ${intl.formatMessage({\n    id: \"bank\",\n    defaultMessage: \"bank\",\n  })}`;\n  const userContext = useContext(UserContext);\n  const localeContext = useContext(LocaleContext);\n  const myAlertContext = useContext(MyAlertContext);\n  const [init, setInit] = useState(false);\n  const [ajaxStatus, setAjaxStatus] = useState(false);\n  const [loader, setLoader] = useState(true);\n  const [bankList, setBankList] = useState([]);\n  const [selection, setSelection] = useState({\n    bank: \"\",\n    startDate: moment().startOf(\"month\").toDate(),\n    endDate: moment().endOf(\"month\").toDate(),\n  });\n  const [bankData, setBankData] = useState([]);\n  const defApiParam = {\n    start: 0,\n    limit: 10,\n    searchString: \"\",\n  };\n  const [apiParams, setApiParams] = useState(defApiParam);\n  const [bankApiTrxParams, setBankTrxApiParams] = useState(defApiParam);\n\n  const master = {\n    config: {\n      header: {\n        searchPlaceholder: intl.formatMessage({\n          id: \"searchHere\",\n          defaultMessage: \"searchHere\",\n        }),\n        searchable: true,\n      },\n      footer: {\n        total: {\n          title: intl.formatMessage({ id: \"total\", defaultMessage: \"total\" }),\n          maxDecimal: 2,\n        },\n        pagination: {\n          currentPage: \"first\",\n          maxPagesToShow: 5,\n        },\n      },\n    },\n    id: \"bankTable\",\n    Table: \"bankTrx\",\n    label: \"Bank trx\",\n    TableRows: [\n      \"inc_exp_name\",\n      \"inc_exp_date\",\n      \"inc_exp_amount\",\n      \"inc_exp_type\",\n      \"inc_exp_comments\",\n    ],\n    TableAliasRows: [\n      intl.formatMessage({ id: \"name\", defaultMessage: \"name\" }),\n      intl.formatMessage({\n        id: \"date\",\n        defaultMessage: \"date\",\n      }),\n      intl.formatMessage({\n        id: \"amount\",\n        defaultMessage: \"amount\",\n      }),\n      intl.formatMessage({\n        id: \"type\",\n        defaultMessage: \"type\",\n      }),\n      intl.formatMessage({ id: \"comments\", defaultMessage: \"comments\" }),\n    ],\n    defaultValues: [],\n    rowElements: [\"label\", \"label\", \"label\", \"label\", \"label\"],\n  };\n\n  const getBankList = async () => {\n    setLoader(true);\n    const formdata = new FormData();\n    formdata.append(\"limit\", apiParams.limit);\n    formdata.append(\"start\", apiParams.start);\n    formdata.append(\"searchString\", apiParams.searchString);\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance\n      .post(\"/account_planner/bank_list\", formdata)\n      .then(res => {\n        setBankList(res.data.response);\n      })\n      .catch(error => {\n        console.log(error);\n      })\n      .finally(() => setLoader(false));\n  };\n\n  const getBankTrxTable = () => {\n    const formdata = new FormData();\n    formdata.append(\"limit\", bankApiTrxParams.limit);\n    formdata.append(\"start\", bankApiTrxParams.start);\n    formdata.append(\"searchString\", bankApiTrxParams.searchString);\n    formdata.append(\n      \"TableRows\",\n      `a.inc_exp_name, a.inc_exp_date, a.inc_exp_amount, a.inc_exp_type, a.inc_exp_comments`,\n    );\n    formdata.append(\"Table\", \"bankTrx\");\n    formdata.append(\n      \"WhereClause\",\n      `a.inc_exp_appId = '${\n        userContext.userConfig.appId\n      }' && a.inc_exp_bank = '${selection.bank}' && d.bank_appId = '${\n        userContext.userConfig.appId\n      }' && a.inc_exp_date >= '${moment(selection.startDate)\n        .format(\"YYYY-MM-DD\")\n        .toString()}' && a.inc_exp_date <= '${moment(selection.endDate)\n        .format(\"YYYY-MM-DD\")\n        .toString()}'`,\n    );\n    return apiInstance.post(\"/account_planner/getAccountPlanner\", formdata);\n  };\n\n  const onGenerate = cb => {\n    setAjaxStatus(true);\n    setBankData([]);\n    setTimeout(() => {\n      const a = getBankTrxTable();\n      Promise.all([a])\n        .then(r => {\n          setBankData(r[0].data.response);\n          typeof cb === \"function\" && cb();\n        })\n        .catch(e => console.log(\"bbb\", e))\n        .finally(() => {\n          setAjaxStatus(false);\n          setInit(true);\n        });\n    }, 100);\n  };\n\n  useEffect(() => {\n    getBankList();\n  }, []);\n\n  /*\n   * Query params landing feature starts\n   */\n  const searchParams = useQuery();\n  const params = {\n    fetch: searchParams.get(\"fetch\"),\n    bankId: searchParams.get(\"bankId\"),\n    startDate: searchParams.get(\"startDate\"),\n    endDate: searchParams.get(\"endDate\"),\n  };\n  const [paramBankFetch, setParamBankFetch] = useState(false);\n\n  useEffect(() => {\n    if (params.fetch === \"bank\" && params.bankId) {\n      setParamBankFetch(true);\n      setSelection(prev => ({\n        ...prev,\n        bank: params.bankId,\n        startDate: moment(params.startDate).toDate(),\n        endDate: moment(params.endDate).toDate(),\n      }));\n    }\n  }, [JSON.stringify(params)]);\n\n  useEffect(() => {\n    if (\n      params.fetch === \"bank\" &&\n      selection.bank &&\n      selection.startDate &&\n      selection.endDate &&\n      paramBankFetch\n    ) {\n      onGenerate(() => {\n        setParamBankFetch(false);\n        setTimeout(() => {\n          document.getElementById(\"bankTable\")?.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"center\",\n            inline: \"start\",\n          });\n        }, 200);\n      });\n    }\n  }, [JSON.stringify(params), selection.bank, paramBankFetch]);\n\n  /*\n   * Query params landing feature ends\n   */\n\n  const LoaderComp = () => {\n    return (\n      <div className='relativeSpinner middle'>\n        <Loader />\n      </div>\n    );\n  };\n  const bankFields = [\n    \"id\",\n    \"bank\",\n    \"accountNumber\",\n    \"swiftCode\",\n    \"type\",\n    \"country\",\n    \"sort\",\n    \"localeLanguage\",\n    \"localeCurrency\",\n  ];\n  const rElements = [\n    \"checkbox\",\n    \"textbox\",\n    \"textbox\",\n    \"textbox\",\n    {\n      fetch: {\n        dropDownList: [\n          {\n            id: \"SAV\",\n            value: intl.formatMessage({\n              id: \"savingsAccount\",\n              defaultMessage: \"savingsAccount\",\n            }),\n          },\n          {\n            id: \"CUR\",\n            value: intl.formatMessage({\n              id: \"currentAccount\",\n              defaultMessage: \"currentAccount\",\n            }),\n          },\n        ],\n      },\n    },\n    {\n      fetch: {\n        dropDownList: countryList,\n      },\n      searchable: true,\n    },\n    \"number\",\n    {\n      fetch: {\n        dropDownList: localeTagList,\n      },\n      searchable: true,\n    },\n    {\n      fetch: {\n        dropDownList: currencyList,\n      },\n      searchable: true,\n    },\n  ];\n  const bankCoreOptions = crudFormArray\n    .filter(f => f.id === \"bankAccounts\")\n    .map(crud => {\n      const obj = {\n        header: {\n          searchPlaceholder: intl.formatMessage({\n            id: \"searchHere\",\n            defaultMessage: \"searchHere\",\n          }),\n          searchable: true,\n        },\n        footer: {\n          total: {\n            locale: localeContext.localeLanguage,\n            currency: localeContext.localeCurrency,\n            maxDecimal: 2,\n          },\n          pagination: {\n            currentPage: \"last\",\n            maxPagesToShow: 5,\n          },\n        },\n      };\n      crud.config = obj;\n      crud.TableAliasRows = bankFields.map(al =>\n        intl.formatMessage({ id: al, defaultMessage: al }),\n      );\n      crud.rowElements = rElements;\n      return crud;\n    })[0];\n\n  const getBackendAjax = (Table, TableRows) => {\n    const formdata = new FormData();\n    formdata.append(\"TableRows\", TableRows);\n    formdata.append(\"Table\", Table);\n    formdata.append(\"limit\", apiParams.limit);\n    formdata.append(\"start\", apiParams.start);\n    formdata.append(\"searchString\", apiParams.searchString);\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    return apiInstance.post(\"/account_planner/getAccountPlanner\", formdata);\n  };\n\n  const [dbData, setDbData] = useState([]);\n  const fetchBankMaster = () => {\n    setDbData([]);\n    const a = getBackendAjax(bankCoreOptions.Table, bankCoreOptions.TableRows);\n    Promise.all([a]).then(async r => {\n      setDbData(r[0].data.response);\n    });\n  };\n\n  const onPostApi = (response, id) => {\n    const { status, data } = response;\n    if (status === 200) {\n      if (\n        response &&\n        data &&\n        typeof data.response === \"boolean\" &&\n        data.response !== null &&\n        data.response\n      ) {\n        userContext.renderToast({\n          message: intl.formatMessage({\n            id: \"transactionSavedSuccessfully\",\n            defaultMessage: \"transactionSavedSuccessfully\",\n          }),\n        });\n      }\n      if (\n        response &&\n        data &&\n        typeof data.response === \"boolean\" &&\n        data.response !== null &&\n        data.response === false\n      ) {\n        userContext.renderToast({\n          type: \"error\",\n          icon: \"fa fa-times-circle\",\n          message: intl.formatMessage({\n            id: \"noFormChangeFound\",\n            defaultMessage: \"noFormChangeFound\",\n          }),\n        });\n      }\n      if (response && data && data.response === null) {\n        myAlertContext.setConfig({\n          show: true,\n          className: \"alert-danger border-0 text-dark\",\n          type: \"danger\",\n          dismissible: true,\n          heading: <UpgradeHeading />,\n          content: <UpgradeContent />,\n        });\n      }\n      if (\n        response &&\n        data &&\n        typeof data.response === \"object\" &&\n        data.response !== null\n      ) {\n        let intlKey;\n        switch (data.response.number) {\n          case 1451:\n            intlKey = \"foreignKeyDeleteMessage\";\n            break;\n          default:\n            intlKey = \"\";\n        }\n        userContext.renderToast({\n          type: \"error\",\n          icon: \"fa fa-times-circle\",\n          message: intl.formatMessage({\n            id: intlKey,\n            defaultMessage: intlKey,\n          }),\n        });\n      }\n    } else {\n      userContext.renderToast({\n        type: \"error\",\n        icon: \"fa fa-times-circle\",\n        message: intl.formatMessage({\n          id: \"unableToReachServer\",\n          defaultMessage: \"unableToReachServer\",\n        }),\n      });\n    }\n  };\n\n  const onChangeParams = obj => {\n    setApiParams(prev => ({\n      ...prev,\n      ...obj,\n    }));\n  };\n\n  useEffect(() => {\n    fetchBankMaster();\n  }, [apiParams]);\n\n  const onChangeBankParams = obj => {\n    setBankTrxApiParams(prev => ({\n      ...prev,\n      ...obj,\n    }));\n  };\n\n  useEffect(() => {\n    if (init) {\n      onGenerate();\n    }\n  }, [bankApiTrxParams, init]);\n\n  return (\n    <BankContext.Provider value={{ bankList, selection }}>\n      <Container fluid>\n        <PageHeader icon='fa fa-bank' intlId='bank' />\n        {loader ? (\n          <LoaderComp />\n        ) : (\n          <>\n            {dbData && Object.keys(dbData)?.length > 0 && (\n              <>\n                <BackendCore\n                  className='pt-3'\n                  config={bankCoreOptions.config}\n                  Table={bankCoreOptions.Table}\n                  TableRows={bankCoreOptions.TableRows}\n                  TableAliasRows={bankCoreOptions.TableAliasRows}\n                  rowElements={bankCoreOptions.rowElements}\n                  defaultValues={bankCoreOptions.defaultValues}\n                  dbData={dbData}\n                  postApiUrl='/account_planner/postAccountPlanner'\n                  onPostApi={response =>\n                    onPostApi(response, bankCoreOptions.id)\n                  }\n                  apiParams={apiParams}\n                  onChangeParams={obj => onChangeParams(obj)}\n                  onReFetchData={() => fetchBankMaster()}\n                  cellWidth={bankCoreOptions.cellWidth}\n                  ajaxButtonName={intl.formatMessage({\n                    id: \"submit\",\n                    defaultMessage: \"submit\",\n                  })}\n                  appIdKeyValue={{\n                    key: \"bank_appId\",\n                    value: userContext.userConfig.appId,\n                  }}\n                  theme={userContext.userData.theme}\n                />\n              </>\n            )}\n            <Row\n              className={`align-items-center ${\n                !(Object.keys(bankData).length > 0) ? \"pb-5\" : \"\"\n              }`}\n            >\n              <Col sm={3} className='react-responsive-ajax-data-table pb-2'>\n                <FilterSelect\n                  placeholder={`${intl.formatMessage({\n                    id: \"select\",\n                    defaultMessage: \"select\",\n                  })} ${intl.formatMessage({\n                    id: \"bank\",\n                    defaultMessage: \"bank\",\n                  })}`}\n                  onChange={(ind, value, pKey) => {\n                    setSelection(prev => ({ ...prev, bank: value }));\n                  }}\n                  element={{\n                    fetch: {\n                      dropDownList: bankList.map(row => ({\n                        id: row.id,\n                        value: row.value,\n                      })),\n                    },\n                    searchable: true,\n                  }}\n                  value={selection.bank}\n                  type={\"single\"}\n                  searchable={true}\n                  theme={userContext.userData.theme}\n                />\n              </Col>\n              <Col\n                sm={3}\n                className='d-flex align-items-center justify-content-between pb-2'\n              >\n                <span>\n                  <FormattedMessage id='startDate' defaultMessage='startDate' />\n                </span>\n                <DateTimePicker\n                  className='bg-white text-dark'\n                  value={selection.startDate}\n                  format='yyyy-MM-dd'\n                  clearIcon={null}\n                  onChange={value => {\n                    setSelection(prev => ({ ...prev, startDate: value }));\n                  }}\n                  // minDate={moment().subtract(1, \"year\").toDate()}\n                  maxDate={new Date()}\n                  onKeyDown={e => {\n                    e.preventDefault();\n                  }}\n                />\n              </Col>\n              <Col\n                sm={3}\n                className='d-flex align-items-center justify-content-between pb-2'\n              >\n                <span>\n                  <FormattedMessage id='endDate' defaultMessage='endDate' />\n                </span>\n                <DateTimePicker\n                  className='bg-white text-dark'\n                  value={selection.endDate}\n                  format='yyyy-MM-dd'\n                  clearIcon={null}\n                  onChange={value => {\n                    setSelection(prev => ({ ...prev, endDate: value }));\n                  }}\n                  // minDate={moment().subtract(1, \"year\").toDate()}\n                  maxDate={new Date()}\n                  onKeyDown={e => {\n                    e.preventDefault();\n                  }}\n                />\n              </Col>\n              <Col sm={3} className='pb-2'>\n                <button\n                  className='btn btn-sm btn-bni w-100 border-0'\n                  onClick={() => onGenerate()}\n                  disabled={ajaxStatus || !selection.bank}\n                >\n                  <FormattedMessage id='generate' defaultMessage='generate' />\n                </button>\n              </Col>\n            </Row>\n          </>\n        )}\n        {ajaxStatus && <LoaderComp />}\n        {bankData && Object.keys(bankData).length > 0 && (\n          <>\n            <div className='py-2'>\n              <span\n                className={`badge ${\n                  userContext.userData.theme === \"dark\"\n                    ? \"bg-secondary text-white\"\n                    : \"bg-light text-dark\"\n                }`}\n              >\n                {intl.formatMessage({\n                  id: \"bankTransactions\",\n                  defaultMessage: \"bankTransactions\",\n                })}\n              </span>\n            </div>\n            <BackendCore\n              id={master.id}\n              config={master.config}\n              Table={master.Table}\n              TableRows={master.TableRows}\n              TableAliasRows={master.TableAliasRows}\n              rowElements={master.rowElements}\n              defaultValues={master.defaultValues}\n              dbData={bankData}\n              cellWidth={[25, 7, 10, 5, 20]}\n              theme={userContext.userData.theme}\n              apiParams={bankApiTrxParams}\n              onChangeParams={obj => onChangeBankParams(obj)}\n            />\n          </>\n        )}\n        {Object.keys(bankData).length === 0 && init && !ajaxStatus && (\n          <div className='text-center py-2'>\n            <FormattedMessage id='noRecordsGenerated' defaultMessage=' ' />\n          </div>\n        )}\n      </Container>\n    </BankContext.Provider>\n  );\n};\n\nexport default Bank;\n"],"names":["useQuery","search","useLocation","useMemo","URLSearchParams","BankContext","React","undefined","Bank","_Object$keys","intl","useIntl","globalContext","useContext","GlobalContext","document","title","appName","formatMessage","id","defaultMessage","userContext","UserContext","localeContext","LocaleContext","myAlertContext","MyAlertContext","init","setInit","useState","ajaxStatus","setAjaxStatus","loader","setLoader","bankList","setBankList","selection","setSelection","bank","startDate","moment","startOf","toDate","endDate","endOf","bankData","setBankData","defApiParam","start","limit","searchString","apiParams","setApiParams","bankApiTrxParams","setBankTrxApiParams","master","config","header","searchPlaceholder","searchable","footer","total","maxDecimal","pagination","currentPage","maxPagesToShow","Table","label","TableRows","TableAliasRows","defaultValues","rowElements","onGenerate","cb","setTimeout","a","getBankTrxTable","formdata","FormData","append","userConfig","appId","format","toString","apiInstance","post","Promise","all","then","r","data","response","catch","e","console","log","finally","useEffect","async","res","error","getBankList","searchParams","params","fetch","get","bankId","paramBankFetch","setParamBankFetch","prev","JSON","stringify","_document$getElementB","getElementById","scrollIntoView","behavior","block","inline","LoaderComp","_jsx","className","children","Loader","bankFields","rElements","dropDownList","value","countryList","localeTagList","currencyList","bankCoreOptions","crudFormArray","filter","f","map","crud","obj","locale","localeLanguage","currency","localeCurrency","al","dbData","setDbData","fetchBankMaster","getBackendAjax","Provider","_jsxs","Container","fluid","PageHeader","icon","intlId","_Fragment","Object","keys","length","BackendCore","postApiUrl","onPostApi","status","renderToast","message","type","setConfig","show","dismissible","heading","UpgradeHeading","content","UpgradeContent","intlKey","number","onChangeParams","onReFetchData","cellWidth","ajaxButtonName","appIdKeyValue","key","theme","userData","Row","Col","sm","FilterSelect","placeholder","onChange","ind","pKey","element","row","FormattedMessage","DateTimePicker","clearIcon","maxDate","Date","onKeyDown","preventDefault","onClick","disabled","onChangeBankParams"],"sourceRoot":""}