{"version":3,"sources":["components/shared/D3/DivergingBarChart.js"],"names":["DivergingBarChart","props","svgRef","useRef","width","barHeight","marginTop","marginRight","marginBottom","marginLeft","metric","style","fillColor","lineColor","fontSize","data","showAnimation","onClick","showTooltip","showXaxisLabel","tooltipPrefix","tooltipSuffix","showXaxis","showYaxis","padding","animationDuration","fontColor","yTicks","useEffect","massageData","d3","d","after","before","map","_objectSpread","value","height","Math","ceil","length","x","domain","rangeRound","y","label","format","tickFormat","svg","current","attr","selectAll","remove","append","join","on","i","tooltip","html","concat","pageX","pageY","min","transition","delay","duration","abs","bandwidth","sign","text","call","ticks","g","clone","select","tickSize","tickPadding","filter","JSON","stringify","_jsx","ref","defaultProps","divergingBarChartProps"],"mappings":"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","file":"static/js/9.bf477693.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { tooltip } from \"./constants\";\nimport { divergingBarChartProps } from \"./propsData\";\nimport PropTypes from \"prop-types\";\n\nconst DivergingBarChart = props => {\n  const svgRef = useRef(null);\n  const {\n    width,\n    barHeight,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft,\n    metric,\n    style,\n    fillColor,\n    lineColor,\n    fontSize,\n    data,\n    showAnimation,\n    onClick,\n    showTooltip,\n    showXaxisLabel,\n    tooltipPrefix,\n    tooltipSuffix,\n    showXaxis,\n    showYaxis,\n    padding,\n    animationDuration,\n    fontColor,\n    yTicks,\n  } = props;\n\n  useEffect(() => {\n    const massageData = d3\n      .sort(data, d => d.after - d.before)\n      .map(d => ({\n        ...d,\n        value:\n          metric === \"absolute\"\n            ? d.after - d.before\n            : (d.after - d.before) / d.before,\n      }));\n\n    const height =\n      Math.ceil((massageData.length + 0.1) * barHeight) +\n      marginTop +\n      marginBottom;\n\n    // Create the positional scales.\n    const x = d3\n      .scaleLinear()\n      .domain(d3.extent(massageData, d => d.value))\n      .rangeRound([marginLeft, width - marginRight]);\n\n    const y = d3\n      .scaleBand()\n      .domain(massageData.map(d => d.label))\n      .rangeRound([marginTop, height - marginBottom])\n      .padding(padding);\n\n    // Create the format function.\n    const format = d3.format(metric === \"absolute\" ? \"+,d\" : \"+.1%\");\n    const tickFormat =\n      metric === \"absolute\" ? d3.formatPrefix(\"+.1\", 1e6) : d3.format(\"+.0%\");\n\n    // Create the SVG container.\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n    // .attr(\"viewBox\", [0, 0, width, height]);\n\n    // Add a rect for each label.\n    svg.selectAll(`g`).remove();\n    svg\n      .append(\"g\")\n      .selectAll()\n      .data(massageData)\n      .join(\"rect\")\n      .on(\"click\", (d, i) => {\n        onClick(d, i);\n      })\n      .on(\"mousemove\", (d, i) => {\n        if (showTooltip) {\n          tooltip.style(\"padding\", \"5px\");\n          tooltip.style(\"opacity\", 0.9);\n          tooltip\n            .html(`${tooltipPrefix} ${i.before} â†’ ${i.after} ${tooltipSuffix}`)\n            .style(\"left\", d.pageX + 5 + \"px\")\n            .style(\"top\", d.pageY - 30 + \"px\");\n        }\n      })\n      .on(\"mouseout\", d => {\n        tooltip.style(\"padding\", 0);\n        tooltip.style(\"opacity\", 0);\n      })\n      .attr(\"fill\", d => [d.value > 0 ? fillColor : fillColor])\n      .attr(\"x\", d => x(Math.min(d.value, 0)))\n      .transition()\n      .delay(0)\n      .duration((d, i) => (showAnimation ? animationDuration : i))\n      .attr(\"y\", d => y(d.label))\n      .attr(\"width\", d => Math.abs(x(d.value) - x(0)))\n      .attr(\"height\", y.bandwidth());\n\n    // Add a text label for each label.\n    if (showXaxis) {\n      svg\n        .append(\"g\")\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", fontSize)\n        .attr(\"fill\", fontColor)\n        .selectAll()\n        .data(massageData)\n        .join(\"text\")\n        .attr(\"text-anchor\", d => (d.value < 0 ? \"end\" : \"start\"))\n        .attr(\"x\", d => x(d.value) + Math.sign(d.value - 0) * 4)\n        .attr(\"y\", d => y(d.label) + y.bandwidth() / 2)\n        .attr(\"dy\", \"0.35em\")\n        .text(d => format(d.value));\n    }\n\n    // Add the axes and grid lines.\n    if (showYaxis) {\n      svg\n        .append(\"g\")\n        .attr(\"transform\", `translate(0,${marginTop})`)\n        .call(d3.axisTop(x).ticks(yTicks).tickFormat(tickFormat))\n        .call(g =>\n          g\n            .selectAll(\".tick line\")\n            .attr(\"stroke\", lineColor)\n            .clone()\n            .attr(\"y2\", height - marginTop - marginBottom)\n            .attr(\"stroke\", lineColor)\n            .attr(\"stroke-opacity\", 0.1),\n        )\n        .call(g =>\n          g\n            .selectAll(\".tick text\")\n            .attr(\"font-size\", fontSize)\n            .attr(\"fill\", fontColor),\n        )\n        .call(g => g.select(\".domain\").remove());\n    }\n\n    if (showXaxisLabel) {\n      svg\n        .append(\"g\")\n        .attr(\"transform\", `translate(${x(0)},0)`)\n        .call(d3.axisLeft(y).tickSize(0).tickPadding(6))\n        .call(g =>\n          g\n            .selectAll(\".tick text\")\n            .attr(\"font-size\", fontSize)\n            .attr(\"fill\", fontColor)\n            .filter((d, i) => massageData[i].value < 0)\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"x\", 6),\n        );\n    }\n  }, [JSON.stringify(props)]);\n\n  return <svg style={style} ref={svgRef} />;\n};\n\nDivergingBarChart.propTypes = {\n  width: PropTypes.number,\n  barHeight: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  metric: PropTypes.string,\n  style: PropTypes.object,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontSize: PropTypes.number,\n  data: PropTypes.array,\n  showTooltip: PropTypes.bool,\n  tooltipPrefix: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  showAnimation: PropTypes.bool,\n  showXaxis: PropTypes.bool,\n  showYaxis: PropTypes.bool,\n  onClick: PropTypes.func,\n  padding: PropTypes.number,\n  animationDuration: PropTypes.number,\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  yTicks: PropTypes.number,\n  showXaxisLabel: PropTypes.bool,\n};\n\nDivergingBarChart.defaultProps = divergingBarChartProps;\n\nexport default DivergingBarChart;\n"],"sourceRoot":""}