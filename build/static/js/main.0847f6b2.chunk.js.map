{"version":3,"sources":["components/mainApp/errorCatch.js","components/mainApp/ErrorBoundary.js","images/bharani.tech-logo.svg","App.js","serviceWorker.js","index.js"],"names":["ErrorCatch","props","error","errorInfo","className","JSON","stringify","ErrorBoundary","checkNetwork","window","navigator","onLine","state","isOnline","this","setState","children","React","Component","Root","lazy","AppLoader","style","display","alignItems","justifyContent","height","backgroundImage","logo","backgroundRepeat","backgroundPosition","backgroundSize","width","App","fallback","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"yLA8BeA,MA5Bf,SAAoBC,GAClB,IAAQC,EAAqBD,EAArBC,MAAOC,EAAcF,EAAdE,UACf,OACE,qBAAKC,UAAU,GAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,oBAAf,SACE,qBAAKA,UAAU,uDAAf,SACE,sBAAKA,UAAU,cAAf,UACE,mBAAGA,UAAU,iDACb,uDACA,uEACA,oBAAIA,UAAU,gBAAd,4EAGA,qBAAKA,UAAU,oDAAf,SACGC,KAAKC,UAAUJ,KAElB,qBAAKE,UAAU,+CAAf,SACGC,KAAKC,UAAUH,eAQ/B,ECScI,E,kDAhCd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IAIPO,aAAe,WACd,OAAOC,OAAOC,UAAUC,SAAU,CAClC,EALA,EAAKC,MAAQ,CAAEV,MAAO,KAAMC,UAAW,KAAMU,UAAU,GAFrC,CAGlB,C,qDAMD,WAEC,G,kCAED,WAEC,G,+BAED,SAAkBX,EAAOC,GACxBW,KAAKC,SAAS,CACbb,MAAOA,EACPC,UAAWA,GAEZ,G,oBAED,WACC,OAAIW,KAAKF,MAAMT,UACP,cAAC,EAAD,CAAYD,MAAOY,KAAKF,MAAMV,MAAOC,UAAWW,KAAKF,MAAMT,YAE5DW,KAAKb,MAAMe,QAClB,K,GA9B0BC,IAAMC,WCJnB,MAA0B,8CCMnCC,G,MAAOC,gBAAK,kBAAM,mDAAN,KAOZC,EAAY,kBAChB,qBACEC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,QALZ,SAQE,qBACEJ,MAAO,CACLK,gBAAgB,OAAD,OAASC,EAAT,KACfC,iBAAkB,YAClBC,mBAAoB,SACpBC,eAAgB,UAChBL,OAAQ,QACRM,MAAO,YAhBG,EAoCHC,MAVf,WACE,OACE,cAAC,EAAD,UACE,cAAC,WAAD,CAAUC,SAAU,cAAC,EAAD,IAApB,SACE,cAACf,EAAD,OAIP,ECnCmBgB,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD4H3C,kBAAmBhC,WACrBA,UAAUiC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,YACd,G","file":"static/js/main.0847f6b2.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ErrorCatch(props) {\n  const { error, errorInfo } = props;\n  return (\n    <div className=\"\">\n      <div className=\"p-5\">\n        <div className=\"position-relative\">\n          <div className=\"position-absolute top-50 start-50 translate-middle-x\">\n            <div className=\"text-center\">\n              <i className=\"fa fa-exclamation-triangle fa-5x text-danger\" />\n              <h1>Something went wrong!</h1>\n              <h6>Please contact administrator on this.</h6>\n              <h6 className=\"error-details\">\n                This could be cause of some errors in your design as follows..\n              </h6>\n              <div className=\"text-danger p-1 border border-danger rounded mb-2\">\n                {JSON.stringify(error)}\n              </div>\n              <div className=\"text-danger p-1 border border-danger rounded\">\n                {JSON.stringify(errorInfo)}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ErrorCatch;\n","import React from 'react';\nimport ErrorCatch from './errorCatch';\n\n// Note: Error bounday should only be class component. Please dont change.\nclass ErrorBoundary extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { error: null, errorInfo: null, isOnline: true };\n\t}\n\n\tcheckNetwork = () => {\n\t\treturn window.navigator.onLine || false;\n\t};\n\n\tcomponentDidMount() {\n\t\t// this.interval = setInterval(() => this.setState({ isOnline: this.checkNetwork() }), 5000);\n\t}\n\n\tcomponentWillUnmount() {\n\t\t// clearInterval(this.interval);\n\t}\n\n\tcomponentDidCatch(error, errorInfo) {\n\t\tthis.setState({\n\t\t\terror: error,\n\t\t\terrorInfo: errorInfo\n\t\t});\n\t}\n\n\trender() {\n\t\tif (this.state.errorInfo) {\n\t\t\treturn <ErrorCatch error={this.state.error} errorInfo={this.state.errorInfo}  />;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;\n","export default __webpack_public_path__ + \"static/media/bharani.tech-logo.41a0e1c7.svg\";","/* eslint-disable no-unused-vars */\nimport React, { Suspense, lazy } from 'react';\nimport ErrorBoundary from './components/mainApp/ErrorBoundary';\nimport logo from './images/bharani.tech-logo.svg';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nconst Root = lazy(() => import('./components/mainApp/Root'));\n\n// const Root = lazy(() => {\n//   return new Promise(resolve => setTimeout(resolve, 2000)).then(() =>\n//     import('./components/mainApp/Root')\n//   );\n// });\nconst AppLoader = () => (\n  <div\n    style={{\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '95vh',\n    }}\n  >\n    <div\n      style={{\n        backgroundImage: `url(${logo})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        backgroundSize: 'contain',\n        height: '500px',\n        width: '500px',\n      }}\n    ></div>\n  </div>\n);\n\n// todo:\n// 1. fetch JWT token and store in local storage on any case (may or may not app installed or configured)\n// 2. if app connected show root page, but installation not done, show installation page. Configure parameters in DB accordingly\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <Suspense fallback={<AppLoader />}>\n        <Root />\n      </Suspense>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}