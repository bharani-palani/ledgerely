{"version":3,"file":"static/js/5485.d4dcb2d4.chunk.js","mappings":"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","sources":["components/payment/CloseAccount.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { MyAlertContext } from \"../../contexts/AlertContext\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { useIntl } from \"react-intl\";\nimport apiInstance from \"../../services/apiServices\";\nimport { FormattedMessage } from \"react-intl\";\n\nconst ClosureContent = () => (\n  <div className='d-flex align-items-center'>\n    <i className='fa fa-thumbs-up pe-2 fa-2x' />\n    <ol>\n      <li>\n        <FormattedMessage\n          id='receivedRequest'\n          defaultMessage='receivedRequest'\n        />\n      </li>\n      <li>\n        <FormattedMessage id='dataSafety' defaultMessage='dataSafety' />\n      </li>\n      <li>\n        <FormattedMessage id='revokeAnytime' defaultMessage='revokeAnytime' />\n      </li>\n      <li>\n        <FormattedMessage id='autoDelete' defaultMessage='autoDelete' />\n      </li>\n      <li>\n        <i className='fa fa-handshake-o pe-2' />\n        <FormattedMessage id='goodBye' defaultMessage='goodBye' />\n      </li>\n    </ol>\n  </div>\n);\n\nconst ClosureHeading = () => (\n  <div>\n    <FormattedMessage id='sorryToGo' defaultMessage='sorryToGo' />\n  </div>\n);\nconst RevokeHeading = () => (\n  <div>\n    <FormattedMessage id='welcomeBack' defaultMessage='welcomeBack' />\n  </div>\n);\nconst RevokeContent = () => (\n  <div>\n    <FormattedMessage id='accountRestore' defaultMessage='accountRestore' />\n  </div>\n);\nconst CloseAccount = props => {\n  const intl = useIntl();\n  const userContext = useContext(UserContext);\n  const myAlertContext = useContext(MyAlertContext);\n  const [show, setShow] = useState(false);\n  const [isClosed, setIsClosed] = useState(false);\n  const handleClose = () => setShow(false);\n  const def = [\n    {\n      value: \"notRelevantToMe\",\n      checked: false,\n    },\n    {\n      value: \"pricingNotComp\",\n      checked: false,\n    },\n    {\n      value: \"limitedFeatures\",\n      checked: false,\n    },\n    {\n      value: \"others\",\n      checked: false,\n    },\n  ];\n  const [closeAccountReasons, setCloseAccountReasons] = useState(def);\n  const [comments, setComments] = useState(\"\");\n\n  useEffect(() => {\n    if (show) {\n      const formdata = new FormData();\n      formdata.append(\"appId\", userContext.userConfig.appId);\n      apiInstance\n        .post(\"/payments/checkClosure\", formdata)\n        .then(res => {\n          const bool = res.data.response;\n          setIsClosed(bool);\n        })\n        .catch(e => console.log(\"bbb\", e));\n    }\n  }, [show]);\n\n  const onRevokeAccount = () => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    apiInstance\n      .post(\"/payments/revokeAccount\", formdata)\n      .then(res => {\n        const bool = res.data.response;\n        if (bool) {\n          myAlertContext.setConfig({\n            show: true,\n            className: \"alert-success border-0 text-dark\",\n            type: \"success\",\n            dismissible: true,\n            heading: <RevokeHeading />,\n            content: <RevokeContent />,\n          });\n        }\n      })\n      .catch(e => {\n        userContext.renderToast({\n          type: \"error\",\n          icon: \"fa fa-times-circle\",\n          message: intl.formatMessage({\n            id: \"unableToReachServer\",\n            defaultMessage: \"unableToReachServer\",\n          }),\n        });\n      })\n      .finally(() => handleClose());\n  };\n\n  const onCloseAccount = () => {\n    const formdata = new FormData();\n    formdata.append(\"appId\", userContext.userConfig.appId);\n    formdata.append(\n      \"selections\",\n      closeAccountReasons\n        .filter(f => f.checked)\n        .map(m => m.value)\n        .join(\", \"),\n    );\n    formdata.append(\"comments\", comments);\n    apiInstance\n      .post(\"/payments/accountClosure\", formdata)\n      .then(res => {\n        const bool = res.data.response;\n        if (bool) {\n          setCloseAccountReasons(def);\n          setComments(\"\");\n          myAlertContext.setConfig({\n            show: true,\n            className: \"alert-danger border-0 text-dark\",\n            type: \"danger\",\n            dismissible: true,\n            heading: <ClosureHeading />,\n            content: <ClosureContent />,\n          });\n        }\n      })\n      .catch(e => {\n        userContext.renderToast({\n          type: \"error\",\n          icon: \"fa fa-times-circle\",\n          message: intl.formatMessage({\n            id: \"unableToReachServer\",\n            defaultMessage: \"unableToReachServer\",\n          }),\n        });\n      })\n      .finally(() => handleClose());\n  };\n\n  return (\n    <div className='py-3'>\n      <Modal show={show} onHide={handleClose} style={{ zIndex: 10000 }}>\n        <Modal.Header closeButton>\n          <Modal.Title className='d-flex align-items-center'>\n            {!isClosed ? (\n              <div className='d-flex align-items-center'>\n                <FormattedMessage id='sorryToGo' defaultMessage='sorryToGo' />\n                <i className='ps-2 fa-2x fa fa-frown-o' />\n              </div>\n            ) : (\n              <div className='d-flex align-items-center'>\n                <i className='pe-2 fa-2x fa fa-smile-o' />\n                <FormattedMessage\n                  id='cancelDeletion'\n                  defaultMessage='cancelDeletion'\n                />\n              </div>\n            )}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body\n          className={`rounded-bottom ${\n            userContext.userData.theme === \"dark\"\n              ? \"bg-dark text-white\"\n              : \"bg-white text-dark\"\n          }`}\n        >\n          {!isClosed ? (\n            <div>\n              <div className='pt-2'>\n                <FormattedMessage\n                  id='closeThisAccount'\n                  defaultMessage='closeThisAccount'\n                />\n              </div>\n              <div className='py-2'>\n                <FormattedMessage\n                  id='serveYouBetter'\n                  defaultMessage='serveYouBetter'\n                />\n              </div>\n              {closeAccountReasons.map((cl, i) => (\n                <label key={cl.value} htmlFor={cl.value} className='d-block'>\n                  <input\n                    id={cl.value}\n                    name='reasons'\n                    type='checkbox'\n                    onChange={e =>\n                      setCloseAccountReasons(prevState => {\n                        return prevState.map(obj =>\n                          obj.value === cl.value\n                            ? Object.assign(obj, { checked: e.target.checked })\n                            : obj,\n                        );\n                      })\n                    }\n                    checked={cl.checked}\n                  />\n                  <span className='ps-2'>\n                    <FormattedMessage id={cl.value} defaultMessage={cl.value} />\n                  </span>\n                </label>\n              ))}\n              <textarea\n                placeholder={intl.formatMessage({\n                  id: \"comments\",\n                  defaultMessage: \"comments\",\n                })}\n                rows={5}\n                style={{ resize: \"none\" }}\n                className='form-control my-2'\n                value={comments}\n                onChange={e => setComments(e.target.value)}\n              />\n              <div>\n                <Button\n                  disabled={\n                    !(closeAccountReasons.some(s => s.checked) && comments)\n                  }\n                  variant='danger'\n                  className='w-100 my-2'\n                  onClick={() => onCloseAccount()}\n                >\n                  <FormattedMessage\n                    id='closeThisAccount'\n                    defaultMessage='closeThisAccount'\n                  />\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div>\n              <div className='py-2'>\n                <FormattedMessage\n                  id='changedMind'\n                  defaultMessage='changedMind'\n                />\n              </div>\n              <button\n                className='w-100 btn btn-bni p-1 border-0'\n                onClick={() => onRevokeAccount()}\n              >\n                <FormattedMessage\n                  id='revokeAccount'\n                  defaultMessage='revokeAccount'\n                />\n              </button>\n            </div>\n          )}\n        </Modal.Body>\n      </Modal>\n      <div\n        onClick={() => setShow(true)}\n        className='link-danger cursor-pointer d-flex align-items-center justify-content-center'\n      >\n        <i className='fa fa-frown-o fa-2x pe-2' />\n        <FormattedMessage id='accountClosure' defaultMessage='accountClosure' />\n      </div>\n    </div>\n  );\n};\n\nexport default CloseAccount;\n"],"names":["ClosureContent","_jsxs","className","children","_jsx","FormattedMessage","id","defaultMessage","ClosureHeading","RevokeHeading","RevokeContent","props","intl","useIntl","userContext","useContext","UserContext","myAlertContext","MyAlertContext","show","setShow","useState","isClosed","setIsClosed","handleClose","def","value","checked","closeAccountReasons","setCloseAccountReasons","comments","setComments","useEffect","formdata","FormData","append","userConfig","appId","apiInstance","post","then","res","bool","data","response","catch","e","console","log","Modal","onHide","style","zIndex","Header","closeButton","Title","Body","userData","theme","onClick","onRevokeAccount","setConfig","type","dismissible","heading","content","renderToast","icon","message","formatMessage","finally","map","cl","i","htmlFor","name","onChange","prevState","obj","Object","assign","target","placeholder","rows","resize","Button","disabled","some","s","variant","onCloseAccount","filter","f","m","join"],"sourceRoot":""}