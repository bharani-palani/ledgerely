{"version":3,"sources":["components/shared/D3/VerticalBarChart.js","components/shared/D3/constants.js"],"names":["VerticalBarChart","props","svgRef","useRef","width","height","marginTop","marginRight","marginBottom","marginLeft","fillColor","yAxisLabel","xAxisLabel","padding","style","tooltipPrefix","tooltipSuffix","showTooltip","data","showYaxisLine","showXaxis","showXaxisLabel","showYaxis","showYaxisLabel","sortClause","showAnimation","animationDuration","xAxisTicksOrientation","onClick","fontSize","yTicks","useEffect","isNaN","order","arguments","length","undefined","d3","_ref","_slicedToArray","value","d","label","_ref3","map","sortBy","x","domain","range","xAxis","tickSizeOuter","y","Number","nice","svg","current","attr","call","extent","scaleExtent","translateExtent","on","event","transform","applyX","selectAll","bandwidth","append","join","i","e","tooltip","html","concat","toLocaleString","minimumFractionDigits","maximumFractionDigits","pageX","pageY","transition","duration","g","text","ticks","tickFormat","select","remove","JSON","stringify","_jsx","ref","defaultProps","appThemeBgColor","maxWidth","boxShadow","borderRadius","Array","fill","_","Math","random","toFixed","appThemeColor"],"mappings":"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","file":"static/js/14.045f5ae7.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { appThemeBgColor, tooltip } from \"./constants\";\nimport PropTypes from \"prop-types\";\n\nconst VerticalBarChart = props => {\n  const svgRef = useRef(null);\n  const {\n    width,\n    height,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft,\n    fillColor,\n    yAxisLabel,\n    xAxisLabel,\n    padding,\n    style,\n    tooltipPrefix,\n    tooltipSuffix,\n    showTooltip,\n    data,\n    showYaxisLine,\n    showXaxis,\n    showXaxisLabel,\n    showYaxis,\n    showYaxisLabel,\n    sortClause,\n    showAnimation,\n    animationDuration,\n    xAxisTicksOrientation,\n    onClick,\n    fontSize,\n    yTicks,\n  } = props;\n\n  const sortBy = (clause = null) => {\n    switch (clause) {\n      case \"desc\":\n        return d3.groupSort(\n          data,\n          ([d]) => -d.value,\n          d => d.label,\n        );\n      case \"asc\":\n        return d3.groupSort(\n          data,\n          ([d]) => d.value,\n          d => d.label,\n        );\n      default:\n        return data.map(d => d.label);\n    }\n  };\n\n  useEffect(() => {\n    if (!isNaN(width)) {\n      const order = sortBy(sortClause);\n      // Declare the x (horizontal position) scale.\n      const x = d3\n        .scaleBand()\n        .domain(order)\n        .range([marginLeft, width - marginRight])\n        .padding(padding);\n\n      const xAxis = d3.axisBottom(x).tickSizeOuter(0);\n\n      // Declare the y (vertical position) scale.\n      const y = d3\n        .scaleLinear()\n        .domain([0, d3.max(data, d => Number(d.value))])\n        .nice()\n        .range([height - marginBottom, marginTop]);\n\n      const zoom = svg => {\n        const extent = [\n          [marginLeft, marginTop],\n          [width - marginRight, height - marginTop],\n        ];\n\n        svg.call(\n          d3\n            .zoom()\n            .scaleExtent([1, 8])\n            .translateExtent(extent)\n            .extent(extent)\n            .on(\"zoom\", event => {\n              x.range(\n                [marginLeft, width - marginRight].map(d =>\n                  event.transform.applyX(d),\n                ),\n              );\n              svg\n                .selectAll(\".bars rect\")\n                .attr(\"x\", d => x(d.label))\n                .attr(\"width\", x.bandwidth());\n              svg.selectAll(\".x-axis\").call(xAxis);\n            }),\n        );\n      };\n\n      // Create the SVG container.\n      const svg = d3\n        .select(svgRef.current)\n        .attr(\"width\", width)\n        .attr(\"height\", height + 50)\n        .attr(\"viewBox\", [0, 0, width, height])\n        .call(zoom);\n\n      // Add a rect for each bar.\n      svg\n        .append(\"g\")\n        .attr(\"class\", \"bars\")\n        .selectAll()\n        .data(data)\n        .join(\"rect\")\n        .on(\"click\", (d, i) => {\n          onClick(d, i);\n        })\n        .on(\"mousemove\", (e, d) => {\n          if (showTooltip) {\n            tooltip.style(\"padding\", \"5px\");\n            tooltip.style(\"opacity\", 1);\n            tooltip\n              .html(\n                `<div>${tooltipPrefix}<div><div>${d.label}</div><div>${Number(\n                  d.value,\n                ).toLocaleString(\"en-US\", {\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })}</div><div>${tooltipSuffix}</div>`,\n              )\n              .style(\"left\", e.pageX + 10 + \"px\")\n              .style(\"top\", e.pageY - 50 + \"px\");\n          }\n        })\n        .on(\"mouseout\", d => {\n          tooltip.style(\"padding\", 0);\n          tooltip.style(\"opacity\", 0);\n        })\n        .attr(\"width\", x.bandwidth())\n        .attr(\"x\", d => x(d.label))\n        // .attr(\"y\", 0)\n        // .attr(\"height\", 0)\n        .transition()\n        .duration((d, i) => (showAnimation ? animationDuration + i * 100 : i))\n        .attr(\"fill\", fillColor)\n        .attr(\"y\", d => y(d.value))\n        .attr(\"height\", d => y(0) - y(d.value));\n\n      // Add the x-axis and label.\n      if (showXaxis) {\n        svg\n          .append(\"g\")\n          .attr(\"class\", \"x-axis\")\n          .attr(\"transform\", `translate(0,${height - marginBottom})`)\n          .call(xAxis)\n          .call(g =>\n            showXaxisLabel\n              ? g\n                  .append(\"text\")\n                  .style(\"text-anchor\", \"start\")\n                  .attr(\"font-size\", fontSize)\n                  .attr(\"x\", width / 2)\n                  .attr(\"y\", marginBottom)\n                  .attr(\"fill\", \"currentColor\")\n                  .text(xAxisLabel)\n              : g,\n          );\n        if (xAxisTicksOrientation === \"vertical\") {\n          svg\n            .selectAll(\".x-axis .tick text\")\n            .attr(\"font-size\", fontSize)\n            .style(\"text-anchor\", \"end\")\n            .attr(\"y\", \"15\")\n            .attr(\"dx\", \"-1em\")\n            .attr(\"dy\", \".15em\")\n            .attr(\"transform\", \"rotate(-60)\");\n        }\n      }\n\n      // Add the y-axis and x-axis label\n      if (showYaxis) {\n        svg\n          .append(\"g\")\n          .attr(\"class\", \"y-axis\")\n          .attr(\"transform\", `translate(${marginLeft},0)`)\n          .call(d3.axisLeft(y).ticks(yTicks).tickFormat(d3.format(\".2s\")))\n          .call(g => (!showYaxisLine ? g.select(\".domain\").remove() : g))\n          .call(g =>\n            showYaxisLabel\n              ? g\n                  .append(\"text\")\n                  .style(\"text-anchor\", \"middle\")\n                  .attr(\"font-size\", fontSize)\n                  .attr(\"x\", -((height - marginBottom) / 2))\n                  .attr(\"y\", -(marginLeft - 20))\n                  .attr(\"fill\", \"currentColor\")\n                  .attr(\"transform\", \"rotate(270)\")\n                  .text(yAxisLabel)\n              : g,\n          );\n      }\n    }\n  }, [JSON.stringify(props)]);\n\n  return <svg style={style} ref={svgRef} />;\n};\n\nVerticalBarChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  fillColor: PropTypes.string,\n  yAxisLabel: PropTypes.string,\n  xAxisLabel: PropTypes.string,\n  padding: PropTypes.number,\n  style: PropTypes.object,\n  tooltipPrefix: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  showTooltip: PropTypes.bool,\n  data: PropTypes.array,\n  showYaxisLine: PropTypes.bool,\n  showXaxis: PropTypes.bool,\n  showXaxisLabel: PropTypes.bool,\n  showYaxis: PropTypes.bool,\n  showYaxisLabel: PropTypes.bool,\n  showAnimation: PropTypes.bool,\n  animationDuration: PropTypes.number,\n  sortClause: PropTypes.string,\n  xAxisTicksOrientation: PropTypes.string,\n  onClick: PropTypes.func,\n  fontSize: PropTypes.number,\n  yTicks: PropTypes.number,\n};\n\nVerticalBarChart.defaultProps = {\n  width: 400,\n  height: 200,\n  marginTop: 0,\n  marginRight: 10,\n  marginBottom: 40,\n  marginLeft: 60,\n  fillColor: appThemeBgColor,\n  yAxisLabel: \"y-axis\",\n  xAxisLabel: \"x-axis\",\n  padding: 0.01,\n  style: {\n    maxWidth: \"100%\",\n    height: \"auto\",\n    boxShadow: \"0px 0 10px #000\",\n    borderRadius: \"10px\",\n  },\n  tooltipPrefix: \"\",\n  tooltipSuffix: \"\",\n  showTooltip: true,\n  data: new Array(20).fill(\"_\").map((_, i) => ({\n    label: `C${i + 1}`,\n    value: Number((Math.random() * 100).toFixed(2)),\n  })),\n  showYaxisLine: true,\n  showXaxis: true,\n  showXaxisLabel: true,\n  showYaxis: true,\n  showYaxisLabel: true,\n  showAnimation: true,\n  animationDuration: 1000,\n  sortClause: \"\",\n  xAxisTicksOrientation: \"horizontal\",\n  fontSize: 14,\n  yTicks: 6,\n  onClick: () => {},\n};\n\nexport default VerticalBarChart;\n","import * as d3 from \"d3\";\n\nconst appThemeBgColor = \"#c2d82e\";\nconst appThemeColor = \"#000000\";\nconst successColor = \"#198754\";\nconst dangerColor = \"#dc3545\";\nconst warningColor = \"#ffc107\";\nconst infoColor = \"#0dcaf0\";\nconst tooltip = d3\n  .select(\"body\")\n  .append(\"div\")\n  .attr(\"class\", \"tooltip\")\n  .attr(\"role\", \"tooltip\")\n  .style(\"position\", \"absolute\")\n  .style(\"background\", \"#222222\")\n  .style(\"border-radius\", \"5px\")\n  .style(\"color\", \"#ffffff\");\n\nexport {\n  tooltip,\n  appThemeBgColor,\n  appThemeColor,\n  successColor,\n  dangerColor,\n  warningColor,\n  infoColor,\n};\n"],"sourceRoot":""}