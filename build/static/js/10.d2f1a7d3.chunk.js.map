{"version":3,"sources":["components/shared/D3/PieChart.js"],"names":["PieChart","props","svgRef","useRef","width","height","tooltipPrefix","tooltipSuffix","fillColor","fontColor","showTooltip","data","style","fontSize","showXaxisLabel","showYaxisLabel","sortClause","showAnimation","className","onClick","lineColor","useEffect","orderByData","arguments","length","undefined","sort","a","b","value","sortBy","color","d3","domain","range","interpolate","pie","d","arc","innerRadius","outerRadius","Math","min","labelRadius","arcLabel","arcs","sliceProportion","reduce","Number","svg","current","attr","concat","append","selectAll","join","on","i","e","_d$data","_d$data2","tooltip","html","label","toFixed","toLocaleString","pageX","pageY","remove","centroid","call","text","filter","endAngle","startAngle","JSON","stringify","_jsx","ref","defaultProps","pieChartProps"],"mappings":"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","file":"static/js/10.d2f1a7d3.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { tooltip } from \"./constants\";\nimport PropTypes from \"prop-types\";\nimport { pieChartProps } from \"./propsData\";\n\nconst PieChart = props => {\n  const svgRef = useRef(null);\n  const {\n    width,\n    height,\n    tooltipPrefix,\n    tooltipSuffix,\n    fillColor,\n    fontColor,\n    showTooltip,\n    data,\n    style,\n    fontSize,\n    showXaxisLabel,\n    showYaxisLabel,\n    sortClause,\n    showAnimation,\n    className,\n    onClick,\n    lineColor,\n  } = props;\n\n  const sortBy = (clause = null) => {\n    switch (clause) {\n      case \"desc\":\n        return data.sort((a, b) => b.value - a.value);\n      case \"asc\":\n        return data.sort((a, b) => a.value - b.value);\n      default:\n        return data;\n    }\n  };\n\n  useEffect(() => {\n    const orderByData = sortBy(sortClause);\n\n    // Create the color scale.\n    // const color = d3\n    //   .scaleOrdinal()\n    //   .domain(data.map(d => d.label))\n    //   .range(\n    //     d3\n    //       .quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), data.length)\n    //       .reverse(),\n    //   );\n\n    // const color = () => fillColor;\n    const color = d3\n      .scaleLinear()\n      .domain([0, data.length])\n      .range(fillColor)\n      .interpolate(d3.interpolateHcl);\n\n    // Create the pie layout and arc generator.\n    const pie = d3\n      .pie()\n      .sort(null)\n      .value(d => d.value);\n\n    const arc = d3\n      .arc()\n      .innerRadius(0)\n      .outerRadius(Math.min(width, height) / 2 - 1);\n\n    const labelRadius = arc.outerRadius()() * 0.8;\n\n    // A separate arc generator for labels.\n    const arcLabel = d3.arc().innerRadius(labelRadius).outerRadius(labelRadius);\n\n    const arcs = pie(orderByData);\n    const sliceProportion = data.reduce(\n      (a, b) => Number(a) + Number(b.value),\n      0,\n    );\n    // Create the SVG container.\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\n        \"class\",\n        ` ${className} ${\n          showAnimation ? \"animate__animated animate__bounce\" : \"\"\n        } `,\n      )\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height]);\n\n    // Add a sector path for each value.\n    svg\n      .append(\"g\")\n      .attr(\"stroke\", lineColor)\n      .selectAll()\n      .data(arcs)\n      .join(\"path\")\n      .on(\"click\", (d, i) => {\n        onClick(d, i);\n      })\n      .attr(\"fill\", (d, i) => color(i))\n      .style(\"box-shadow\", \"0px 0 10px #000\")\n      .attr(\"d\", arc)\n      .on(\"mousemove\", (e, d) => {\n        if (showTooltip) {\n          tooltip.style(\"padding\", \"5px\");\n          tooltip.style(\"opacity\", 1);\n          tooltip\n            .html(\n              `<div>${tooltipPrefix}</div><div>${\n                d.data?.label\n              }</div><div>${Number(d.data?.value)\n                .toFixed(2)\n                .toLocaleString(\"en-US\")}</div><div>${(\n                (d.value / sliceProportion) *\n                100\n              ).toFixed(2)}%</div><div>${tooltipSuffix}</div>`,\n            )\n            .style(\"left\", e.pageX + 15 + \"px\")\n            .style(\"top\", e.pageY - 40 + \"px\");\n        }\n      })\n      .on(\"mouseout\", d => {\n        tooltip.style(\"padding\", 0);\n        tooltip.style(\"opacity\", 0);\n      });\n\n    // Create a new arc generator to place a label close to the edge.\n    // The label shows the value if there is enough room.\n    svg.selectAll(`#arcs`).remove();\n    svg\n      .append(\"g\")\n      .attr(\"id\", \"arcs\")\n      .attr(\"text-anchor\", \"middle\")\n      .selectAll()\n      .data(arcs)\n      .join(\"text\")\n      .attr(\"transform\", d => `translate(${arcLabel.centroid(d)})`)\n      .call(text =>\n        text\n          .append(\"tspan\")\n          .attr(\"y\", \"-0.4em\")\n          .attr(\"font-weight\", \"bold\")\n          .text(d => (showXaxisLabel ? d.data.label : \"\"))\n          .attr(\"font-size\", fontSize)\n          .attr(\"fill\", fontColor),\n      )\n      .call(text =>\n        text\n          .filter(d => d.endAngle - d.startAngle > 0.25)\n          .append(\"tspan\")\n          .attr(\"x\", 0)\n          .attr(\"y\", \"0.7em\")\n          .attr(\"fill-opacity\", 0.7)\n          .text(d =>\n            showYaxisLabel ? d.data.value.toLocaleString(\"en-US\") : \"\",\n          )\n          .attr(\"font-size\", fontSize)\n          .attr(\"fill\", fontColor),\n      );\n  }, [JSON.stringify(props)]);\n\n  return <svg style={style} ref={svgRef}></svg>;\n};\n\nPieChart.propTypes = {\n  id: PropTypes.string,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  tooltipPrefix: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  showTooltip: PropTypes.bool,\n  fillColor: PropTypes.array,\n  fontColor: PropTypes.string,\n  data: PropTypes.array,\n  style: PropTypes.object,\n  fontSize: PropTypes.number,\n  showXaxisLabel: PropTypes.bool,\n  showYaxisLabel: PropTypes.bool,\n  sortClause: PropTypes.string,\n  showAnimation: PropTypes.bool,\n  onClick: PropTypes.func,\n  lineColor: PropTypes.string,\n  className: PropTypes.string,\n};\nPieChart.defaultProps = pieChartProps;\n\nexport default PieChart;\n"],"sourceRoot":""}