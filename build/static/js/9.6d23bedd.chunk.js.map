{"version":3,"sources":["components/shared/D3/PannableChart.js"],"names":["PannableChart","props","svgRef","useRef","width","height","marginTop","marginRight","marginBottom","marginLeft","fillColor","yAxisLabel","style","data","showYaxisLine","showXaxis","showYaxis","showYaxisLabel","yTicks","useEffect","length","parent","d3","current","select","nodes","totalWidth","x","domain","d","label","range","y","value","nice","area","curve","y0","y1","append","attr","concat","call","ticks","g","remove","clone","text","svg","every","tickSizeOuter","datum","JSON","stringify","_jsx","ref","defaultProps","pannableChartProps"],"mappings":"6GAAA,yCAKMA,EAAgB,SAAAC,GACpB,IAAMC,EAASC,iBAAO,MAEpBC,EAeEH,EAfFG,MACAC,EAcEJ,EAdFI,OACAC,EAaEL,EAbFK,UACAC,EAYEN,EAZFM,YACAC,EAWEP,EAXFO,aACAC,EAUER,EAVFQ,WACAC,EASET,EATFS,UACAC,EAQEV,EARFU,WACAC,EAOEX,EAPFW,MACAC,EAMEZ,EANFY,KACAC,EAKEb,EALFa,cACAC,EAIEd,EAJFc,UACAC,EAGEf,EAHFe,UACAC,EAEEhB,EAFFgB,eACAC,EACEjB,EADFiB,OAuFF,OApFAC,qBAAU,WACR,GAAIN,EAAKO,OAAS,EAAG,CACnB,IAAMC,EAASC,IAAUpB,EAAOqB,SAChC,GAA4C,IAAxCF,EAAOG,OAAO,OAAOC,QAAQL,OAAc,CAC7C,IAAMM,EAAqB,EAARtB,EAGbuB,EAAIL,MAEPM,OAAON,IAAUT,GAAM,SAAAgB,GAAC,OAAIA,EAAEC,KAAK,KACnCC,MAAM,CAACtB,EAAYiB,EAAanB,IAE7ByB,EAAIV,MAEPM,OAAO,CAAC,EAAGN,IAAOT,GAAM,SAAAgB,GAAC,OAAIA,EAAEI,KAAK,MACpCC,KAAK,GACLH,MAAM,CAAC1B,EAASG,EAAcF,IAG3B6B,EAAOb,MAEVc,MAAMd,KACNK,GAAE,SAAAE,GAAC,OAAIF,EAAEE,EAAEC,MAAM,IACjBO,GAAGL,EAAE,IACLM,IAAG,SAAAT,GAAC,OAAIG,EAAEH,EAAEI,MAAM,IAErBZ,EACGkB,OAAO,OACPC,KAAK,QAASpC,GACdoC,KAAK,SAAUnC,GACfO,MAAM,WAAY,YAClBA,MAAM,iBAAkB,QACxBA,MAAM,UAAW,GACjB2B,OAAO,KACPC,KAAK,YAAY,aAADC,OAAehC,EAAU,QACzCiC,KAAK1B,EAAYM,IAAYU,GAAGW,MAAMzB,GAAU,WAAO,GACvDwB,MAAK,SAAAE,GAAC,OAAM9B,EAA+C8B,EAA/BA,EAAEpB,OAAO,WAAWqB,QAAY,IAC5DH,MAAK,SAAAE,GAAC,OACL3B,EACI2B,EACGpB,OAAO,2BACPsB,QACAN,KAAK,IAAK,GACVA,KAAK,cAAe,SACpBA,KAAK,cAAe,QACpBO,KAAKpC,GACRiC,CAAC,IAMT,IAKMI,EALO3B,EACVkB,OAAO,OACP3B,MAAM,aAAc,UACpBA,MAAM,6BAA8B,SAGpC2B,OAAO,OACPC,KAAK,QAASd,GACdc,KAAK,SAAUnC,GACfO,MAAM,UAAW,SAEhBG,GACFiC,EACGT,OAAO,KACPC,KAAK,YAAY,eAADC,OAAiBpC,EAASG,EAAY,MACtDkC,KACCpB,IACcK,GACXgB,MAAMrB,IAAY2B,MAAMpC,EAAKO,OAAShB,IACtC8C,cAAc,IAGvBF,EACGT,OAAO,QACPC,KAAK,QAAS,QACdW,MAAMtC,GACN2B,KAAK,OAAQ9B,GACb8B,KAAK,IAAKL,EACf,CACF,CACF,GAAG,CAACiB,KAAKC,UAAUpD,KAEZqD,cAAA,OAAK1C,MAAOA,EAAO2C,IAAKrD,GACjC,EAmBAF,EAAcwD,aAAeC,IAEdzD,W","file":"static/js/9.6d23bedd.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\nimport { pannableChartProps } from \"./propsData\";\n\nconst PannableChart = props => {\n  const svgRef = useRef(null);\n  const {\n    width,\n    height,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft,\n    fillColor,\n    yAxisLabel,\n    style,\n    data,\n    showYaxisLine,\n    showXaxis,\n    showYaxis,\n    showYaxisLabel,\n    yTicks,\n  } = props;\n\n  useEffect(() => {\n    if (data.length > 0) {\n      const parent = d3.select(svgRef.current);\n      if (parent.select(\"svg\").nodes().length === 0) {\n        const totalWidth = width * 6;\n\n        // Create the horizontal (x) scale over the total width.\n        const x = d3\n          .scaleUtc()\n          .domain(d3.extent(data, d => d.label))\n          .range([marginLeft, totalWidth - marginRight]);\n        // Create the vertical (x) scale.\n        const y = d3\n          .scaleLinear()\n          .domain([0, d3.max(data, d => d.value)])\n          .nice(6)\n          .range([height - marginBottom, marginTop]);\n\n        // Define an area shape generator.\n        const area = d3\n          .area()\n          .curve(d3.curveStep)\n          .x(d => x(d.label))\n          .y0(y(0))\n          .y1(d => y(d.value));\n\n        parent\n          .append(\"svg\")\n          .attr(\"width\", width)\n          .attr(\"height\", height)\n          .style(\"position\", \"absolute\")\n          .style(\"pointer-events\", \"none\")\n          .style(\"z-index\", 1)\n          .append(\"g\")\n          .attr(\"transform\", `translate(${marginLeft},0)`)\n          .call(showYaxis ? d3.axisLeft(y).ticks(yTicks) : () => {})\n          .call(g => (!showYaxisLine ? g.select(\".domain\").remove() : g))\n          .call(g =>\n            showYaxisLabel\n              ? g\n                  .select(\".tick:last-of-type text\")\n                  .clone()\n                  .attr(\"x\", 3)\n                  .attr(\"text-anchor\", \"start\")\n                  .attr(\"font-weight\", \"bold\")\n                  .text(yAxisLabel)\n              : g,\n          );\n\n        // Create the svg with the vertical axis.\n\n        // Create a scrolling div containing the area shape and the horizontal axis.\n        const body = parent\n          .append(\"div\")\n          .style(\"overflow-x\", \"scroll\")\n          .style(\"-webkit-overflow-scrolling\", \"touch\");\n\n        const svg = body\n          .append(\"svg\")\n          .attr(\"width\", totalWidth)\n          .attr(\"height\", height)\n          .style(\"display\", \"block\");\n\n        if (showXaxis) {\n          svg\n            .append(\"g\")\n            .attr(\"transform\", `translate(0,${height - marginBottom})`)\n            .call(\n              d3\n                .axisBottom(x)\n                .ticks(d3.utcMonth.every(data.length / width))\n                .tickSizeOuter(0),\n            );\n        }\n        svg\n          .append(\"path\")\n          .attr(\"class\", \"path\")\n          .datum(data)\n          .attr(\"fill\", fillColor)\n          .attr(\"d\", area);\n      }\n    }\n  }, [JSON.stringify(props)]);\n\n  return <div style={style} ref={svgRef} />;\n};\n\nPannableChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  fillColor: PropTypes.string,\n  yAxisLabel: PropTypes.string,\n  style: PropTypes.object,\n  data: PropTypes.array,\n  showYaxisLine: PropTypes.bool,\n  showXaxis: PropTypes.bool,\n  showYaxis: PropTypes.bool,\n  showYaxisLabel: PropTypes.bool,\n  yTicks: PropTypes.number,\n};\nPannableChart.defaultProps = pannableChartProps;\n\nexport default PannableChart;\n"],"sourceRoot":""}