{"version":3,"sources":["components/shared/D3/VoronoiChart.js"],"names":["VoronoiChart","_ref","width","height","data","markerSize","lineColor","fillColor","showTooltip","tooltipPrefix","tooltipSuffix","className","showAnimation","animationClass","xScale","useMemo","d3","domain","d","x","range","yScale","y","delaunay","formattedData","map","Delaunay","from","_useState","useState","_useState2","_slicedToArray","hoveredItem","setHoveredItem","voronoi","voronoiCells","i","path","renderCell","_jsx","stroke","fill","opacity","onMouseOver","allCircles","_jsxs","React","Fragment","children","cx","cy","r","concat","style","zIndex","strokeWidth","e","tooltip","html","label","pageX","pageY","onMouseLeave","defaultProps","voronoiChartProps"],"mappings":"6NAOaA,EAAe,SAAfA,aAAYC,GAalB,IAZLC,EAAKD,EAALC,MACAC,EAAMF,EAANE,OACAC,EAAIH,EAAJG,KACAC,EAAUJ,EAAVI,WACAC,EAASL,EAATK,UACAC,EAASN,EAATM,UACAC,EAAWP,EAAXO,YACAC,EAAaR,EAAbQ,cACAC,EAAaT,EAAbS,cACAC,EAASV,EAATU,UACAC,EAAaX,EAAbW,cACAC,EAAcZ,EAAdY,eAEMC,EAASC,mBAAQ,WACrB,OAAOC,MAEJC,OAAO,CAAC,EAAGD,IAAOZ,GAAM,SAAAc,GAAC,OAAIA,EAAEC,CAAC,MAChCC,MAAM,CAAC,EAAGlB,GACf,GAAG,CAACA,EAAOE,IAELiB,EAASN,mBAAQ,WACrB,OAAOC,MAEJC,OAAO,CAAC,EAAGD,IAAOZ,GAAM,SAAAc,GAAC,OAAIA,EAAEI,CAAC,MAChCF,MAAM,CAAC,EAAGjB,GACf,GAAG,CAACA,EAAQC,IAENmB,EAAWR,mBAAQ,WACvB,IAAMS,EAAgBpB,EAAKqB,KAAI,SAAAP,GAAC,MAAI,CAACJ,EAAOI,EAAEC,GAAIE,EAAOH,EAAEI,GAAG,IAC9D,OAAOI,IAASC,KAAKH,EACvB,GAAG,CAACV,EAAQO,EAAQjB,IAEpBwB,EAAsCC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAA7CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAE5BI,EAAUnB,mBAAQ,WACtB,OAAOQ,EAASW,QAAQ,CAAC,EAAG,EAAGhC,EAAOC,GACxC,GAAG,CAACoB,EAAUrB,EAAOC,IAEfgC,EAAe/B,EAAKqB,KAAI,SAACP,EAAGkB,GAChC,IAAMC,EAAOH,EAAQI,WAAWF,GAChC,OACEG,cAAA,QAEErB,EAAGmB,EACHG,OAAQlC,EACRmC,KAAM,eACNC,QAAS,GACTC,YAAa,SAAAA,cACXV,EAAeG,EACjB,GAPKA,EAUX,IAEMQ,EAAaxC,EAAKqB,KAAI,SAACP,EAAGkB,GAC9B,OACES,eAACC,IAAMC,SAAQ,CAAAC,SAAA,CACbT,cAAA,UACEU,GAAInC,EAAOI,EAAEC,GACb+B,GAAI7B,EAAOH,EAAEI,GACbmB,KAAMlC,EACN4C,EAAG9C,EACHM,UAAS,GAAAyC,OAAKzC,EAAS,KAAAyC,OAAIxC,EAAgBC,EAAiB,MAE7DmB,IAAgBI,GACfG,cAAA,UACEU,GAAInC,EAAOI,EAAEC,GACb+B,GAAI7B,EAAOH,EAAEI,GACb6B,EAAG9C,EACHoC,KAAK,cACLD,OAAO,MACPa,MAAO,CAAEC,OAAQ,GACjBC,YAAa,EACbZ,YAAa,SAAAA,YAAAa,GACPhD,IACFiD,IAAQJ,MAAM,UAAW,OACzBI,IAAQJ,MAAM,UAAW,IACzBI,IACGC,KAAK,GAADN,OAAI3C,EAAa,KAAA2C,OAAIlC,EAAEyC,MAAK,KAAAP,OAAI1C,IACpC2C,MAAM,OAAQG,EAAEI,MAAQ,EAAI,MAC5BP,MAAM,MAAOG,EAAEK,MAAQ,GAAK,MAEnC,EACAC,aAAc,SAAAA,eACZL,IAAQJ,MAAM,UAAW,GACzBI,IAAQJ,MAAM,UAAW,EAC3B,MA9BejB,EAmCzB,IAEA,OACES,eAAA,OAAK3C,MAAOA,EAAOC,OAAQA,EAAO6C,SAAA,CAC/Bb,EACAS,IAGP,EAgCA5C,EAAa+D,aAAeC,IAEbhE,W","file":"static/js/18.07afcbbf.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { Delaunay } from \"d3\";\nimport PropTypes from \"prop-types\";\nimport { voronoiChartProps } from \"./propsData\";\nimport { tooltip } from \"./constants\";\n\nexport const VoronoiChart = ({\n  width,\n  height,\n  data,\n  markerSize,\n  lineColor,\n  fillColor,\n  showTooltip,\n  tooltipPrefix,\n  tooltipSuffix,\n  className,\n  showAnimation,\n  animationClass,\n}) => {\n  const xScale = useMemo(() => {\n    return d3\n      .scaleLinear()\n      .domain([0, d3.max(data, d => d.x)])\n      .range([0, width]);\n  }, [width, data]);\n\n  const yScale = useMemo(() => {\n    return d3\n      .scaleLinear()\n      .domain([0, d3.max(data, d => d.y)])\n      .range([0, height]);\n  }, [height, data]);\n\n  const delaunay = useMemo(() => {\n    const formattedData = data.map(d => [xScale(d.x), yScale(d.y)]);\n    return Delaunay.from(formattedData);\n  }, [xScale, yScale, data]);\n\n  const [hoveredItem, setHoveredItem] = useState(null);\n\n  const voronoi = useMemo(() => {\n    return delaunay.voronoi([0, 0, width, height]);\n  }, [delaunay, width, height]);\n\n  const voronoiCells = data.map((d, i) => {\n    const path = voronoi.renderCell(i);\n    return (\n      <path\n        key={i}\n        d={path}\n        stroke={lineColor}\n        fill={\"currentColor\"}\n        opacity={0.1}\n        onMouseOver={() => {\n          setHoveredItem(i);\n        }}\n      />\n    );\n  });\n\n  const allCircles = data.map((d, i) => {\n    return (\n      <React.Fragment key={i}>\n        <circle\n          cx={xScale(d.x)}\n          cy={yScale(d.y)}\n          fill={fillColor}\n          r={markerSize}\n          className={`${className} ${showAnimation ? animationClass : \"\"}`}\n        />\n        {hoveredItem === i && (\n          <circle\n            cx={xScale(d.x)}\n            cy={yScale(d.y)}\n            r={markerSize}\n            fill='transparent'\n            stroke='red'\n            style={{ zIndex: 1 }}\n            strokeWidth={3}\n            onMouseOver={e => {\n              if (showTooltip) {\n                tooltip.style(\"padding\", \"5px\");\n                tooltip.style(\"opacity\", 0.9);\n                tooltip\n                  .html(`${tooltipPrefix} ${d.label} ${tooltipSuffix}`)\n                  .style(\"left\", e.pageX + 5 + \"px\")\n                  .style(\"top\", e.pageY - 30 + \"px\");\n              }\n            }}\n            onMouseLeave={() => {\n              tooltip.style(\"padding\", 0);\n              tooltip.style(\"opacity\", 0);\n            }}\n          />\n        )}\n      </React.Fragment>\n    );\n  });\n\n  return (\n    <svg width={width} height={height}>\n      {voronoiCells}\n      {allCircles}\n    </svg>\n  );\n};\n\nVoronoiChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  markerSize: PropTypes.number,\n  fontSize: PropTypes.number,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  style: PropTypes.object,\n  data: PropTypes.array,\n  yTicks: PropTypes.number,\n  showXaxis: PropTypes.bool,\n  showYaxis: PropTypes.bool,\n  showYaxisLabel: PropTypes.bool,\n  showXaxisLabel: PropTypes.bool,\n  showYaxisLine: PropTypes.bool,\n  showXaxisLine: PropTypes.bool,\n  xAxisLabel: PropTypes.string,\n  yAxisLabel: PropTypes.string,\n  animationClass: PropTypes.string,\n  showAnimation: PropTypes.bool,\n  xAxisTicksOrientation: PropTypes.string,\n  showTooltip: PropTypes.bool,\n  tooltipPrefix: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  className: PropTypes.string,\n};\nVoronoiChart.defaultProps = voronoiChartProps;\n\nexport default VoronoiChart;\n"],"sourceRoot":""}