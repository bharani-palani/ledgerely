{"version":3,"sources":["components/mainApp/errorCatch.js","components/mainApp/ErrorBoundary.js","images/animateLoaderGlobe.svg","App.js","serviceWorker.js","index.js"],"names":["ErrorCatch","props","error","errorInfo","className","JSON","stringify","ErrorBoundary","checkNetwork","window","navigator","onLine","state","isOnline","this","setState","children","React","Component","Root","lazy","AppLoader","style","display","alignItems","justifyContent","height","backgroundImage","logo","backgroundRepeat","backgroundPosition","backgroundSize","width","App","fallback","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA8BeA,MA5Bf,SAAoBC,GAClB,IAAQC,EAAqBD,EAArBC,MAAOC,EAAcF,EAAdE,UACf,OACE,qBAAKC,UAAU,GAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,oBAAf,SACE,qBAAKA,UAAU,uDAAf,SACE,sBAAKA,UAAU,cAAf,UACE,mBAAGA,UAAU,iDACb,uDACA,uEACA,oBAAIA,UAAU,gBAAd,4EAGA,qBAAKA,UAAU,oDAAf,SACGC,KAAKC,UAAUJ,KAElB,qBAAKE,UAAU,+CAAf,SACGC,KAAKC,UAAUH,iBCiBjBI,E,kDAhCd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IAIPO,aAAe,WACd,OAAOC,OAAOC,UAAUC,SAAU,GAJlC,EAAKC,MAAQ,CAAEV,MAAO,KAAMC,UAAW,KAAMU,UAAU,GAFrC,E,qDASnB,c,kCAIA,c,+BAIA,SAAkBX,EAAOC,GACxBW,KAAKC,SAAS,CACbb,MAAOA,EACPC,UAAWA,M,oBAIb,WACC,OAAIW,KAAKF,MAAMT,UACP,cAAC,EAAD,CAAYD,MAAOY,KAAKF,MAAMV,MAAOC,UAAWW,KAAKF,MAAMT,YAE5DW,KAAKb,MAAMe,a,GA7BQC,IAAMC,WCJnB,MAA0B,+CCInCC,EAAOC,gBAAK,kBAAM,uDAQlBC,EAAY,kBAChB,qBACEC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,QALZ,SAQE,qBACEJ,MAAO,CACLK,gBAAgB,OAAD,OAASC,EAAT,KACfC,iBAAkB,YAClBC,mBAAoB,SACpBC,eAAgB,UAChBL,OAAQ,QACRM,MAAO,cAoBAC,MAVf,WACE,OACE,cAAC,EAAD,UACE,cAAC,WAAD,CAAUC,SAAU,cAAC,EAAD,IAApB,SACE,cAACf,EAAD,SC9BYgB,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD4H3C,kBAAmBhC,WACrBA,UAAUiC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.59c773e2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction ErrorCatch(props) {\r\n  const { error, errorInfo } = props;\r\n  return (\r\n    <div className=\"\">\r\n      <div className=\"p-5\">\r\n        <div className=\"position-relative\">\r\n          <div className=\"position-absolute top-50 start-50 translate-middle-x\">\r\n            <div className=\"text-center\">\r\n              <i className=\"fa fa-exclamation-triangle fa-5x text-danger\" />\r\n              <h1>Something went wrong!</h1>\r\n              <h6>Please contact administrator on this.</h6>\r\n              <h6 className=\"error-details\">\r\n                This could be cause of some errors in your design as follows..\r\n              </h6>\r\n              <div className=\"text-danger p-1 border border-danger rounded mb-2\">\r\n                {JSON.stringify(error)}\r\n              </div>\r\n              <div className=\"text-danger p-1 border border-danger rounded\">\r\n                {JSON.stringify(errorInfo)}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ErrorCatch;\r\n","import React from 'react';\r\nimport ErrorCatch from './errorCatch';\r\n\r\n// Note: Error bounday should only be class component. Please dont change.\r\nclass ErrorBoundary extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { error: null, errorInfo: null, isOnline: true };\r\n\t}\r\n\r\n\tcheckNetwork = () => {\r\n\t\treturn window.navigator.onLine || false;\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\t// this.interval = setInterval(() => this.setState({ isOnline: this.checkNetwork() }), 5000);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\t// clearInterval(this.interval);\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tthis.setState({\r\n\t\t\terror: error,\r\n\t\t\terrorInfo: errorInfo\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.errorInfo) {\r\n\t\t\treturn <ErrorCatch error={this.state.error} errorInfo={this.state.errorInfo}  />;\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export default __webpack_public_path__ + \"static/media/animateLoaderGlobe.01d1d872.svg\";","/* eslint-disable no-unused-vars */\r\nimport React, { Suspense, lazy } from 'react';\r\nimport ErrorBoundary from './components/mainApp/ErrorBoundary';\r\nimport logo from './images/animateLoaderGlobe.svg';\r\nconst Root = lazy(() => import('./components/mainApp/Root'));\r\n\r\n// const Root = lazy(() => {\r\n//   return new Promise(resolve => setTimeout(resolve, 2000)).then(() =>\r\n//     import('./components/mainApp/Root')\r\n//   );\r\n// });\r\n\r\nconst AppLoader = () => (\r\n  <div\r\n    style={{\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      height: '95vh',\r\n    }}\r\n  >\r\n    <div\r\n      style={{\r\n        backgroundImage: `url(${logo})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        backgroundSize: 'contain',\r\n        height: '500px',\r\n        width: '500px',\r\n      }}\r\n    ></div>\r\n  </div>\r\n);\r\n\r\n// todo:\r\n// 1. fetch JWT token and store in local storage on any case (may or may not app installed or configured)\r\n// 2. if app connected show root page, but installation not done, show installation page. Configure parameters in DB accordingly\r\n\r\nfunction App() {\r\n  return (\r\n    <ErrorBoundary>\r\n      <Suspense fallback={<AppLoader />}>\r\n        <Root />\r\n      </Suspense>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}