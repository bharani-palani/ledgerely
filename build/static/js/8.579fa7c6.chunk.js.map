{"version":3,"sources":["components/shared/D3/DensityChart/AxisBottom.js","components/shared/D3/DensityChart/index.js"],"names":["AxisBottom","_ref","xScale","pixelsPerTick","fontColor","lineColor","range","ticks","useMemo","width","numberOfTicksTarget","Math","floor","map","value","d3","format","xOffset","_jsxs","_Fragment","children","_jsx","d","join","fill","stroke","_ref2","transform","concat","y2","style","fontSize","textAnchor","DensityChart","height","data","marginTop","marginRight","marginBottom","marginLeft","fillColor","showXaxisLabel","xAxisLabel","showXaxis","animationClass","showAnimation","boundsWidth","boundsHeight","max","apply","_toConsumableArray","v","x","domain","density","kernel","X","k","abs","V","yScale","path","y","curve","lineGenerator","className","strokeWidth","strokeLinejoin","defaultProps","DensityChartData"],"mappings":"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","file":"static/js/8.579fa7c6.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nconst TICK_LENGTH = 6;\n\nconst AxisBottom = ({ xScale, pixelsPerTick, fontColor, lineColor }) => {\n  const range = xScale.range();\n\n  const ticks = useMemo(() => {\n    const width = range[1] - range[0];\n    const numberOfTicksTarget = Math.floor(width / pixelsPerTick);\n\n    return xScale.ticks(numberOfTicksTarget).map(value => ({\n      value: d3.format(\".3s\")(value),\n      xOffset: xScale(value),\n    }));\n  }, [xScale]);\n\n  return (\n    <>\n      <path\n        d={[\"M\", range[0], 0, \"L\", range[1], 0].join(\" \")}\n        fill='none'\n        stroke={lineColor}\n      />\n      {ticks.map(({ value, xOffset }) => (\n        <g key={value} transform={`translate(${xOffset}, 0)`}>\n          <line y2={TICK_LENGTH} stroke={lineColor} />\n          <text\n            key={value}\n            fill={fontColor}\n            style={{\n              fontSize: \"10px\",\n              textAnchor: \"middle\",\n              transform: \"translateY(20px)\",\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n\nexport default AxisBottom;\n","import React, { useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport AxisBottom from \"./AxisBottom\";\nimport { DensityChartData } from \"../mockData\";\nimport PropTypes from \"prop-types\";\n\nfunction kernelDensityEstimator(kernel, X) {\n  return function (V) {\n    return X.map(x => [x, d3.mean(V, v => kernel(x - v))]);\n  };\n}\n\nfunction kernelEpanechnikov(k) {\n  return function (v) {\n    return Math.abs((v /= k)) <= 1 ? (0.75 * (1 - v * v)) / k : 0;\n  };\n}\n\nconst DensityChart = ({\n  width,\n  height,\n  data,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  fillColor,\n  fontColor,\n  lineColor,\n  showXaxisLabel,\n  fontSize,\n  xAxisLabel,\n  showXaxis,\n  animationClass,\n  showAnimation,\n}) => {\n  const boundsWidth = width - marginRight - marginLeft;\n  const boundsHeight = height - marginTop - marginBottom;\n\n  const xScale = useMemo(() => {\n    const max = Math.max(...data.map(v => v.x));\n    return d3\n      .scaleLinear()\n      .domain([0, max])\n      .range([10, boundsWidth - 10]);\n  }, [data, boundsWidth]);\n\n  // Compute kernel density estimation\n  const density = useMemo(() => {\n    const kde = kernelDensityEstimator(kernelEpanechnikov(7), xScale.ticks(40));\n    return kde(data.map(v => v.x));\n  }, [xScale]);\n\n  const yScale = useMemo(() => {\n    const max = Math.max(...density.map(d => d[1]));\n    return d3.scaleLinear().range([boundsHeight, 0]).domain([0, max]);\n  }, [data, boundsHeight]);\n\n  const path = useMemo(() => {\n    const lineGenerator = d3\n      .line()\n      .x(d => xScale(d[0]))\n      .y(d => yScale(d[1]))\n      .curve(d3.curveBasis);\n    return lineGenerator(density);\n  }, [density, xScale, yScale]);\n\n  return (\n    <svg\n      width={width}\n      height={height}\n      className={`${showAnimation ? animationClass : \"\"}`}\n    >\n      <g\n        width={boundsWidth}\n        height={boundsHeight}\n        transform={`translate(${[marginLeft, marginTop].join(\",\")})`}\n      >\n        <path\n          d={path}\n          fill={fillColor}\n          stroke={fillColor}\n          strokeWidth={1}\n          strokeLinejoin='round'\n        />\n        {showXaxis && (\n          <g transform={`translate(0, ${boundsHeight})`}>\n            <AxisBottom\n              xScale={xScale}\n              pixelsPerTick={40}\n              fontColor={fontColor}\n              lineColor={lineColor}\n            />\n          </g>\n        )}\n      </g>\n      {showXaxisLabel && (\n        <text\n          fontSize={fontSize}\n          x={width / 2}\n          y={height - 10}\n          fill={fontColor}\n          style={{ textAnchor: \"middle\" }}\n        >\n          {xAxisLabel}\n        </text>\n      )}\n    </svg>\n  );\n};\n\nDensityChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  data: PropTypes.array,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  showXaxisLabel: PropTypes.bool,\n  fontSize: PropTypes.number,\n  xAxisLabel: PropTypes.string,\n  showXaxis: PropTypes.bool,\n  animationClass: PropTypes.string,\n  showAnimation: PropTypes.bool,\n};\nDensityChart.defaultProps = DensityChartData;\n\nexport default DensityChart;\n"],"sourceRoot":""}