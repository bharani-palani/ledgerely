{"version":3,"sources":["components/shared/D3/StackedVerticalBarChart.js"],"names":["StackedVerticalBarChart","props","svgRef","useRef","width","height","marginTop","marginRight","marginBottom","marginLeft","fillColor","fontColor","lineColor","padding","style","showTooltip","data","showYaxis","showYaxisLine","showYaxisLabel","showXaxis","showXaxisLabel","showXaxisLine","sortClause","showAnimation","animationDuration","onClick","fontSize","yTicks","useEffect","array","validData","filter","o","hasOwnProperty","length","series","d3","keys","map","d","where","value","_ref","key","_D$get","_slicedToArray","get","label","order","arguments","undefined","D","_toConsumableArray","Set","sortBy","x","domain","range","y","rangeRound","color","interpolate","svg","current","attr","selectAll","remove","append","join","i","on","e","tooltip","html","concat","isNaN","formatValue","pageX","pageY","transition","duration","bandwidth","call","tickSizeOuter","g","ticks","JSON","stringify","_jsx","ref","defaultProps","stackedVerticalBarChartProps"],"mappings":"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","file":"static/js/11.48d8fe72.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { tooltip } from \"./constants\";\nimport PropTypes from \"prop-types\";\nimport { stackedVerticalBarChartProps } from \"./propsData\";\n\nconst StackedVerticalBarChart = props => {\n  const svgRef = useRef(null);\n  const {\n    width,\n    height,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft,\n    fillColor,\n    fontColor,\n    lineColor,\n    padding,\n    style,\n    showTooltip,\n    data,\n    showYaxis,\n    showYaxisLine,\n    showYaxisLabel,\n    showXaxis,\n    showXaxisLabel,\n    showXaxisLine,\n    sortClause,\n    showAnimation,\n    animationDuration,\n    onClick,\n    fontSize,\n    yTicks,\n  } = props;\n\n  const sortBy = (clause = null) => {\n    switch (clause) {\n      case \"desc\":\n        return d3.groupSort(\n          data,\n          D => -d3.sum(D, d => d.value),\n          d => d.label,\n        );\n      case \"asc\":\n        return d3.groupSort(\n          data,\n          D => d3.sum(D, d => d.value),\n          d => d.label,\n        );\n      default:\n        return [...new Set(data.map(d => d.label))];\n    }\n  };\n\n  const uniqueArray = array => {\n    const exists =\n      array.filter(o => {\n        return (\n          o.hasOwnProperty(\"where\") &&\n          o.hasOwnProperty(\"label\") &&\n          o.hasOwnProperty(\"value\")\n        );\n      }).length > 0;\n    return exists ? array : [];\n  };\n\n  useEffect(() => {\n    // Determine the series that need to be stacked.\n    const validData = uniqueArray(data);\n    const series = d3\n      .stack()\n      .keys(d3.union(validData.map(d => d.where))) // distinct series keys, in input order\n      .value(([, D], key) => D.get(key)?.value)(\n      // get value for each series key and stack\n      d3.index(\n        validData,\n        d => d.label,\n        d => d.where,\n      ),\n    ); // group by stack then series key\n\n    // Prepare the scales for positional and color encodings.\n    const order = sortBy(sortClause);\n    const x = d3\n      .scaleBand()\n      .domain(order)\n      .range([marginLeft, width - marginRight])\n      .padding(padding);\n\n    const y = d3\n      .scaleLinear()\n      .domain([\n        0,\n        d3.max(series, d => {\n          return d3.max(d, d => d[1]);\n        }),\n      ])\n      .rangeRound([height - marginBottom, marginTop]);\n\n    const color = d3\n      .scaleLinear()\n      .domain([0, series.map(d => d.key).length])\n      .range(fillColor)\n      .interpolate(d3.interpolateHcl);\n\n    // const color = () => fillColor;\n\n    // A function to format the value in the tooltip.\n    const formatValue = x => (isNaN(x) ? \"N/A\" : x);\n\n    // Create the SVG container.\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height + 30)\n      .attr(\"viewBox\", [0, 0, width, height]);\n\n    // Append a group for each series, and a rect for each element in the series.\n    svg.selectAll(`g`).remove();\n    svg\n      .append(\"g\")\n      .selectAll()\n      .data(series)\n      .join(\"g\")\n      .attr(\"fill\", (d, i) => {\n        return color(i);\n      })\n      .selectAll(\"rect\")\n      .data(D => D.map(d => ((d.key = D.key), d)))\n      .join(\"rect\")\n      .on(\"click\", (d, i) => {\n        onClick(d, i);\n      })\n      .on(\"mousemove\", (e, d) => {\n        if (showTooltip) {\n          tooltip.style(\"padding\", \"5px\");\n          tooltip.style(\"opacity\", 1);\n          tooltip\n            .html(() => {\n              return `${d.data[0]} <br /> ${d.key} <br /> ${formatValue(\n                d.data[1].get(d.key).value,\n              )}`;\n            })\n            .style(\"left\", e.pageX + 10 + \"px\")\n            .style(\"top\", e.pageY - 30 + \"px\");\n        }\n      })\n      .on(\"mouseout\", d => {\n        tooltip.style(\"padding\", 0);\n        tooltip.style(\"opacity\", 0);\n      })\n      .transition()\n      .duration((d, i) => (showAnimation ? animationDuration + i * 50 : i))\n      .attr(\"x\", d => x(d.data[0]))\n      .attr(\"y\", d => y(d[1]))\n      .attr(\"height\", d => y(d[0]) - y(d[1]))\n      .attr(\"width\", x.bandwidth());\n\n    // Append the horizontal axis.\n    if (showXaxis) {\n      svg\n        .append(\"g\")\n        .attr(\"transform\", `translate(0,${height - marginBottom})`)\n        .call(showXaxisLabel ? d3.axisBottom(x).tickSizeOuter(0) : () => {})\n        .call(g => g.selectAll(\".tick line\").attr(\"stroke\", lineColor))\n        .call(g => (showXaxisLine ? g : g.selectAll(\".domain\").remove()))\n        .selectAll(\"text\")\n        .attr(\"font-size\", fontSize)\n        .attr(\"fill\", fontColor);\n    }\n\n    // Append the vertical axis.\n    if (showYaxis) {\n      svg\n        .append(\"g\")\n        .attr(\"transform\", `translate(${marginLeft},0)`)\n        .call(showYaxisLabel ? d3.axisLeft(y).ticks(yTicks) : () => {})\n        .call(g => g.selectAll(\".tick line\").attr(\"stroke\", lineColor))\n        .call(g => (showYaxisLine ? g : g.selectAll(\".domain\").remove()))\n        .selectAll(\"text\")\n        .attr(\"font-size\", fontSize)\n        .attr(\"fill\", fontColor);\n    }\n    // set axis line color\n    svg.selectAll(\".domain\").attr(\"stroke\", lineColor);\n  }, [JSON.stringify(props)]);\n  return <svg style={style} ref={svgRef} />;\n};\n\nStackedVerticalBarChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  showTooltip: PropTypes.bool,\n  style: PropTypes.object,\n  padding: PropTypes.number,\n  data: PropTypes.array,\n  yTicks: PropTypes.number,\n  showAnimation: PropTypes.bool,\n  animationDuration: PropTypes.number,\n  sortClause: PropTypes.string,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  showYaxis: PropTypes.bool,\n  showXaxis: PropTypes.bool,\n  showXaxisLabel: PropTypes.bool,\n  showXaxisLine: PropTypes.bool,\n  showYaxisLine: PropTypes.bool,\n  showYaxisLabel: PropTypes.bool,\n  onClick: PropTypes.func,\n  fontSize: PropTypes.number,\n};\nStackedVerticalBarChart.defaultProps = stackedVerticalBarChartProps;\n\nexport default StackedVerticalBarChart;\n"],"sourceRoot":""}