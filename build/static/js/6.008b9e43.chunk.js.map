{"version":3,"sources":["components/shared/D3/ScatterPlot/scatterplot.module.css","components/shared/D3/ScatterPlot/AxisLeft.js","components/shared/D3/ScatterPlot/AxisBottom.js","components/shared/D3/ScatterPlot/index.js"],"names":["module","exports","AxisLeft","_ref","yScale","pixelsPerTick","width","fontSize","fontColor","lineColor","xTicks","showXaxisLine","showYaxis","range","ticks","useMemo","height","numberOfTicksTarget","Math","floor","map","value","yOffset","_jsx","_Fragment","children","_ref2","_jsxs","transform","concat","shapeRendering","x1","x2","stroke","strokeWidth","style","textAnchor","fill","AxisBottom","xScale","yTicks","showYaxisLine","showXaxis","d3","format","xOffset","i","y1","y2","Scatterplot","data","marginTop","marginRight","marginBottom","marginLeft","fillColor","markerSize","showTooltip","tooltipPrefix","tooltipSuffix","yAxisLabel","xAxisLabel","showYaxisLabel","showXaxisLabel","showAnimation","animationClass","boundsWidth","boundsHeight","_useState","useState","_useState2","_slicedToArray","hoveredGroup","setHoveredGroup","domain","min","apply","_toConsumableArray","v","y","max","x","allGroups","d","String","group","colorScale","allShapes","className","styles","scatterplotCircle","dimmed","r","cx","cy","onMouseOver","e","tooltip","html","subGroup","size","pageX","pageY","onMouseLeave","join","defaultProps","scatterPlotChartProps"],"mappings":"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","file":"static/js/6.008b9e43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scatterplotCircle\":\"scatterplot_scatterplotCircle__1qlsx\",\"dimmed\":\"scatterplot_dimmed__2KlUQ\"};","import React, { useMemo } from \"react\";\n\nconst AxisLeft = ({\n  yScale,\n  pixelsPerTick,\n  width,\n  fontSize,\n  fontColor,\n  lineColor,\n  xTicks,\n  showXaxisLine,\n  showYaxis,\n}) => {\n  const range = yScale.range();\n\n  const ticks = useMemo(() => {\n    const height = range[0] - range[1];\n    const numberOfTicksTarget = Math.floor(height / pixelsPerTick);\n\n    return yScale.ticks(numberOfTicksTarget).map(value => ({\n      value,\n      yOffset: yScale(value),\n    }));\n  }, [yScale]);\n\n  return (\n    <>\n      {ticks.map(({ value, yOffset }) => (\n        <g\n          key={value}\n          transform={`translate(0, ${yOffset})`}\n          shapeRendering={\"crispEdges\"}\n        >\n          {showXaxisLine && (\n            <line\n              x1={-xTicks}\n              x2={width + xTicks}\n              stroke={lineColor}\n              strokeWidth={0.5}\n            />\n          )}\n          {showYaxis && (\n            <text\n              key={value}\n              style={{\n                fontSize: `${fontSize}px`,\n                textAnchor: \"middle\",\n                transform: \"translateX(-20px)\",\n                fill: fontColor,\n              }}\n            >\n              {value}\n            </text>\n          )}\n        </g>\n      ))}\n    </>\n  );\n};\n\nexport default AxisLeft;\n","import React, { useMemo } from \"react\";\n\nconst AxisBottom = ({\n  xScale,\n  pixelsPerTick,\n  height,\n  fontSize,\n  fontColor,\n  lineColor,\n  yTicks,\n  showYaxisLine,\n  showXaxis,\n}) => {\n  const range = xScale.range();\n  const ticks = useMemo(() => {\n    const width = range[1] - range[0];\n    const numberOfTicksTarget = Math.floor(width / pixelsPerTick);\n    return xScale.ticks(numberOfTicksTarget).map(value => ({\n      value: d3.format(\".2s\")(value),\n      xOffset: xScale(value),\n    }));\n  }, [xScale]);\n\n  return (\n    <>\n      {ticks.map(({ value, xOffset }, i) => (\n        <g\n          key={i}\n          transform={`translate(${xOffset}, 0)`}\n          shapeRendering={\"crispEdges\"}\n        >\n          {showYaxisLine && (\n            <line\n              y1={yTicks}\n              y2={-height - yTicks}\n              stroke={lineColor}\n              strokeWidth={1}\n            />\n          )}\n          {showXaxis && (\n            <text\n              key={value}\n              style={{\n                fontSize: `${fontSize}px`,\n                textAnchor: \"middle\",\n                transform: \"translateY(20px)\",\n                fill: fontColor,\n              }}\n            >\n              {value}\n            </text>\n          )}\n        </g>\n      ))}\n    </>\n  );\n};\n\nexport default AxisBottom;\n","import * as d3 from \"d3\";\nimport styles from \"./scatterplot.module.css\";\nimport AxisLeft from \"./AxisLeft\";\nimport AxisBottom from \"./AxisBottom\";\nimport React, { useState } from \"react\";\nimport { scatterPlotChartProps } from \"../propsData\";\nimport { tooltip } from \"../constants\";\nimport PropTypes from \"prop-types\";\n\nconst Scatterplot = ({\n  width,\n  height,\n  data,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  fillColor,\n  xTicks,\n  yTicks,\n  markerSize,\n  fontSize,\n  fontColor,\n  lineColor,\n  showTooltip,\n  tooltipPrefix,\n  tooltipSuffix,\n  yAxisLabel,\n  xAxisLabel,\n  showYaxisLabel,\n  showXaxisLabel,\n  showYaxisLine,\n  showXaxisLine,\n  showAnimation,\n  animationClass,\n  showXaxis,\n  showYaxis,\n}) => {\n  const boundsWidth = width - marginRight - marginLeft;\n  const boundsHeight = height - marginTop - marginBottom;\n  const [hoveredGroup, setHoveredGroup] = useState(null);\n\n  // Scales\n  const yScale = d3\n    .scaleLinear()\n    .domain([Math.min(...data.map(v => v.y)), Math.max(...data.map(v => v.y))])\n    .range([boundsHeight, 0]);\n  const xScale = d3\n    .scaleLinear()\n    .domain([0, Math.max(...data.map(v => v.x))])\n    .range([0, boundsWidth]);\n  const allGroups = data.map(d => String(d.group));\n  const colorScale = d3.scaleOrdinal().domain(allGroups).range(fillColor);\n\n  // Build the shapes\n  const allShapes = data.map((d, i) => {\n    const className =\n      hoveredGroup && d.group !== hoveredGroup\n        ? styles.scatterplotCircle + \" \" + styles.dimmed\n        : styles.scatterplotCircle;\n\n    return (\n      <circle\n        key={i}\n        r={markerSize}\n        cx={xScale(d.x)}\n        cy={yScale(d.y)}\n        className={`${className} ${showAnimation ? animationClass : \"\"}`}\n        stroke={colorScale(d.group)}\n        fill={colorScale(d.group)}\n        onMouseOver={e => {\n          setHoveredGroup(d.group);\n          if (showTooltip) {\n            tooltip.style(\"padding\", \"5px\");\n            tooltip.style(\"opacity\", 0.9);\n            tooltip\n              .html(\n                `${tooltipPrefix}  ${d.group} → ${d.subGroup} → ${d.size} ${tooltipSuffix}`,\n              )\n              .style(\"left\", e.pageX + 5 + \"px\")\n              .style(\"top\", e.pageY - 30 + \"px\");\n          }\n        }}\n        onMouseLeave={() => {\n          setHoveredGroup(null);\n          tooltip.style(\"padding\", 0);\n          tooltip.style(\"opacity\", 0);\n        }}\n      />\n    );\n  });\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        {showYaxisLabel && (\n          <text\n            fontSize={fontSize}\n            x={-height / 2}\n            y='20'\n            fill={fontColor}\n            transform='rotate(270)'\n            style={{ textAnchor: \"middle\" }}\n          >\n            {yAxisLabel}\n          </text>\n        )}\n        <g\n          width={boundsWidth}\n          height={boundsHeight}\n          transform={`translate(${[marginLeft, marginTop].join(\",\")})`}\n        >\n          <AxisLeft\n            yScale={yScale}\n            pixelsPerTick={yTicks}\n            width={boundsWidth}\n            fontSize={fontSize}\n            fontColor={fontColor}\n            lineColor={lineColor}\n            xTicks={xTicks}\n            showXaxisLine={showXaxisLine}\n            showYaxis={showYaxis}\n          />\n          <g transform={`translate(0, ${boundsHeight})`}>\n            <AxisBottom\n              xScale={xScale}\n              pixelsPerTick={yTicks}\n              height={boundsHeight}\n              fontSize={fontSize}\n              fontColor={fontColor}\n              lineColor={lineColor}\n              yTicks={yTicks}\n              showYaxisLine={showYaxisLine}\n              showXaxis={showXaxis}\n            />\n          </g>\n          {allShapes}\n        </g>\n        {showXaxisLabel && (\n          <text\n            fontSize={fontSize}\n            x={width / 2}\n            y={height - 10}\n            fill={fontColor}\n            style={{ textAnchor: \"middle\" }}\n          >\n            {xAxisLabel}\n          </text>\n        )}\n      </svg>\n    </div>\n  );\n};\n\nScatterplot.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  data: PropTypes.array,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  xTicks: PropTypes.number,\n  yTicks: PropTypes.number,\n  markerSize: PropTypes.number,\n  fontSize: PropTypes.number,\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  showTooltip: PropTypes.bool,\n  showYaxisLabel: PropTypes.bool,\n  showXaxisLabel: PropTypes.bool,\n  showYaxisLine: PropTypes.bool,\n  showXaxisLine: PropTypes.bool,\n  tooltipPrefix: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  yAxisLabel: PropTypes.string,\n  xAxisLabel: PropTypes.string,\n  showXaxis: PropTypes.bool,\n  showYaxis: PropTypes.bool,\n};\n\nScatterplot.defaultProps = scatterPlotChartProps;\n\nexport default Scatterplot;\n"],"sourceRoot":""}