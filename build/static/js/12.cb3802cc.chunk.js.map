{"version":3,"sources":["components/shared/D3/VerticalBarChart.js"],"names":["VerticalBarChart","props","svgRef","useRef","width","height","marginTop","marginRight","marginBottom","marginLeft","fillColor","fontColor","yAxisLabel","xAxisLabel","padding","style","tooltipPrefix","tooltipSuffix","showTooltip","data","showYaxisLine","showXaxis","showXaxisLabel","showYaxis","showYaxisLabel","sortClause","showAnimation","animationDuration","xAxisTicksOrientation","onClick","fontSize","yTicks","useEffect","isNaN","order","arguments","length","undefined","d3","_ref","d","_slicedToArray","Number","value","label","_ref3","map","sortBy","x","domain","range","xAxis","tickSizeOuter","y","nice","svg","current","attr","call","extent","scaleExtent","translateExtent","on","event","transform","applyX","selectAll","bandwidth","remove","append","join","i","e","tooltip","html","concat","toLocaleString","minimumFractionDigits","maximumFractionDigits","pageX","pageY","transition","duration","g","text","ticks","tickFormat","select","JSON","stringify","_jsx","ref","defaultProps","verticalBarChartProps"],"mappings":"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","file":"static/js/12.cb3802cc.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { tooltip } from \"./constants\";\nimport PropTypes from \"prop-types\";\nimport { verticalBarChartProps } from \"./propsData\";\n\nconst VerticalBarChart = props => {\n  const svgRef = useRef(null);\n  const {\n    width,\n    height,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft,\n    fillColor,\n    fontColor,\n    yAxisLabel,\n    xAxisLabel,\n    padding,\n    style,\n    tooltipPrefix,\n    tooltipSuffix,\n    showTooltip,\n    data,\n    showYaxisLine,\n    showXaxis,\n    showXaxisLabel,\n    showYaxis,\n    showYaxisLabel,\n    sortClause,\n    showAnimation,\n    animationDuration,\n    xAxisTicksOrientation,\n    onClick,\n    fontSize,\n    yTicks,\n  } = props;\n\n  const sortBy = (clause = null) => {\n    switch (clause) {\n      case \"desc\":\n        return d3.groupSort(\n          data,\n          ([d]) => -Number(d.value),\n          d => d.label,\n        );\n      case \"asc\":\n        return d3.groupSort(\n          data,\n          ([d]) => Number(d.value),\n          d => d.label,\n        );\n      default:\n        return data.map(d => d.label);\n    }\n  };\n\n  useEffect(() => {\n    if (!isNaN(width)) {\n      const order = sortBy(sortClause);\n      // Declare the x (horizontal position) scale.\n      const x = d3\n        .scaleBand()\n        .domain(order)\n        .range([marginLeft, width - marginRight])\n        .padding(padding);\n\n      const xAxis = d3.axisBottom(x).tickSizeOuter(0);\n\n      // Declare the y (vertical position) scale.\n      const y = d3\n        .scaleLinear()\n        .domain([0, d3.max(data, d => Number(d.value))])\n        .nice()\n        .range([height - marginBottom, marginTop]);\n\n      const zoom = svg => {\n        const extent = [\n          [marginLeft, marginTop],\n          [width - marginRight, height - marginTop],\n        ];\n\n        svg.call(\n          d3\n            .zoom()\n            .scaleExtent([1, 8])\n            .translateExtent(extent)\n            .extent(extent)\n            .on(\"zoom\", event => {\n              x.range(\n                [marginLeft, width - marginRight].map(d =>\n                  event.transform.applyX(d),\n                ),\n              );\n              svg\n                .selectAll(\".bars rect\")\n                .attr(\"x\", d => x(d.label))\n                .attr(\"width\", x.bandwidth());\n              svg.selectAll(\".x-axis\").call(xAxis);\n            }),\n        );\n      };\n      // Create the SVG container.\n      const svg = d3\n        .select(svgRef.current)\n        .attr(\"width\", width)\n        .attr(\"height\", height + 10)\n        .attr(\"viewBox\", [0, 0, width, height])\n        .call(zoom);\n\n      // Add a rect for each bar.\n      svg.selectAll(`.bars`).remove();\n      svg\n        .append(\"g\")\n        .attr(\"class\", \"bars\")\n        .selectAll()\n        .data(data)\n        .join(\"rect\")\n        .on(\"click\", (d, i) => {\n          onClick(d, i);\n        })\n        .on(\"mousemove\", (e, d) => {\n          if (showTooltip) {\n            tooltip.style(\"padding\", \"5px\");\n            tooltip.style(\"opacity\", 1);\n            tooltip\n              .html(\n                `<div>${tooltipPrefix}<div><div>${d.label}</div><div>${Number(\n                  d.value,\n                ).toLocaleString(\"en-US\", {\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })}</div><div>${tooltipSuffix}</div>`,\n              )\n              .style(\"left\", e.pageX + 10 + \"px\")\n              .style(\"top\", e.pageY - 50 + \"px\");\n          }\n        })\n        .on(\"mouseout\", d => {\n          tooltip.style(\"padding\", 0);\n          tooltip.style(\"opacity\", 0);\n        })\n        .attr(\"width\", x.bandwidth())\n        .attr(\"x\", d => x(d.label))\n        // .attr(\"y\", 0)\n        // .attr(\"height\", 0)\n        .transition()\n        .duration((d, i) => (showAnimation ? animationDuration + i * 100 : i))\n        .attr(\"fill\", fillColor)\n        .attr(\"y\", d => y(d.value))\n        .attr(\"height\", d => y(0) - y(d.value));\n\n      // Add the x-axis and label.\n      svg.selectAll(`#x-axis`).remove();\n      if (showXaxis) {\n        svg\n          .append(\"g\")\n          .attr(\"id\", \"x-axis\")\n          .attr(\"class\", \"x-axis\")\n          .attr(\"transform\", `translate(0,${height - marginBottom})`)\n          .call(xAxis)\n          .call(g =>\n            showXaxisLabel\n              ? g\n                  .append(\"text\")\n                  .style(\"text-anchor\", \"start\")\n                  .attr(\"font-size\", fontSize)\n                  .attr(\"x\", width / 2)\n                  .attr(\"y\", marginBottom)\n                  .attr(\"fill\", fontColor)\n                  .text(xAxisLabel)\n              : g,\n          );\n        if (xAxisTicksOrientation === \"vertical\") {\n          svg\n            .selectAll(\".x-axis .tick text\")\n            .attr(\"font-size\", fontSize)\n            .style(\"text-anchor\", \"end\")\n            .attr(\"y\", \"15\")\n            .attr(\"dx\", \"-1em\")\n            .attr(\"dy\", \".15em\")\n            .attr(\"transform\", \"rotate(-60)\");\n        }\n      }\n\n      // Add the y-axis and x-axis label\n      svg.selectAll(`#y-axis`).remove();\n      if (showYaxis) {\n        svg\n          .append(\"g\")\n          .attr(\"id\", \"y-axis\")\n          .attr(\"class\", \"y-axis\")\n          .attr(\"transform\", `translate(${marginLeft},0)`)\n          .call(d3.axisLeft(y).ticks(yTicks).tickFormat(d3.format(\".2s\")))\n          .call(g => (!showYaxisLine ? g.select(\".domain\").remove() : g))\n          .call(g =>\n            showYaxisLabel\n              ? g\n                  .append(\"text\")\n                  .style(\"text-anchor\", \"middle\")\n                  .attr(\"font-size\", fontSize)\n                  .attr(\"x\", -((height - marginBottom) / 2))\n                  .attr(\"y\", -(marginLeft - 20))\n                  .attr(\"fill\", fontColor)\n                  .attr(\"transform\", \"rotate(270)\")\n                  .text(yAxisLabel)\n              : g,\n          );\n\n        svg.selectAll(\".domain\").attr(\"stroke\", fillColor);\n        svg.selectAll(\".tick text\").attr(\"stroke\", fontColor);\n        svg.selectAll(\".tick line\").attr(\"stroke\", fillColor);\n      }\n    }\n  }, [JSON.stringify(props)]);\n\n  return <svg style={style} ref={svgRef} />;\n};\n\nVerticalBarChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  yAxisLabel: PropTypes.string,\n  xAxisLabel: PropTypes.string,\n  padding: PropTypes.number,\n  style: PropTypes.object,\n  tooltipPrefix: PropTypes.string,\n  tooltipSuffix: PropTypes.string,\n  showTooltip: PropTypes.bool,\n  data: PropTypes.array,\n  showYaxisLine: PropTypes.bool,\n  showXaxis: PropTypes.bool,\n  showXaxisLabel: PropTypes.bool,\n  showYaxis: PropTypes.bool,\n  showYaxisLabel: PropTypes.bool,\n  showAnimation: PropTypes.bool,\n  animationDuration: PropTypes.number,\n  sortClause: PropTypes.string,\n  xAxisTicksOrientation: PropTypes.string,\n  onClick: PropTypes.func,\n  fontSize: PropTypes.number,\n  yTicks: PropTypes.number,\n};\n\nVerticalBarChart.defaultProps = verticalBarChartProps;\n\nexport default VerticalBarChart;\n"],"sourceRoot":""}