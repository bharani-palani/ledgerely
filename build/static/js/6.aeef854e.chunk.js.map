{"version":3,"sources":["components/shared/D3/ScatterPlot/scatterplot.module.css","components/shared/D3/ScatterPlot/AxisLeft.js","components/shared/D3/ScatterPlot/AxisBottom.js","components/shared/D3/ScatterPlot/index.js"],"names":["module","exports","AxisLeft","_ref","yScale","pixelsPerTick","width","range","ticks","useMemo","height","numberOfTicksTarget","Math","floor","map","value","yOffset","_jsx","_Fragment","children","_ref2","_jsxs","transform","concat","shapeRendering","x1","x2","stroke","strokeWidth","style","fontSize","textAnchor","fill","AxisBottom","xScale","xOffset","y1","y2","MARGIN","top","right","bottom","left","Scatterplot","data","boundsWidth","boundsHeight","_useState","useState","_useState2","_slicedToArray","hoveredGroup","setHoveredGroup","d3","domain","allGroups","d","String","group","colorScale","allShapes","i","className","styles","scatterplotCircle","dimmed","r","cx","x","cy","y","onMouseOver","onMouseLeave","join"],"mappings":"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","file":"static/js/6.aeef854e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scatterplotCircle\":\"scatterplot_scatterplotCircle__1qlsx\",\"dimmed\":\"scatterplot_dimmed__2KlUQ\"};","import React, { useMemo } from \"react\";\n\nconst TICK_LENGTH = 10;\n\nconst AxisLeft = ({ yScale, pixelsPerTick, width }) => {\n  const range = yScale.range();\n\n  const ticks = useMemo(() => {\n    const height = range[0] - range[1];\n    const numberOfTicksTarget = Math.floor(height / pixelsPerTick);\n\n    return yScale.ticks(numberOfTicksTarget).map(value => ({\n      value,\n      yOffset: yScale(value),\n    }));\n  }, [yScale]);\n\n  return (\n    <>\n      {/* Ticks and labels */}\n      {ticks.map(({ value, yOffset }) => (\n        <g\n          key={value}\n          transform={`translate(0, ${yOffset})`}\n          shapeRendering={\"crispEdges\"}\n        >\n          <line\n            x1={-TICK_LENGTH}\n            x2={width + TICK_LENGTH}\n            stroke='#D2D7D3'\n            strokeWidth={0.5}\n          />\n          <text\n            key={value}\n            style={{\n              fontSize: \"10px\",\n              textAnchor: \"middle\",\n              transform: \"translateX(-20px)\",\n              fill: \"#D2D7D3\",\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n\nexport default AxisLeft;\n","import React, { useMemo } from \"react\";\n\n// tick length\nconst TICK_LENGTH = 10;\n\nconst AxisBottom = ({ xScale, pixelsPerTick, height }) => {\n  const range = xScale.range();\n\n  const ticks = useMemo(() => {\n    const width = range[1] - range[0];\n    const numberOfTicksTarget = Math.floor(width / pixelsPerTick);\n\n    return xScale.ticks(numberOfTicksTarget).map(value => ({\n      value,\n      xOffset: xScale(value),\n    }));\n  }, [xScale]);\n\n  return (\n    <>\n      {/* Ticks and labels */}\n      {ticks.map(({ value, xOffset }) => (\n        <g\n          key={value}\n          transform={`translate(${xOffset}, 0)`}\n          shapeRendering={\"crispEdges\"}\n        >\n          <line\n            y1={TICK_LENGTH}\n            y2={-height - TICK_LENGTH}\n            stroke='#D2D7D3'\n            strokeWidth={0.5}\n          />\n          <text\n            key={value}\n            style={{\n              fontSize: \"10px\",\n              textAnchor: \"middle\",\n              transform: \"translateY(20px)\",\n              fill: \"#D2D7D3\",\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n\nexport default AxisBottom;\n","import * as d3 from \"d3\";\nimport styles from \"./scatterplot.module.css\";\nimport AxisLeft from \"./AxisLeft\";\nimport AxisBottom from \"./AxisBottom\";\nimport React, { useState } from \"react\";\n\nconst MARGIN = { top: 60, right: 60, bottom: 60, left: 60 };\n\n// Simplified version of a scatterplot\nconst Scatterplot = ({ width, height, data }) => {\n  const boundsWidth = width - MARGIN.right - MARGIN.left;\n  const boundsHeight = height - MARGIN.top - MARGIN.bottom;\n\n  const [hoveredGroup, setHoveredGroup] = useState(null);\n\n  // Scales\n  const yScale = d3.scaleLinear().domain([35, 85]).range([boundsHeight, 0]);\n  const xScale = d3\n    .scaleLinear()\n    .domain([-3000, 50000])\n    .range([0, boundsWidth]);\n  const allGroups = data.map(d => String(d.group));\n  const colorScale = d3\n    .scaleOrdinal()\n    .domain(allGroups)\n    .range([\"#e0ac2b\", \"#e85252\", \"#6689c6\", \"#9a6fb0\", \"#a53253\"]);\n\n  // Build the shapes\n  const allShapes = data.map((d, i) => {\n    const className =\n      hoveredGroup && d.group !== hoveredGroup\n        ? styles.scatterplotCircle + \" \" + styles.dimmed\n        : styles.scatterplotCircle;\n\n    return (\n      <circle\n        key={i}\n        r={5}\n        cx={xScale(d.x)}\n        cy={yScale(d.y)}\n        className={className}\n        stroke={colorScale(d.group)}\n        fill={colorScale(d.group)}\n        onMouseOver={() => setHoveredGroup(d.group)}\n        onMouseLeave={() => setHoveredGroup(null)}\n      />\n    );\n  });\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        {/* first group is for the violin and box shapes */}\n        <g\n          width={boundsWidth}\n          height={boundsHeight}\n          transform={`translate(${[MARGIN.left, MARGIN.top].join(\",\")})`}\n        >\n          {/* Y axis */}\n          <AxisLeft yScale={yScale} pixelsPerTick={40} width={boundsWidth} />\n\n          {/* X axis, use an additional translation to appear at the bottom */}\n          <g transform={`translate(0, ${boundsHeight})`}>\n            <AxisBottom\n              xScale={xScale}\n              pixelsPerTick={40}\n              height={boundsHeight}\n            />\n          </g>\n\n          {/* Circles */}\n          {allShapes}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport default Scatterplot;\n"],"sourceRoot":""}