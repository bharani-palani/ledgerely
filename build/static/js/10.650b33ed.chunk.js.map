{"version":3,"sources":["components/shared/D3/PannableChart.js"],"names":["PannableChart","props","svgRef","useRef","width","height","marginTop","marginRight","marginBottom","marginLeft","fillColor","fontColor","lineColor","yAxisLabel","style","data","showYaxisLine","showXaxis","showYaxis","showYaxisLabel","yTicks","useEffect","length","parent","d3","current","totalWidth","x","domain","d","Date","label","range","y","value","nice","area","curve","y0","y1","selectAll","remove","append","attr","concat","call","ticks","g","select","clone","text","svg","every","tickSizeOuter","datum","JSON","stringify","_jsx","ref","defaultProps","pannableChartProps"],"mappings":"8GAAA,yCAKMA,EAAgB,SAAAC,GACpB,IAAMC,EAASC,iBAAO,MAEpBC,EAiBEH,EAjBFG,MACAC,EAgBEJ,EAhBFI,OACAC,EAeEL,EAfFK,UACAC,EAcEN,EAdFM,YACAC,EAaEP,EAbFO,aACAC,EAYER,EAZFQ,WACAC,EAWET,EAXFS,UACAC,EAUEV,EAVFU,UACAC,EASEX,EATFW,UACAC,EAQEZ,EARFY,WACAC,EAOEb,EAPFa,MACAC,EAMEd,EANFc,KACAC,EAKEf,EALFe,cACAC,EAIEhB,EAJFgB,UACAC,EAGEjB,EAHFiB,UACAC,EAEElB,EAFFkB,eACAC,EACEnB,EADFmB,OA0FF,OAvFAC,qBAAU,WACR,GAAIN,EAAKO,OAAS,EAAG,CACnB,IAAMC,EAASC,IAAUtB,EAAOuB,SAC1BC,EAAatB,EAEbuB,EAAIH,MAEPI,OAAOJ,IAAUT,GAAM,SAAAc,GAAC,OAAI,IAAIC,KAAKD,EAAEE,MAAM,KAC7CC,MAAM,CAACvB,EAAYiB,EAAanB,IAE7B0B,EAAIT,MAEPI,OAAO,CAAC,EAAGJ,IAAOT,GAAM,SAAAc,GAAC,OAAIA,EAAEK,KAAK,MACpCC,KAAK,GACLH,MAAM,CAAC3B,EAASG,EAAcF,IAG3B8B,EAAOZ,MAEVa,MAAMb,KACNG,GAAE,SAAAE,GAAC,OAAIF,EAAE,IAAIG,KAAKD,EAAEE,OAAO,IAC3BO,GAAGL,EAAE,IACLM,IAAG,SAAAV,GAAC,OAAII,EAAEJ,EAAEK,MAAM,IACrBX,EAAOiB,UAAU,OAAOC,SACxBlB,EAAOiB,UAAU,OAAOC,SAExBlB,EACGmB,OAAO,OACPC,KAAK,QAASvC,GACduC,KAAK,SAAUtC,GACfS,MAAM,WAAY,YAClBA,MAAM,iBAAkB,QACxBA,MAAM,UAAW,GACjB4B,OAAO,KACPC,KAAK,YAAY,aAADC,OAAenC,EAAU,QACzCkC,KAAK,SAAUhC,GACfkC,KAAK3B,EAAYM,IAAYS,GAAGa,MAAM1B,GAAU,WAAO,GACvDyB,MAAK,SAAAE,GAAC,OAAIA,EAAEP,UAAU,cAAcG,KAAK,SAAU/B,EAAU,IAC7DiC,MAAK,SAAAE,GAAC,OACJ/B,EAEG+B,EAAEC,OAAO,WAAWL,KAAK,SAAU/B,GADnCmC,EAAEC,OAAO,WAAWP,QACyB,IAElDI,MAAK,SAAAE,GAAC,OACL5B,EACI4B,EACGC,OAAO,2BACPC,QACAN,KAAK,IAAK,GACVA,KAAK,cAAe,SACpBA,KAAK,cAAe,QACpBA,KAAK,OAAQhC,GACbuC,KAAKrC,GACRkC,CAAC,IAIT,IAAMI,EAAM5B,EACTmB,OAAO,OACPC,KAAK,QAASjB,GACdiB,KAAK,SAAUtC,GACfS,MAAM,UAAW,SAEhBG,GACFkC,EACGT,OAAO,KACPC,KAAK,YAAY,eAADC,OAAiBvC,EAASG,EAAY,MACtDqC,KACCrB,IACcG,GACXmB,MAAMtB,IAAY4B,MAAMrC,EAAKO,OAASlB,IACtCiD,cAAc,IAElBR,MAAK,SAAAE,GAAC,OAAIA,EAAEP,UAAU,cAAcG,KAAK,SAAU/B,EAAU,IAC7DiC,MAAK,SAAAE,GAAC,OAAIA,EAAEP,UAAU,cAAcG,KAAK,SAAUhC,EAAU,IAElEwC,EACGT,OAAO,QACPC,KAAK,QAAS,QACdW,MAAMvC,GACN4B,KAAK,OAAQjC,GACbiC,KAAK,IAAKP,GAEbe,EAAIH,OAAO,WAAWL,KAAK,SAAU/B,EACvC,CACF,GAAG,CAAC2C,KAAKC,UAAUvD,KAEZwD,cAAA,OAAK3C,MAAOA,EAAO4C,IAAKxD,GACjC,EAqBAF,EAAc2D,aAAeC,IAEd5D,W","file":"static/js/10.650b33ed.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\nimport { pannableChartProps } from \"./propsData\";\n\nconst PannableChart = props => {\n  const svgRef = useRef(null);\n  const {\n    width,\n    height,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft,\n    fillColor,\n    fontColor,\n    lineColor,\n    yAxisLabel,\n    style,\n    data,\n    showYaxisLine,\n    showXaxis,\n    showYaxis,\n    showYaxisLabel,\n    yTicks,\n  } = props;\n\n  useEffect(() => {\n    if (data.length > 0) {\n      const parent = d3.select(svgRef.current);\n      const totalWidth = width;\n      // Create the horizontal (x) scale over the total width.\n      const x = d3\n        .scaleUtc()\n        .domain(d3.extent(data, d => new Date(d.label)))\n        .range([marginLeft, totalWidth - marginRight]);\n      // Create the vertical (x) scale.\n      const y = d3\n        .scaleLinear()\n        .domain([0, d3.max(data, d => d.value)])\n        .nice(6)\n        .range([height - marginBottom, marginTop]);\n\n      // Define an area shape generator.\n      const area = d3\n        .area()\n        .curve(d3.curveStep)\n        .x(d => x(new Date(d.label)))\n        .y0(y(0))\n        .y1(d => y(d.value));\n      parent.selectAll(`svg`).remove();\n      parent.selectAll(`div`).remove();\n\n      parent\n        .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .style(\"position\", \"absolute\")\n        .style(\"pointer-events\", \"none\")\n        .style(\"z-index\", 1)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${marginLeft},0)`)\n        .attr(\"stroke\", fontColor)\n        .call(showYaxis ? d3.axisLeft(y).ticks(yTicks) : () => {})\n        .call(g => g.selectAll(\".tick line\").attr(\"stroke\", lineColor))\n        .call(g =>\n          !showYaxisLine\n            ? g.select(\".domain\").remove()\n            : g.select(\".domain\").attr(\"stroke\", lineColor),\n        )\n        .call(g =>\n          showYaxisLabel\n            ? g\n                .select(\".tick:last-of-type text\")\n                .clone()\n                .attr(\"x\", 3)\n                .attr(\"text-anchor\", \"start\")\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"fill\", fontColor)\n                .text(yAxisLabel)\n            : g,\n        );\n\n      // Create the svg with the vertical axis.\n      const svg = parent\n        .append(\"svg\")\n        .attr(\"width\", totalWidth)\n        .attr(\"height\", height)\n        .style(\"display\", \"block\");\n\n      if (showXaxis) {\n        svg\n          .append(\"g\")\n          .attr(\"transform\", `translate(0,${height - marginBottom})`)\n          .call(\n            d3\n              .axisBottom(x)\n              .ticks(d3.utcMonth.every(data.length / width))\n              .tickSizeOuter(0),\n          )\n          .call(g => g.selectAll(\".tick line\").attr(\"stroke\", lineColor))\n          .call(g => g.selectAll(\".tick text\").attr(\"stroke\", fontColor));\n      }\n      svg\n        .append(\"path\")\n        .attr(\"class\", \"path\")\n        .datum(data)\n        .attr(\"fill\", fillColor)\n        .attr(\"d\", area);\n\n      svg.select(\".domain\").attr(\"stroke\", lineColor);\n    }\n  }, [JSON.stringify(props)]);\n\n  return <div style={style} ref={svgRef} />;\n};\n\nPannableChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  yAxisLabel: PropTypes.string,\n  style: PropTypes.object,\n  data: PropTypes.array,\n  showYaxisLine: PropTypes.bool,\n  showXaxis: PropTypes.bool,\n  showYaxis: PropTypes.bool,\n  showYaxisLabel: PropTypes.bool,\n  yTicks: PropTypes.number,\n};\nPannableChart.defaultProps = pannableChartProps;\n\nexport default PannableChart;\n"],"sourceRoot":""}