{"version":3,"sources":["components/shared/D3/BoxPlotChart/AxisLeft.js","components/shared/D3/BoxPlotChart/AxisBottomCategoric.js","components/shared/D3/BoxPlotChart/VerticalBox.js","components/shared/D3/BoxPlotChart/index.js","components/shared/D3/BoxPlotChart/summary-stats.js"],"names":["AxisLeft","_ref","yScale","pixelsPerTick","lineColor","fontColor","fontSize","showYaxisLine","range","ticks","useMemo","height","numberOfTicksTarget","Math","floor","map","value","yOffset","_jsxs","_Fragment","children","_jsx","d","join","fill","stroke","_ref2","transform","concat","x2","style","textAnchor","AxisBottom","xScale","showXaxisLine","_xScale$range","_xScale$range2","_slicedToArray","min","max","domain","xOffset","bandwidth","y2","VerticalBox","q1","median","q3","width","strokeWidth","animationClass","showAnimation","x1","y1","className","x","y","BoxPlotChart","data","marginTop","marginRight","marginBottom","marginLeft","fillColor","padding","markerSize","showXaxis","showYaxis","showYaxisLabel","showXaxisLabel","yAxisLabel","xAxisLabel","boundsWidth","boundsHeight","_useMemo","_d3$extent","d3","_d3$extent2","chartMin","chartMax","groups","_toConsumableArray","Set","name","allShapes","group","i","sumStats","sortedData","sort","a","b","interQuantileRange","getSummaryStats","filter","defaultProps","boxPlotChartProps"],"mappings":"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","file":"static/js/7.9dcea083.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\n\n// tick length\nconst TICK_LENGTH = 5;\n\nexport const AxisLeft = ({\n  yScale,\n  pixelsPerTick,\n  lineColor,\n  fontColor,\n  fontSize,\n  showYaxisLine,\n}) => {\n  const range = yScale.range();\n\n  const ticks = useMemo(() => {\n    const height = range[0] - range[1];\n    const numberOfTicksTarget = Math.floor(height / pixelsPerTick);\n\n    return yScale.ticks(numberOfTicksTarget).map(value => ({\n      value,\n      yOffset: yScale(value),\n    }));\n  }, [yScale]);\n\n  return (\n    <>\n      {showYaxisLine && (\n        <path\n          d={[\"M\", 0, range[0], \"L\", 0, range[1]].join(\" \")}\n          fill='none'\n          stroke={lineColor}\n        />\n      )}\n      {ticks.map(({ value, yOffset }) => (\n        <g key={value} transform={`translate(0, ${yOffset})`}>\n          {showYaxisLine && <line x2={-TICK_LENGTH} stroke={lineColor} />}\n          <text\n            key={value}\n            fill={fontColor}\n            style={{\n              fontSize: fontSize,\n              textAnchor: \"middle\",\n              transform: \"translateX(-20px)\",\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n","import React, { useMemo } from \"react\";\n\n// tick length\nconst TICK_LENGTH = 6;\n\nexport const AxisBottom = ({\n  xScale,\n  lineColor,\n  fontColor,\n  fontSize,\n  showXaxisLine,\n}) => {\n  const [min, max] = xScale.range();\n\n  const ticks = useMemo(() => {\n    return xScale.domain().map(value => ({\n      value,\n      xOffset: xScale(value) + xScale.bandwidth() / 2,\n    }));\n  }, [xScale]);\n\n  return (\n    <>\n      {showXaxisLine && (\n        <path\n          d={[\"M\", min + 20, 0, \"L\", max - 20, 0].join(\" \")}\n          fill='none'\n          stroke={lineColor}\n        />\n      )}\n      {ticks.map(({ value, xOffset }) => (\n        <g key={value} transform={`translate(${xOffset}, 0)`}>\n          {showXaxisLine && <line y2={TICK_LENGTH} stroke={lineColor} />}\n          <text\n            key={value}\n            fill={fontColor}\n            style={{\n              fontSize: fontSize,\n              textAnchor: \"middle\",\n              transform: \"translateY(20px)\",\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n","import React from \"react\";\n\nexport const VerticalBox = ({\n  min,\n  q1,\n  median,\n  q3,\n  max,\n  width,\n  stroke,\n  strokeWidth,\n  fill,\n  animationClass,\n  showAnimation,\n}) => {\n  return (\n    <>\n      <line\n        x1={width / 2}\n        x2={width / 2}\n        y1={min}\n        y2={max}\n        stroke={stroke}\n        strokeWidth={strokeWidth}\n        className={showAnimation ? animationClass : \"\"}\n      />\n      <rect\n        x={0}\n        y={q3}\n        width={width}\n        height={q1 - q3}\n        stroke={stroke}\n        fill={fill}\n        className={showAnimation ? animationClass : \"\"}\n      />\n      <line\n        x1={0}\n        x2={width}\n        y1={median}\n        y2={median}\n        stroke={stroke}\n        strokeWidth={strokeWidth}\n        className={showAnimation ? animationClass : \"\"}\n      />\n    </>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport { getSummaryStats } from \"./summary-stats\";\nimport { AxisLeft } from \"./AxisLeft\";\nimport { AxisBottom } from \"./AxisBottomCategoric\";\nimport { VerticalBox } from \"./VerticalBox\";\nimport { boxPlotChartProps } from \"../propsData\";\nimport PropTypes from \"prop-types\";\n\nconst BoxPlotChart = ({\n  width,\n  height,\n  data,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  fillColor,\n  fontColor,\n  lineColor,\n  padding,\n  markerSize,\n  fontSize,\n  showXaxis,\n  showYaxis,\n  showYaxisLabel,\n  showXaxisLabel,\n  yAxisLabel,\n  xAxisLabel,\n  animationClass,\n  showYaxisLine,\n  showXaxisLine,\n  showAnimation,\n}) => {\n  const boundsWidth = width - marginRight - marginLeft;\n  const boundsHeight = height - marginTop - marginBottom;\n\n  // Compute everything derived from the dataset:\n  const { chartMin, chartMax, groups } = useMemo(() => {\n    const [chartMin, chartMax] = d3.extent(data.map(d => d.value));\n    const groups = [...new Set(data.map(d => d.name))];\n    return { chartMin, chartMax, groups };\n  }, [data]);\n\n  // Compute scales\n  const yScale = d3\n    .scaleLinear()\n    .domain([chartMin, chartMax])\n    .range([boundsHeight, 0]);\n  const xScale = d3\n    .scaleBand()\n    .range([0, boundsWidth])\n    .domain(groups)\n    .padding(padding);\n\n  // Build the box shapes\n  const allShapes = groups.map((group, i) => {\n    const groupData = data.filter(d => d.name === group).map(d => d.value);\n    const sumStats = getSummaryStats(groupData);\n\n    if (!sumStats) {\n      return null;\n    }\n\n    const { min, q1, median, q3, max } = sumStats;\n\n    return (\n      <g key={i} transform={`translate(${xScale(group)},0)`}>\n        <VerticalBox\n          width={xScale.bandwidth()}\n          q1={yScale(q1)}\n          median={yScale(median)}\n          q3={yScale(q3)}\n          min={yScale(min)}\n          max={yScale(max)}\n          stroke={lineColor}\n          strokeWidth={markerSize}\n          fill={fillColor}\n          showAnimation={showAnimation}\n          animationClass={animationClass}\n        />\n      </g>\n    );\n  });\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        {showYaxisLabel && (\n          <text\n            fontSize={fontSize}\n            x={-height / 2}\n            y='20'\n            fill={fontColor}\n            transform='rotate(270)'\n            style={{ textAnchor: \"middle\" }}\n          >\n            {yAxisLabel}\n          </text>\n        )}\n        <g\n          width={boundsWidth}\n          height={boundsHeight}\n          transform={`translate(${[marginLeft, marginTop].join(\",\")})`}\n        >\n          {allShapes}\n          {showYaxis && (\n            <AxisLeft\n              yScale={yScale}\n              pixelsPerTick={30}\n              lineColor={lineColor}\n              fontColor={fontColor}\n              fontSize={fontSize}\n              showYaxisLine={showYaxisLine}\n            />\n          )}\n          {showXaxis && (\n            <g transform={`translate(0, ${boundsHeight})`}>\n              <AxisBottom\n                xScale={xScale}\n                lineColor={lineColor}\n                fontColor={fontColor}\n                fontSize={fontSize}\n                showXaxisLine={showXaxisLine}\n              />\n            </g>\n          )}\n        </g>\n        {showXaxisLabel && (\n          <text\n            fontSize={fontSize}\n            x={width / 2}\n            y={height - 10}\n            fill={fontColor}\n            style={{ textAnchor: \"middle\" }}\n          >\n            {xAxisLabel}\n          </text>\n        )}\n      </svg>\n    </div>\n  );\n};\n\nBoxPlotChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  data: PropTypes.array,\n  markerSize: PropTypes.number,\n  padding: PropTypes.number,\n  fontSize: PropTypes.number,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  showXaxis: PropTypes.bool,\n  showYaxis: PropTypes.bool,\n  yAxisLabel: PropTypes.string,\n  xAxisLabel: PropTypes.string,\n  showYaxisLabel: PropTypes.bool,\n  showXaxisLabel: PropTypes.bool,\n  showYaxisLine: PropTypes.bool,\n  showXaxisLine: PropTypes.bool,\n  showAnimation: PropTypes.bool,\n  animationClass: PropTypes.string,\n};\n\nBoxPlotChart.defaultProps = boxPlotChartProps;\n\nexport default BoxPlotChart;\n","import * as d3 from \"d3\";\n\n// Takes an array of numbers and compute some summary statistics from it like quantiles, median..\n// Those summary statistics are the info needed to draw a boxplot\nexport const getSummaryStats = data => {\n  const sortedData = data.sort(function (a, b) {\n    return a - b;\n  });\n\n  const q1 = d3.quantile(sortedData, 0.25);\n  const median = d3.quantile(sortedData, 0.5);\n  const q3 = d3.quantile(sortedData, 0.75);\n\n  if (!q3 || !q1 || !median) {\n    return;\n  }\n\n  const interQuantileRange = q3 - q1;\n  const min = q1 - 1 * interQuantileRange;\n  const max = q3 + 1 * interQuantileRange;\n\n  return { min, q1, median, q3, max };\n};\n"],"sourceRoot":""}