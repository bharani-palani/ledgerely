{"version":3,"sources":["components/shared/D3/DensityChart/AxisBottom.js","components/shared/D3/DensityChart/index.js"],"names":["AxisBottom","_ref","xScale","pixelsPerTick","fontColor","lineColor","range","ticks","useMemo","width","numberOfTicksTarget","Math","floor","map","value","xOffset","_jsxs","_Fragment","children","_jsx","d","join","fill","stroke","_ref2","transform","concat","y2","style","fontSize","textAnchor","DensityChart","height","data","marginTop","marginRight","marginBottom","marginLeft","fillColor","boundsWidth","boundsHeight","d3","domain","density","kernel","X","k","v","abs","V","x","yScale","max","apply","_toConsumableArray","path","y","curve","lineGenerator","strokeWidth","strokeLinejoin","defaultProps","DensityChartData"],"mappings":"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","file":"static/js/7.12efcd50.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nconst TICK_LENGTH = 6;\n\nconst AxisBottom = ({ xScale, pixelsPerTick, fontColor, lineColor }) => {\n  const range = xScale.range();\n\n  const ticks = useMemo(() => {\n    const width = range[1] - range[0];\n    const numberOfTicksTarget = Math.floor(width / pixelsPerTick);\n\n    return xScale.ticks(numberOfTicksTarget).map(value => ({\n      value,\n      xOffset: xScale(value),\n    }));\n  }, [xScale]);\n\n  return (\n    <>\n      <path\n        d={[\"M\", range[0], 0, \"L\", range[1], 0].join(\" \")}\n        fill='none'\n        stroke={lineColor}\n      />\n      {ticks.map(({ value, xOffset }) => (\n        <g key={value} transform={`translate(${xOffset}, 0)`}>\n          <line y2={TICK_LENGTH} stroke={lineColor} />\n          <text\n            key={value}\n            fill={fontColor}\n            style={{\n              fontSize: \"10px\",\n              textAnchor: \"middle\",\n              transform: \"translateY(20px)\",\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n\nexport default AxisBottom;\n","import React, { useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport AxisBottom from \"./AxisBottom\";\nimport { DensityChartData } from \"../mockData\";\nimport PropTypes from \"prop-types\";\n\nfunction kernelDensityEstimator(kernel, X) {\n  return function (V) {\n    return X.map(x => [x, d3.mean(V, v => kernel(x - v))]);\n  };\n}\n\nfunction kernelEpanechnikov(k) {\n  return function (v) {\n    return Math.abs((v /= k)) <= 1 ? (0.75 * (1 - v * v)) / k : 0;\n  };\n}\n\nconst DensityChart = ({\n  width,\n  height,\n  data,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  fillColor,\n  fontColor,\n  lineColor,\n}) => {\n  const boundsWidth = width - marginRight - marginLeft;\n  const boundsHeight = height - marginTop - marginBottom;\n\n  const xScale = useMemo(() => {\n    // const max = Math.max(...data);\n    return d3\n      .scaleLinear()\n      .domain([0, 1000]) // note: limiting to 1000 instead of max here because of extreme values in the dataset\n      .range([10, boundsWidth - 10]);\n  }, [data, width]);\n\n  // Compute kernel density estimation\n  const density = useMemo(() => {\n    const kde = kernelDensityEstimator(kernelEpanechnikov(7), xScale.ticks(40));\n    return kde(data);\n  }, [xScale]);\n\n  const yScale = useMemo(() => {\n    const max = Math.max(...density.map(d => d[1]));\n    return d3.scaleLinear().range([boundsHeight, 0]).domain([0, max]);\n  }, [data, height]);\n\n  const path = useMemo(() => {\n    const lineGenerator = d3\n      .line()\n      .x(d => xScale(d[0]))\n      .y(d => yScale(d[1]))\n      .curve(d3.curveBasis);\n    return lineGenerator(density);\n  }, [density]);\n\n  return (\n    <svg width={width} height={height}>\n      <g\n        width={boundsWidth}\n        height={boundsHeight}\n        transform={`translate(${[marginLeft, marginTop].join(\",\")})`}\n      >\n        <path\n          d={path}\n          fill={fillColor}\n          stroke={fillColor}\n          strokeWidth={1}\n          strokeLinejoin='round'\n        />\n        <g transform={`translate(0, ${boundsHeight})`}>\n          <AxisBottom\n            xScale={xScale}\n            pixelsPerTick={40}\n            fontColor={fontColor}\n            lineColor={lineColor}\n          />\n        </g>\n      </g>\n    </svg>\n  );\n};\n\nDensityChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  data: PropTypes.array,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  fontColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  lineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n};\nDensityChart.defaultProps = DensityChartData;\n\nexport default DensityChart;\n"],"sourceRoot":""}